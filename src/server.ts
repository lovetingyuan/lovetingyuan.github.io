import { createSSRApp } from 'vue'
import { renderToString } from 'vue/server-renderer'
// import App from './App.vue'
// import createRouter from './router'
// import workerpool from 'workerpool'
import { GlobalRegistrator } from '@happy-dom/global-registrator'

const DocType = '<!DOCTYPE html>'
GlobalRegistrator.register()

window.happyDOM.settings.disableJavaScriptFileLoading = true
window.happyDOM.settings.disableJavaScriptEvaluation = true
window.happyDOM.settings.disableCSSFileLoading = true
window.happyDOM.settings.enableFileSystemHttpRequests = false
window.happyDOM.setURL('https://localhost:3000')

export default async function render({ url, html }: { url: string; html: string }) {
  document.write(html.replace(DocType, ''))
  // await import('./main')
  const [{ default: App }, { default: createRouter }] = await Promise.all([import('./App.vue'), import('./router')])
  const app = createSSRApp(App)
  // createSSRApp()
  const router = createRouter()
  app.use(router)
  // set the router to the desired URL before rendering
  await router.push(url)
  await router.isReady()
  // app.mount('#app')
  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  // const renderedHtml = await renderToString(app)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  // console.log('raw rendered html ', url, html)
  document.getElementById('app')!.innerHTML = await renderToString(app)
  const renderedHtml = DocType + '\n' + document.documentElement.outerHTML
  // console.log('rendered html', html)
  // GlobalRegistrator.unregister()
  return renderedHtml
}
