import{o,c,p as d}from"./index-3efe7f65.js";const t={class:"markdown-body"},l=d("<h2>JavaScript 中的隐式类型转换</h2><p>隐式类型转换是 JS 的一大特色，在大部分情况下开发者都会避免触发 js 的这个怪癖。如果要评选 JS 中糟糕的部分，那它肯定是名列前茅的特性。</p><p>之所以存在隐式类型转换，就是某些操作符对应的值不能直接进行计算或比较，比如<code>[] == ![]</code> 的值为<code>true</code>：</p><ol><li>!操作符会转换为 bool 值，[]为真值，此时变为 <code>[] == false</code></li><li>bool 值在比较的时候转成 1 或者 0，即<code>[] == 0</code></li><li><code>[]</code>执行<code>valueOf</code>操作返回的仍是 <code>[]</code>，那再执行<code>toString</code>操作返回&quot;&quot;, 即 <code>&quot;&quot; == 0</code></li><li>字符串和数字比较，字符串转为数字，那么<code>0 == 0</code>就是<code>true</code></li></ol><p>隐式转换被触发时，非基本类型变量会触发<code>ToPrimitive</code>操作，通常会尝试先调用<code>valueOf</code>看能否转为基本类型，否则接着调用<code>toString</code>（Date 对象相反），否则会抛出错误。</p><ul><li><code>valueOf</code>会尽量返回数字类型，如<code>true</code>会返回<code>1</code>，<code>null</code>会返回<code>0</code>，<code>undefined</code>会返回<code>NaN</code>，但是像数组或者对象就无法变成数字就会返回自身</li><li>之后就会调用<code>toString</code>方法返回字符串，一般对象会转为<code>[object 构造方法名字]</code>，但是有的对象有自己的实现，例如像数组就相当于调用<code>join</code>方法，Date 对象则会返回一个可读的字符串，正则对象则返回字面量形式的字符串等</li></ul><p><code>+</code>作为一元操作符时会将值转为数字，作为二元操作符时如果有 string 那就转为 string，否则转为 number 类型</p><p><code>==</code>在类型不同的时候也会进行隐式转换：</p><ul><li><code>undefined == null</code> 为 true，除此以外，<code>undefined</code>和<code>null</code>在与除自身进行宽松比较之外都是 false</li><li>number, string, boolean 比较时都转为 number</li><li>对象类型还是要执行<code>ToPrimitive</code>操作再比较</li></ul>",9),i=[l],p={__name:"JS隐式类型转换",setup(n,{expose:e}){return e({frontmatter:{}}),(u,a)=>(o(),c("div",t,i))}};export{p as default};
