import{o,c,p as d}from"./index-2d938af7.js";const s={class:"markdown-body"},l=d(`<h2>Vue 的初始化过程</h2><p>Vue 的入口在<code>src/core/instance/index.js</code>，首先是设置一些全局 API，如<code>set</code>, <code>delete</code>, <code>nextTick</code>, <code>observable</code>, <code>use</code>, <code>mixin</code>, <code>component</code>, <code>directive</code>, <code>extend</code>等，以及注册内置组件，之后就是从根组件开始，解析组件选项，实例化组件对象，填充各种 vm 属性方法，调用 render 进行渲染。</p><ul><li>在原型上设置<code>_init</code>方法，该方法负责生成 vm 并对 vm 进行处理： <ul><li>标准化组件选项并合并生成<code>$options</code></li><li>设置<code>$parent</code>, <code>$children</code>以及一些生命周期状态如<code>$isMounted</code>, <code>$isDestroyed</code>等</li><li>更新<code>$listeners</code>到组件上</li><li>设置渲染相关的内容，如<code>$slots</code>, <code>$attrs</code>, <code>$listeners</code>, <code>$vnode</code>, <code>$createElement</code>等</li><li>调用<code>beforeCreate</code>钩子</li><li>处理<code>inject</code>选项</li><li>处理<code>props</code>, <code>data</code>, <code>computed</code>, <code>watch</code>, <code>methods</code></li><li>处理<code>provide</code>选项</li><li>调用<code>created</code>钩子</li><li>如果有<code>el</code>选项则执行<code>$mount</code>方法（渲染过程中创建新组件也是执行这个），核心就是<code>mountComponent</code><ul><li>执行<code>beforeMount</code></li><li>执行<code>mountComponent:</code> <code>vm._update(vm._render(), hydrating)</code></li><li>建立该表达式和 vm 之间的 watcher，注入<code>beforeUpdate</code>钩子</li><li>执行<code>mounted</code>钩子</li></ul></li></ul></li><li>在原型上设置 state 相关方法和属性，包括<code>$set</code>, <code>$delete</code>, <code>$data</code>, <code>$props</code>, <code>$watch</code>等</li><li>在原型上设置事件相关的方法，包括<code>$on</code>, <code>$off</code>, <code>$emit</code>, <code>$once</code>等</li><li>在原型上设置生命周期相关的方法： <ul><li>将真正的<code>_update</code>方法设置到原型上，这个方法真正负责执行初始渲染或者更新渲染</li><li>设置<code>$forceUpdate</code>, <code>$destroy</code>等生命周期 api</li></ul></li><li>在原型上设置渲染相关的方法： <ul><li>设置渲染函数用到的一些渲染辅助方法，如 renderList, renderSlot 等，当然它们都用简写的形式挂载到原型上了</li><li>将真正的<code>_render</code>方法设置到原型上，这个方法用来执行组件的 render 方法产生新的 vnode</li><li>设置<code>$nextTick</code></li></ul></li></ul><p>Vue 本身支持 web 和 weex 两种平台，所以不同平台的入口也会在 Vue 上做一些不同的处理，包括一些内置的组件和平台特定的配置。</p><hr><ul><li><p>在原型挂载一些方法和属性</p><ul><li><code>_init</code>（vue 初始化入口方法）</li><li><code>$data</code>, <code>$props</code>, <code>$set</code>, <code>$delete</code>, <code>$watch</code></li><li><code>$on</code>, <code>$once</code>, <code>$off</code>, <code>$emit</code></li><li><code>_update</code>, <code>$forceUpdate</code>, <code>$destroy</code></li><li><code>_render</code>, render helpers，<code>$nextTick</code></li></ul></li><li><p>调用 <code>_init</code></p><ul><li>创建 <code>vm</code></li><li>resolve and merge options -&gt; <code>$options</code></li><li><code>$parent</code>, <code>$children</code>, <code>$root</code>, <code>$refs</code></li><li>update component events</li><li><code>_vnode</code>, <code>$slots</code>, <code>$scopedSlots</code>, <code>$createElement</code>, <code>$attrs</code>, <code>$listeners</code></li><li>hook <code>beforeCreate</code></li><li>向 vm 中添加：<code>inject</code>, <code>props</code>, <code>methods</code>, <code>data</code>, <code>computed</code>, <code>watch</code>, <code>provide</code></li><li>hook <code>created</code></li><li>调用 <code>$mount</code>，也就是<code>mountComponent</code></li><li>hook <code>beforeMount</code></li><li>创建 Render-Watcher<pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Watcher</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">_update</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">_render</span><span style="color:#D4D4D4;">(), </span><span style="color:#9CDCFE;">hydrating</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">noop</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">before</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">callHook</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vm</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;beforeUpdate&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">/* isRenderWatcher */</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></li><li>hook <code>mounted</code></li></ul></li></ul>`,6),n=[l],D={__name:"Vue2初始化",setup(a,{expose:e}){return e({frontmatter:{}}),(t,i)=>(o(),c("div",s,n))}};export{D as default};
