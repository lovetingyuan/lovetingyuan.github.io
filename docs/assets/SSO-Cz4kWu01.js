import{o as e,f as l,O as i}from"./vendor-b1BbEorC.js";const t={class:"markdown-body"},c=i('<h3>SSO单点登录</h3><p>如果各个子系统都共享同一个父域名，那么最简单的SSO实现方式就是在父域名种入认证的cookie</p><p>否则需要一些认证协议来实现SSO的效果，常用的协议和方案包括：<code>OAuth</code>, <code>OIDC</code>, <code>SAML</code>, <code>CAS</code>, 其中最常用的就是<code>OAuth</code>(<code>OIDC</code>)和<code>CAS</code></p><h4>OAuth</h4><p>OAuth(2.0)主要用来实现无需输入第三方系统认证信息就可以访问到其数据的效果，如常用的利用Google账号登录。</p><ol><li>用户打开客户端以后，客户端要求用户给予授权，用户同意给予客户端授权（最常用的是授权码模式或者简化版授权码模式）。 <ol><li>客户端跳转到认证服务器（参数包含重定向地址、clientId、权限scope等），用户选择是否继续给予授权</li><li>用户给予授权，认证服务器将用户导向客户端重定向地址，同时附上一个授权码</li><li>客户端的服务端拿授权码和重定向地址向认证服务器申请令牌</li><li>认证服务器核对授权码和重定向URI后，向客户端发送访问令牌和更新令牌（用来获取下一次令牌）。</li></ol></li><li>客户端使用上一步获得的授权，向认证服务器申请令牌。</li><li>认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</li><li>客户端使用令牌，向资源服务器申请获取资源。</li><li>资源服务器确认令牌无误，同意向客户端开放资源。</li></ol><p>OIDC是基于OAuth的，认证流程基本一致。</p><blockquote><p><a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a></p></blockquote><h4>CAS</h4><p>CAS需要借助统一认证中心（CAS Server）来实现子系统（CAS Client）的认证登录，通常这些系统都属于第一方。</p><ol><li>用户访问子系统，没有登录则重定向到统一认证中心（需要将子系统的地址作为重定向参数携带到url上）</li><li>用户在认证中心进行登录操作，认证中心会生成一个Service Ticket，携带这个ST跳转回原来的子系统</li><li>子系统拿到ST向认证中心校验是否有效，如果通过则将认证cookie种入到子系统</li><li>用户访问另一个子系统，跳转到认证中心，此时认证中心已经登录同样生成ST并跳转回去</li><li>子系统根据ST去认证中心校验，通过之后同样将登录后的cookie种入到子系统中</li><li>当一个子系统退出登录后，统一认证中心会通知其余所有子系统服务端清除保存的session</li></ol>',11),r=[c],h={__name:"SSO",setup(n,{expose:o}){return o({frontmatter:{}}),(a,d)=>(e(),l("div",t,r))}};export{h as default};
