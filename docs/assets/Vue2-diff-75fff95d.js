import{c as i,o as e,a as t}from"./index-0b9b347b.js";const o={class:"markdown-body"},d=t('<h2>Vue中vnode的diff过程</h2><p>Vue 虚拟dom的diff过程在<code>src/core/vdom</code>下面</p><h3>Vnode都包含什么？</h3><p>vnode就是虚拟dom节点，它会包含以下一些主要的内容：</p><ul><li>tag 标签名</li><li>children 子vnode列表</li><li>text 文本节点的文本</li><li>elm 对应的真实dom节点</li><li>context 表示所处当前组件的上下文</li><li>key vnode的唯一标识</li><li>componentInstance 组件实例对象</li><li>componentOptions 组件选项</li><li>parent 父vnode</li><li>data VNodeData，里面包含了节点的attr,props,domProps,ref,slots,on,directives,style,class等等</li><li>除此之外还包括isStatic,isOnce,asyncFactory,ssrContext等等信息</li></ul><p>每个VNode都有自己的生命周期钩子：create, activate, update, remove, destroy，在vnode新增，删除更新的时候都会调用外部注册的各种方法</p><h3>diff-patch的过程是怎样的？</h3><p>主要分两个阶段，先是对比新旧两个vnode；然后再依次对比各自的children，整个过程是递归调用：</p><h4>diff</h4><ul><li>新节点不存在，旧节点存在，则销毁旧节点</li><li>旧节点不存在，则创建新节点，有四种类型：component, element, comment, text，之后将它们插入到真实dom中</li><li>都存在 <ul><li>如果旧节点是实际的dom（SSR水合或者vnode是异步的）就更新elm返回，失败会置空旧节点（相当于后续新建）</li><li>如果新旧vnode相同 <ul><li>key相同并且tag相同或都是comment，都有VNodeData，如果是input那么type必须相同就直接patch vnode</li></ul></li><li>不同的话就创建新节点，然后插入到真实dom中，然后销毁旧节点</li></ul></li></ul><h4>patch</h4><ul><li>新旧节点引用相同那无需patch</li><li>如果都是静态节点并且key相同或者是v-once那么也无需patch，更新组件实例引用即可</li><li>更新节点的属性，包括事件，指令，也就是attrs,class,style,event listeners,directives,transition等</li><li>更新children <ul><li>如果子节点只是text，那就直接更新文本</li><li>如果新节点有children旧节点没有或者只是text，那么依次新建子节点并插入，反之就移除旧节点的children</li><li>采用首尾指针（新首，新尾，旧首，旧尾）依次patch子节点，首尾指针向中间靠 <ul><li>如果旧首为空，那么旧首向右移</li><li>如果旧尾为空，那么旧尾向左移</li><li>如果旧首新首相同，则执行patchVnode，之后新首旧首都向右移</li><li>如果旧尾新尾相同，则执行patchVnode，之后新尾旧尾都向左移</li><li>如果旧首新尾相同，执行patch，把更新的dom节点放到旧尾指针指向dom节点的后面，旧首指针右移，新尾指针左移</li><li>如果旧尾新首相同，执行patch，把更新的dom节点放到旧首指针指向的dom节点前面，旧尾指针左移，新首指针右移</li><li>四个指针都是不同节点，找新首是否存在于旧队列中（根据key去找） <ul><li>不存在，新首是新的节点，需要创建新节点并插入到旧首节点之前，新首指针右移</li><li>存在，执行patch，从旧队列中将旧vnode置空并将新的dom节点插入到旧首节点之前，新首指针右移</li></ul></li></ul></li><li>当新队列或者旧队列首尾指针相遇时 <ul><li>旧队列遍历完毕，剩余的新首到新尾这些节点都是需要新建的节点</li><li>新队列遍历完毕，旧首到旧尾的这些节点都需要被清除</li></ul></li></ul></li></ul><p>diff-patch的过程是参考了<a href="https://github.com/snabbdom/snabbdom"><code>Snabbdom</code></a>的实现。</p>',13),n=[d],m={__name:"Vue2-diff",setup(c,{expose:l}){return l({frontmatter:{}}),(s,p)=>(e(),i("div",o,n))}};export{m as default};
