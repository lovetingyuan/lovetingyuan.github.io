import{o as n,e as l,f as s,M as i}from"./vendor-B7iAV6MF.js";const p={class:"markdown-body"},o=s("blockquote",null,[s("p",null,[s("a",{href:"https://github.com/Tencent/secguide",target:"_blank",rel:"noopener"},"https://github.com/Tencent/secguide")])],-1),r=s("details",{markdown:"1"},[s("summary",null,"目录"),s("ul",null,[s("li",null,[s("p",null,[s("a",{href:"#1"},"1 JavaScript页面类")]),s("ul",null,[s("li",null,[s("a",{href:"#1.1"},"I. 代码实现"),s("ul",null,[s("li",null,[s("a",{href:"#1.1.1"},"1.1 原生DOM API的安全操作")]),s("li",null,[s("a",{href:"#1.1.2"},"1.2 流行框架/库的安全操作")]),s("li",null,[s("a",{href:"#1.1.3"},"1.3 页面重定向")]),s("li",null,[s("a",{href:"#1.1.4"},"1.4 JSON解析/动态执行")]),s("li",null,[s("a",{href:"#1.1.5"},"1.5 跨域通讯")])])]),s("li",null,[s("a",{href:"#1.2"},"II. 配置&环境"),s("ul",null,[s("li",null,[s("a",{href:"#1.2.1"},"2.1 敏感/配置信息")]),s("li",null,[s("a",{href:"#1.2.2"},"2.2 第三方组件/资源")]),s("li",null,[s("a",{href:"#1.2.3"},"2.3 纵深安全防护")])])])])]),s("li",null,[s("p",null,[s("a",{href:"#2"},"2 Node.js后台类")]),s("ul",null,[s("li",null,[s("a",{href:"#2.1"},"I. 代码实现"),s("ul",null,[s("li",null,[s("a",{href:"#2.1.1"},"1.1 输入验证")]),s("li",null,[s("a",{href:"#2.1.2"},"1.2 执行命令")]),s("li",null,[s("a",{href:"#2.1.3"},"1.3 文件操作")]),s("li",null,[s("a",{href:"#2.1.4"},"1.4 网络请求")]),s("li",null,[s("a",{href:"#2.1.5"},"1.5 数据输出")]),s("li",null,[s("a",{href:"#2.1.6"},"1.6 响应输出")]),s("li",null,[s("a",{href:"#2.1.7"},"1.7 执行代码")]),s("li",null,[s("a",{href:"#2.1.8"},"1.8 Web跨域")]),s("li",null,[s("a",{href:"#2.1.9"},"1.9 SQL操作")]),s("li",null,[s("a",{href:"#2.1.10"},"1.10 NoSQL操作")]),s("li",null,[s("a",{href:"#2.1.11"},"1.11 服务器端渲染（SSR）")]),s("li",null,[s("a",{href:"#2.1.12"},"1.12 URL跳转")]),s("li",null,[s("a",{href:"#2.1.13"},"1.13 Cookie与登录态")])])]),s("li",null,[s("a",{href:"#2.2"},"II. 配置&环境"),s("ul",null,[s("li",null,[s("a",{href:"#2.2.1"},"2.1 敏感/配置信息")]),s("li",null,[s("a",{href:"#2.2.2"},"2.2 第三方组件/资源")]),s("li",null,[s("a",{href:"#2.2.3"},"2.3 纵深安全防护")])])])])])])],-1),e=i(`<p><a id="1"></a></p><h2>JavaScript页面类</h2><p><a id="1.1"></a></p><h3>I. 代码实现</h3><p><a id="1.1.1"></a></p><h4>1.1 原生DOM API的安全操作</h4><p><strong>1.1.1【必须】HTML标签操作，限定/过滤传入变量值</strong></p><ul><li>使用<code>innerHTML=</code>、<code>outerHTML=</code>、<code>document.write()</code>、<code>document.writeln()</code>时，如变量值外部可控，应对特殊字符（<code>&amp;, &lt;, &gt;, &quot;, &#39;</code>）做编码转义，或使用安全的DOM API替代，包括：<code>innerText=</code></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 假设 params 为用户输入， text 为 DOM 节点</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：将不可信内容带入HTML标签操作</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">text.innerHTML </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`Follow @\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: innerHTML操作前，对特殊字符编码转义</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> htmlEncode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">iStr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> iStr</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&amp;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;amp;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;gt;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;lt;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&quot;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;quot;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&#39;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { user } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> htmlEncode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(user)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">text.innerHTML </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`Follow @\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 使用安全的DOM API替代innerHTML</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">text.innerText </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`Follow @\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span></code></pre><p><strong>1.1.2【必须】HTML属性操作，限定/过滤传入变量值</strong></p><ul><li><p>使用<code>element.setAttribute(name, value);</code>时，如第一个参数值<code>name</code>外部可控，应用白名单限定允许操作的属性范围。</p></li><li><p>使用<code>element.setAttribute(name, value);</code>时，操作<code>a.href</code>、<code>ifame.src</code>、<code>form.action</code>、<code>embed.src</code>、<code>object.data</code>、<code>link.href</code>、<code>area.href</code>、<code>input.formaction</code>、<code>button.formaction</code>属性时，如第二个参数值<code>value</code>外部可控，应参考<em>JavaScript页面类规范1.3.1</em>部分，限定页面重定向或引入资源的目标地址。</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: setAttribute操作前，限定引入资源的目标地址</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> addExternalCss</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">e</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;link&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  t.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;href&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, e),</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    t.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;rel&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;stylesheet&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    t.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;type&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;text/css&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    document.head.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(t)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> validURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(https</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">:</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/\\/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w\\-.]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(qq</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">tencent)</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">com(</span><span style="color:#D73A49;--shiki-dark:#F97583;">$|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w][\\w/.\\-_%]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+$</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">][</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sUrl </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://evil.com/1.css&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">validURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl)) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  addExternalCss</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><a id="1.1.2"></a></p><h4>1.2 流行框架/库的安全操作</h4><p><strong>1.2.1【必须】限定/过滤传入jQuery不安全函数的变量值</strong></p><ul><li>使用<code>.html()</code>、<code>.append()</code>、<code>.prepend()</code>、<code>.wrap()</code>、<code>.replaceWith()</code>、<code>.wrapAll()</code>、<code>.wrapInner()</code>、<code>.after()</code>、<code>.before()</code>时，如变量值外部可控，应对特殊字符（<code>&amp;, &lt;, &gt;, &quot;, &#39;</code>）做编码转义。</li><li>引入<code>jQuery 1.x（等于或低于1.12）、jQuery2.x（等于或低于2.2）</code>，且使用<code>$()</code>时，应优先考虑替换为最新版本。如一定需要使用，应对传入参数值中的特殊字符（<code>&amp;, &lt;, &gt;, &quot;, &#39;</code>）做编码转义。</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：将不可信内容，带入jQuery不安全函数.after()操作</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> params</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">after</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(user)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: jQuery不安全函数.html()操作前，对特殊字符编码转义</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> htmlEncode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">iStr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> iStr</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&amp;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;amp;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;gt;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;lt;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&quot;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;quot;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  sStr </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&#39;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">g</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sStr</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// const user = params.user;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">user </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> htmlEncode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(user)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(user)</span></span></code></pre><ul><li><p>使用<code>.attr()</code>操作<code>a.href</code>、<code>ifame.src</code>、<code>form.action</code>、<code>embed.src</code>、<code>object.data</code>、<code>link.href</code>、<code>area.href</code>、<code>input.formaction</code>、<code>button.formaction</code>属性时，应参考<em>JavaScript页面类规范1.3.1</em>部分，限定重定向的资源目标地址。</p></li><li><p>使用<code>.attr(attributeName, value)</code>时，如第一个参数值<code>attributeName</code>外部可控，应用白名单限定允许操作的属性范围。</p></li><li><p>使用<code>$.getScript(url [, success ])</code>时，如第一个参数值<code>url</code>外部可控（如：从URL取值拼接，请求jsonp接口），应限定可控变量值的字符集范围为：<code>[a-zA-Z0-9_-]+</code>。</p></li></ul><p><strong>1.2.2【必须】限定/过滤传入Vue.js不安全函数的变量值</strong></p><ul><li>使用<code>v-html</code>时，不允许对用户提供的内容使用HTML插值。如业务需要，应先对不可信内容做富文本过滤。</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-html"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">// bad：直接渲染外部传入的不可信内容</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> v-html</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;userProvidedHtml&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">// good：使用富文本过滤库处理不可信内容后渲染</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 使用 --&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> v-xss-html</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;{&#39;mode&#39;: &#39;whitelist&#39;, dirty: html, options: options}&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">script</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    el: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      options: {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        whiteList: {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          a: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;href&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          div: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          span: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;class&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          img: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;alt&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">script</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><ul><li><p>使用<code>v-bind</code>操作<code>a.href</code>、<code>ifame.src</code>、<code>form.action</code>、<code>embed.src</code>、<code>object.data</code>、<code>link.href</code>、<code>area.href</code>、<code>input.formaction</code>、<code>button.formaction</code>时，应确保后端已参考<em>JavaScript页面类规范1.3.1</em>部分，限定了供前端调用的重定向目标地址。</p></li><li><p>使用<code>v-bind</code>操作<code>style</code>属性时，应只允许外部控制特定、可控的CSS属性值</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-html"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">// bad：v-bind允许外部可控值，自定义CSS属性及数值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">a</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> v-bind:href</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;sanitizedUrl&quot;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> v-bind:style</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;userProvidedStyles&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt; click me &lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">// good：v-bind只允许外部提供特性、可控的CSS属性值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">a</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  v-bind:href</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;sanitizedUrl&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  v-bind:style</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;{</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">color: userProvidedColor,</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">background: userProvidedBackground</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  click me</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><p><a id="1.1.3"></a></p><h4>1.3 页面重定向</h4><p><strong>1.3.1【必须】限定跳转目标地址</strong></p><ul><li><p>使用白名单，限定重定向地址的协议前缀（默认只允许HTTP、HTTPS）、域名（默认只允许公司根域），或指定为固定值；</p></li><li><p>适用场景包括，使用函数方法：<code>location.href</code>、<code>window.open()</code>、<code>location.assign()</code>、<code>location.replace()</code>；赋值或更新HTML属性：<code>a.href</code>、<code>ifame.src</code>、<code>form.action</code>、<code>embed.src</code>、<code>object.data</code>、<code>link.href</code>、<code>area.href</code>、<code>input.formaction</code>、<code>button.formaction</code>；</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 跳转至外部可控的不可信地址</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sTargetUrl</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getURLParam</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sTargetUrl)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 白名单限定重定向地址</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> validURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(https</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">:</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/\\/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w\\-.]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(qq</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">tencent)</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">com(</span><span style="color:#D73A49;--shiki-dark:#F97583;">$|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w][\\w/.\\-_%]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+$</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">][</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sTargetUrl</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getURLParam</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">validURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sTargetUrl)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  location.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sTargetUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 制定重定向地址为固定值</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sTargetUrl</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://www.qq.com&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">location.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sTargetUrl)</span></span></code></pre><p><a id="1.1.4"></a></p><h4>1.4 JSON解析/动态执行</h4><p><strong>1.4.1【必须】使用安全的JSON解析方式</strong></p><ul><li>应使用<code>JSON.parse()</code>解析JSON字符串。低版本浏览器，应使用安全的<a href="https://github.com/douglascrockford/JSON-js/blob/master/json2.js" target="_blank" rel="noopener">Polyfill封装</a></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 直接调用eval解析json</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sUserInput</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getURLParam</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;json_val&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> jsonstr1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`{&quot;name&quot;:&quot;a&quot;,&quot;company&quot;:&quot;b&quot;,&quot;value&quot;:&quot;\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">sUserInput</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}&quot;}\`</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> json1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> eval</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`(\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">jsonstr1</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 使用JSON.parse解析</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sUserInput</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getURLParam</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;json_val&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUserInput, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">v</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> v</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 低版本浏览器，使用安全的Polyfill封装（基于eval）</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">script src</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/douglascrockford/JSON-js/blob/master/json2.js&quot;</span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;&lt;/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sUserInput</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getURLParam</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;json_val&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUserInput)</span></span></code></pre><p><a id="1.1.5"></a></p><h4>1.5 跨域通讯</h4><p><strong>1.5.1【必须】使用安全的前端跨域通信方式</strong></p><ul><li>具有隔离登录态（如：p_skey）、涉及用户高敏感信息的业务（如：微信网页版、QQ空间、QQ邮箱、公众平台），禁止通过<code>document.domain</code>降域，实现前端跨域通讯，应使用postMessage替代。</li></ul><p><strong>1.5.2【必须】使用postMessage应限定Origin</strong></p><ul><li><p>在message事件监听回调中，应先使用<code>event.origin</code>校验来源，再执行具体操作。</p></li><li><p>校验来源时，应使用<code>===</code>判断，禁止使用<code>indexOf()</code></p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 使用indexOf校验Origin值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">e</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">~</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">e.origin.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;https://a.qq.com&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 使用postMessage时，限定Origin，且使用===判断</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">e</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (e.origin </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://a.qq.com&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><a id="1.2"></a></p><h3>II. 配置&amp;环境</h3><p><a id="1.2.1"></a></p><h4>2.1 敏感/配置信息</h4><p><strong>2.1.1【必须】禁止明文硬编码AK/SK</strong></p><ul><li>禁止前端页面的JS明文硬编码AK/SK类密钥，应封装成后台接口，AK/SK保存在后端配置中心或密钥管理系统</li></ul><p><a id="1.2.2"></a></p><h4>2.2 第三方组件/资源</h4><p><strong>2.2.1【必须】使用可信范围内的统计组件</strong></p><p><strong>2.2.2 【必须】禁止引入非可信来源的第三方JS</strong></p><p><a id="1.2.3"></a></p><h4>2.3 纵深安全防护</h4><p><strong>2.3.1【推荐】部署CSP，并启用严格模式</strong></p><p><a id="2"></a></p><h2>Node.js后台类</h2><p><a id="2.1"></a></p><h3>I. 代码实现</h3><p><a id="2.1.1"></a></p><h4>1.1 输入验证</h4><p><strong>1.1.1【必须】按类型进行数据校验</strong></p><ul><li>所有程序外部输入的参数值，应进行数据校验。校验内容包括但不限于：数据长度、数据范围、数据类型与格式。校验不通过，应拒绝。</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：未进行输入验证</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">Router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/vulxss&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">txt</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    data: txt</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：按数据类型，进行输入验证</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Router</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">Router</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> validator</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;validator&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">Router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/email_with_validator&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> txt</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.txt </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (validator.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">isEmail</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(txt)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      data: txt</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ err: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>关联漏洞：纵深防护措施 - 安全性增强特性</em></p><p><a id="2.1.2"></a></p><h4>1.2 执行命令</h4><p><strong>1.2.1 【必须】使用child_process执行系统命令，应限定或校验命令和参数的内容</strong></p><ul><li><p>适用场景包括：<code>child_process.exec</code>, <code>child_process.execSync</code>, <code>child_process.spawn</code>, <code>child_process.spawnSync</code>, <code>child_process.execFile</code>, <code>child_process.execFileSync</code></p></li><li><p>调用上述函数，应首先考虑限定范围，供用户选择。</p></li><li><p>使用<code>child_process.exec</code>或<code>child_process.execSync</code>时，如果可枚举输入的参数内容或者格式，则应限定白名单。如果无法枚举命令或参数，则必须过滤或者转义指定符号，包括：<code>|;&amp;$()&gt;&lt;\`!</code></p></li><li><p>使用<code>child_process.spawn</code> 或<code>child_process.execFile</code>时，应校验传入的命令和参数在可控列表内。</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Router</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">Router</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> validator</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;validator&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;child_process&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：未限定或过滤，直接执行命令</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">Router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/vul_cmd_inject&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> txt</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.txt </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo 1&#39;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(txt, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">stdout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">stderr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ err: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ stdout, stderr })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：通过白名单，限定外部可执行命令范围</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">Router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/not_vul_cmd_inject&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> txt</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.txt </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo 1&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> phone</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.phone </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> cmdList</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    sendmsg: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;./sendmsg &#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (txt </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cmdList </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> validator.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">isMobilePhone</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(phone)) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cmdList[txt] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> phone, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">stdout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">stderr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ err: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ stdout, stderr })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      err: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      tips: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`you can use &#39;\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">Object</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">cmdList</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}&#39;\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：执行命令前，过滤/转义指定符号</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">Router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/not_vul_cmd_inject&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> txt</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.txt </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;echo 1&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> phone </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.phone </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> cmdList</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    sendmsg: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;./sendmsg &#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  phone </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> phone.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\|</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">;</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\$\\(</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\(</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\)</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&gt;</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">&lt;</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\`</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">!)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">gi</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (txt </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cmdList) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cmdList[txt] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> phone, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">stdout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">stderr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ err: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ stdout, stderr })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      err: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      tips: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`you can use &#39;\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">Object</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">cmdList</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}&#39;\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>关联漏洞：高风险 - 任意命令执行</em></p><p><a id="2.1.3"></a></p><h4>1.3 文件操作</h4><p><strong>1.3.1 【必须】限定文件操作的后缀范围</strong></p><ul><li>按业务需求，使用白名单限定后缀范围。</li></ul><p><strong>1.3.2 【必须】校验并限定文件路径范围</strong></p><ul><li>应固定上传、访问文件的路径。若需要拼接外部可控变量值，检查是否包含<code>..</code>、<code>.</code>路径穿越字符。如存在，应拒绝。</li><li>使用<code>fs</code>模块下的函数方法时，应对第一个参数即路径部分做校验，检查是否包含路径穿越字符<code>.</code>或<code>..</code>。涉及方法包括但不限于：<code>fs.truncate</code>、<code>fs.truncateSync</code>、<code>fs.chown</code>、<code>fs.chownSync</code>、<code>fs.lchown</code>、<code>fs.lchownSync</code>、<code>fs.stat</code>、<code>fs.lchmodSync</code>、<code>fs.lstat</code>、<code>fs.statSync</code>、<code>fs.lstatSync</code>、<code>fs.readlink</code>、<code>fs.unlink</code>、<code>fs.unlinkSync</code>、<code>fs.rmdir</code>、<code>fs.rmdirSync</code>、<code>fs.mkdir</code>、<code>fs.mkdirSync</code>、<code>fs.readdir</code>、<code>fs.readdirSync</code>、<code>fs.openSync</code>、<code>fs.open</code>、<code>fs.createReadStream</code>、<code>fs.createWriteStream</code></li><li>使用express框架的<code>sendFile</code>方法时，应对第一个参数即路径部分做校验，检查是否包含路径穿越字符<code>.</code>或<code>..</code></li><li>校验时，应使用<code>path</code>模块处理前的路径参数值，或判断处理过后的路径是否穿越出了当前工作目录。涉及方法包括但不限于：<code>path.resolve</code>、<code>path.join</code>、<code>path.normalize</code>等</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> filename </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query.ufile</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;/data/ufile&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：未检查文件名/路径</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> filename, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`异步读取: \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">()</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：使用path处理过后的路径参数值做校验，仍可能有路径穿越风险</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">filename </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root, filename)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (filename.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(filename, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：检查了文件名/路径，是否包含路径穿越字符</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (filename.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;..&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  filename </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root, filename)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(filename, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(data.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><strong>1.3.3 【必须】安全地处理上传文件名</strong></p><ul><li>将上传文件重命名为16位以上的随机字符串保存。</li><li>如需原样保留文件名，应检查是否包含<code>..</code>、<code>.</code>路径穿越字符。如存在，应拒绝。</li></ul><p><strong>1.3.4 【必须】敏感资源文件，应有加密、鉴权和水印等加固措施</strong></p><ul><li>用户上传的<code>身份证</code>、<code>银行卡</code>等图片，属敏感资源文件，应采取安全加固。</li><li>指向此类文件的URL，应保证不可预测性；同时，确保无接口会批量展示此类资源的URL。</li><li>访问敏感资源文件时，应进行权限控制。默认情况下，仅用户可查看、操作自身敏感资源文件。</li><li>图片类文件应添加业务水印，表明该图片仅可用于当前业务使用。</li></ul><p><a id="2.1.4"></a></p><h4>1.4 网络请求</h4><p><strong>1.4.1 【必须】限定访问网络资源地址范围</strong></p><ul><li><p>应固定程序访问网络资源地址的<code>协议</code>、<code>域名</code>、<code>路径</code>范围。</p></li><li><p>若业务需要，外部可指定访问网络资源地址，应禁止访问内网私有地址段及域名。</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-text"><span class="line"><span>// 以RFC定义的专有网络为例，如有自定义私有网段亦应加入禁止访问列表。</span></span>
<span class="line"><span>10.0.0.0/8</span></span>
<span class="line"><span>172.16.0.0/12</span></span>
<span class="line"><span>192.168.0.0/16</span></span>
<span class="line"><span>127.0.0.0/8</span></span></code></pre><p><strong>1.4.2 【推荐】请求网络资源，应加密传输</strong></p><ul><li>应优先选用https协议请求网络资源</li></ul><p><em>关联漏洞：高风险 - SSRF，高风险 - HTTP劫持</em></p><p><a id="2.1.5"></a></p><h4>1.5 数据输出</h4><p><strong>1.5.1 【必须】高敏感信息禁止存储、展示</strong></p><ul><li>口令、密保答案、生理标识等鉴权信息禁止展示</li><li>非金融类业务，信用卡cvv码及日志禁止存储</li></ul><p><strong>1.5.2【必须】一般敏感信息脱敏展示</strong></p><ul><li>身份证只显示第一位和最后一位字符，如：<code>3*********************1</code></li><li>移动电话号码隐藏中间6位字符，如：<code>134***************48</code></li><li>工作地址/家庭地址最多显示到<code>区</code>一级</li><li>银行卡号仅显示最后4位字符，如：<code>*********************8639</code></li></ul><p><strong>1.5.3 【推荐】返回的字段按业务需要输出</strong></p><ul><li>按需输出，避免不必要的用户信息泄露</li><li>用户敏感数据应在服务器后台处理后输出，不可以先输出到客户端，再通过客户端代码来处理展示</li></ul><p><em>关联漏洞：高风险 - 用户敏感信息泄露</em></p><p><a id="2.1.6"></a></p><h4>1.6 响应输出</h4><p><strong>1.6.1 【必须】设置正确的HTTP响应包类型</strong></p><ul><li>响应头Content-Type与实际响应内容，应保持一致。如：API响应数据类型是json，则响应头使用<code>application/json</code>；若为xml，则设置为<code>text/xml</code>。</li></ul><p><strong>1.6.2 【必须】添加安全响应头</strong></p><ul><li>所有接口、页面，添加响应头 <code>X-Content-Type-Options: nosniff</code>。</li><li>所有接口、页面，添加响应头<code>X-Frame-Options </code>。按需合理设置其允许范围，包括：<code>DENY</code>、<code>SAMEORIGIN</code>、<code>ALLOW-FROM origin</code>。用法参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options" target="_blank" rel="noopener">MDN文档</a></li><li>推荐使用组件： <a href="https://www.npmjs.com/package/helmet" target="_blank" rel="noopener">helmet</a></li></ul><p><strong>1.6.3 【必须】外部输入拼接到响应页面前，进行编码处理</strong></p><table><thead><tr><th>场景</th><th>编码规则</th></tr></thead><tbody><tr><td>输出点在HTML标签之间</td><td>需要对以下6个特殊字符进行HTML实体编码(&amp;, &lt;, &gt;, “, &#39;,/)。<br>示例：<br>&amp; --&gt; &amp;amp;<br>&lt; --&gt; &amp;lt;<br>&gt;–&gt; &amp;gt;<br>” --&gt; &amp;quot;<br>’ --&gt; &amp;#x27; <br>/ --&gt; &amp;#x2F;</td></tr><tr><td>输出点在HTML标签普通属性内（如href、src、style等，on事件除外）</td><td>要对数据进行HTML属性编码。<br>编码规则：除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为&amp;#xHH;(以&amp;#x开头，HH则是指该字符对应的十六进制数字，分号作为结束符)</td></tr><tr><td>输出点在JS内的数据中</td><td>需要进行js编码<br>编码规则：<br>除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\xHH （以 \\x 开头，HH则是指该字符对应的十六进制数字）<br>Tips：这种场景仅限于外部数据拼接在js里被引号括起来的变量值中。除此之外禁止直接将代码拼接在js代码中。</td></tr><tr><td>输出点在CSS中（Style属性）</td><td>需要进行CSS编码<br>编码规则：<br>除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \\HH （以 \\ 开头，HH则是指该字符对应的十六进制数字）</td></tr><tr><td>输出点在URL属性中</td><td>对这些数据进行URL编码<br>Tips：除此之外，所有链接类属性应该校验其协议。禁止JavaScript、data和Vb伪协议。</td></tr></tbody></table><p><strong>1.6.4 【必须】响应禁止展示物理资源、程序内部代码逻辑等敏感信息</strong></p><ul><li>业务生产（正式）环境，应用异常时，响应内容禁止展示敏感信息。包括但不限于：<code>物理路径</code>、<code>程序内部源代码</code>、<code>调试日志</code>、<code>内部账号名</code>、<code>内网ip地址</code>等。</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-text"><span class="line"><span>// bad</span></span>
<span class="line"><span>Access denied for user &#39;xxx&#39;@&#39;xx.xxx.xxx.162&#39; (using password: NO)&quot;</span></span></code></pre><p><strong>1.6.5 【推荐】添加安全纵深防御措施</strong></p><ul><li>部署CSP，规则中应引入最新的严格模式特性<code>nonce-</code></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：使用helmet组件安全地配置响应头</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> helmet</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;helmet&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">helmet</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：正确配置Content-Type、添加了安全响应头，引入了CSP</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">Router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Content-Type-Options&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;nosniff&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;X-Frame-Options&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;SAMEORIGIN&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Security-Policy&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;script-src &#39;self&#39;&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>关联漏洞：中风险 - XSS、中风险 - 跳转漏洞</em></p><p><a id="2.1.7"></a></p><h4>1.7 执行代码</h4><p><strong>1.7.1 【必须】安全的代码执行方式</strong></p><ul><li>禁止使用 <code>eval</code> 函数</li><li>禁止使用<code>new Function(&quot;input&quot;)()</code> 来创建函数</li><li>使用 <code>setInteval</code>，<code>setTimeout</code>，应校验传入的参数</li></ul><p><em>关联漏洞：高风险 - 代码执行漏洞</em></p><p><a id="2.1.8"></a></p><h4>1.8 Web跨域</h4><p><strong>1.8.1 【必须】限定JSONP接口的callback字符集范围</strong></p><ul><li>JSONP接口的callback函数名为固定白名单。如callback函数名可用户自定义，应限制函数名仅包含 字母、数字和下划线。如：<code>[a-zA-Z0-9_-]+</code></li></ul><p><strong>1.8.2 【必须】安全的CORS配置</strong></p><ul><li>使用CORS，应对请求头Origin值做严格过滤、校验。具体来说，可以使用“全等于”判断，或使用严格的正则进行判断。如：<code>^https://domain\\.qq\\.com$</code></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：使用全等于，校验请求的Origin</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (req.headers.origin </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://domain.qq.com&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, req.headers.origin)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Access-Control-Allow-Credentials&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><em>关联漏洞：中风险 - XSS，中风险 - CSRF，中风险 - CORS配置不当</em></p><p><a id="2.1.9"></a></p><h4>1.9 SQL操作</h4><p><strong>1.9.1 【必须】SQL语句默认使用预编译并绑定变量</strong></p><ul><li><p>应使用预编译绑定变量的形式编写sql语句，保持查询语句和数据相分离</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：拼接SQL语句查询，存在安全风险</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> connection</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> util.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">  &#39;SELECT * from some_table WHERE Id = %s and Name = %s&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  req.body.id,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  req.body.name</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sql, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // handle err..</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：使用预编译绑定变量构造SQL语句</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> connection</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">createConnection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(options)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;SELECT * from some_table WHERE Id = ? and Name = ?&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sqlParams</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [req.body.id, req.body.name]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sql, sqlParams, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // handle err..</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></li><li><p>对于表名、列名等无法进行预编译的场景，如：<code>__user_input__</code> 拼接到比如 <code>limit</code>, <code>order by</code>, <code>group by</code> , <code>from tablename</code>语句中。请使用以下方法：</p><p><em>方案1：使用白名单校验表名/列名</em></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> tableSuffix</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.body.type</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ([</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;expected1&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;expected2&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(tableSuffix) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 不在表名白名单中，拒绝请求</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`SELECT * from t_business_\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">tableSuffix</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sql, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // handle err..</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>方案2：使用反引号包裹表名/列名，并过滤 <code>__user_input__</code> 中的反引号</em></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { orderType } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.body</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 过滤掉__user_input__中的反引号</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">orderType </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> orderType.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;\`&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> util.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;SELECT * from t_business_feeds order by \`%s\`&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, orderType)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sql, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // handle err..</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>方案3：将 <code>__user_input__</code> 转换为整数</em></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { orderType } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.body</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 强制转换为整数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">orderType </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(orderType, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sql</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`SELECT * from t_business_feeds order by \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">orderType</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">connection.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sql, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // handle err..</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></li></ul><p><strong>1.9.2 【必须】安全的ORM操作</strong></p><ul><li><p>使用安全的ORM组件进行数据库操作。如 <code>sequelize</code> 等</p></li><li><p>禁止<code>__user_input__</code>以拼接的方式直接传入ORM的各类raw方法</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">//bad: adonisjs ORM</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">//参考：https://adonisjs.com/docs/3.2/security-introduction#_sql_injection</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> username</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> yield</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Database</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">table</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;users&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(Database.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">raw</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`username = \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">//good: adonisjs ORM</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> username</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> users</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> yield</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Database</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">table</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">where</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(Database.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">raw</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;username = ?&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, [username]));</span></span></code></pre><ul><li>使用ORM进行Update/Insert操作时，应限制操作字段范围</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">good</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">假设该api用于插入用户的基本信息，使用传入的req.body通过Sequelize的create方法实现</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">假设User包含字段：username,email,isAdmin，</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">其中,isAdmin将会用于是否系统管理员的鉴权，默认值为false</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// Sequelize: 只允许变更username、email字段值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">User.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(req.body, { fields: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;email&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] }).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">user</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // handle the rest..</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><blockquote><p><strong>为什么要这么做？</strong> 在上述案例中，若不限定fields值，攻击者将可传入<code>{&quot;username&quot;:&quot;boo&quot;,&quot;email&quot;:&quot;foo@boo.com&quot;,&quot;isAdmin&quot;:true}</code>将自己变为<code>Admin</code>，产生垂直越权漏洞。</p></blockquote><p><em>关联漏洞：高风险 - SQL注入，中风险 - Mass Assignment 逻辑漏洞</em></p><p><a id="2.1.10"></a></p><h4>1.10 NoSQL操作</h4><p><strong>1.10.1 【必须】校验参数值类型</strong></p><ul><li>将HTTP参数值代入NoSQL操作前，应校验类型。如非功能需要，禁止对象（Object）类型传入。</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：执行NOSQL操作前，未作任何判断</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  db.users.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ username: req.body.username, password: req.body.password }, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">users</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // **TODO:** handle the rest</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：在进入nosql前先判断\`__USER_INPUT__\`是否为字符串。</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (req.body.username </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.body.username </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;username must be a string&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (req.body.password </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.body.password </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;password must be a string&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  db.users.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ username: req.body.username, password: req.body.password }, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">users</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // **TODO:** handle the rest</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><blockquote><p><strong>为什么要这么做？</strong></p><p>JavaScript中，从http或socket接收的数据可能不是单纯的字符串，而是被黑客精心构造的对象(Object)。在本例中：</p><ul><li>期望接收的POST数据：<code>username=foo&amp;password=bar</code></li><li>期望的等价条件查询sql语句：<code>select * from users where username = &#39;foo&#39; and password = &#39;bar&#39;</code></li><li>黑客的精心构造的攻击POST数据：<code>username[$ne]=null&amp;password[$ne]=null</code>或JSON格式：<code>{&quot;username&quot;: {&quot;$ne&quot;: null},&quot;password&quot;: {&quot;$ne&quot;: null}}</code></li><li>黑客篡改后的等价条件查询sql语句：<code>select * from users where username != null &amp; password != null</code></li><li>黑客攻击结果：绕过正常逻辑，在不知道他人的username/password的情况登录他人账号。</li></ul></blockquote><p><strong>1.10.2 【必须】NoSQL操作前，应校验权限/角色</strong></p><ul><li>执行NoSQL增、删、改、查逻辑前，应校验权限</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 使用express、mongodb(mongoose)实现的删除文章demo</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad：在删除文章前未做权限校验</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/deleteArticle&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  db.articles.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">deleteOne</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ article_id: req.body.article_id }, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">users</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // TODO: handle the rest</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good：进入nosql语句前先进行权限校验</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/deleteArticle&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  checkPriviledge</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(ctx.uin, req.body.article_id)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  db.articles.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">deleteOne</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ article_id: req.body.article_id }, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">users</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // TODO: handle the rest</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>关联漏洞：高风险 - 越权操作，高风险 - NoSQL注入</em></p><p><a id="2.1.11"></a></p><h4>1.11 服务器端渲染（SSR）</h4><p><strong>1.11.1 【必须】安全的Vue服务器端渲染(Vue SSR)</strong></p><ul><li><p>禁止直接将不受信的外部内容传入<code>{{{ data }}}</code>表达式中</p></li><li><p>模板内容禁止被污染</p></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 将用户输入替换进模板</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  template: appTemplate.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;word&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, __USER_INPUT__)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">renderer.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">renderToString</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(app)</span></span></code></pre><ul><li>对已渲染的HTML文本内容（renderToString后的html内容）。如需再拼不受信的外部输入，应先进行安全过滤，具体请参考<strong>1.6.3</strong></li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 渲染后的html再拼接不受信的外部输入</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  renderer.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">renderToString</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(component, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">html</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> htmlOutput </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> html</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    htmlOutput </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">__USER_INPUT__</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(htmlOutput)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><strong>1.11.2 【必须】安全地使用EJS、LoDash、UnderScore进行服务器端渲染</strong></p><ul><li><p>使用render函数时，模板内容禁止被污染</p><p>lodash.Template:</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 将用户输入送进模板</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> compiled</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> _.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`&lt;b&gt;\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">__USER_INPUT__</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}&lt;%- value %&gt;&lt;/b&gt;\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">compiled</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ value: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><p>ejs:</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 将用户输入送进模板</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ejs</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;ejs&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> people</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;geddy&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;neil&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;alex&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> html</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ejs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`&lt;%= people.join(&quot;, &quot;); %&gt;\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">__USER_INPUT__</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, { people })</span></span></code></pre></li><li><p>Ejs、LoDash、UnderScore提供的HTML插值模板默认形似<code>&lt;%= data %&gt;</code>，尽管在默认情况下<code>&lt;%= data %&gt;</code>存在过滤，在编写HTML插值模板时需注意:</p><ol><li>用户输入流入html属性值时，必须使用双引号包裹：<code>&lt;base data-id = &quot;&lt;%= __USER_INPUT__ %&gt;&quot;&gt;</code></li><li>用户输入流入<code>&lt;script&gt;&lt;/script&gt;</code>标签或on*的html属性中时，如<code>&lt;script&gt;var id = &lt;%= __USER_INPUT__ %&gt;&lt;/script&gt;</code> ，须按照1.6.3中的做法或白名单方法进行过滤，框架/组件的过滤在此处不起作用</li></ol></li></ul><p><strong>1.11.3 【必须】在自行实现状态存储容器并将其JSON.Stringify序列化后注入到HTML时，必须进行安全过滤</strong></p><p><a id="2.1.12"></a></p><h4>1.12 URL跳转</h4><p><strong>1.12.1【必须】限定跳转目标地址</strong></p><ul><li>适用场景包括：</li></ul><ol><li>使用30x返回码并在Header中设置Location进行跳转</li><li>在返回页面中打印<code>&lt;script&gt;location.href=__Redirection_URL__&lt;/script&gt;</code></li></ol><ul><li>使用白名单，限定重定向地址的协议前缀（默认只允许HTTP、HTTPS）、域名（默认只允许公司根域），或指定为固定值；</li></ul><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 使用express实现的登录成功后的回调跳转页面</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// bad: 未校验页面重定向地址</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 若未登录用户访问其他页面，则让用户导向到该处理函数进行登录</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 使用参数loginCallbackUrl记录先前尝试访问的url，在登录成功后跳转回loginCallbackUrl:</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">loginCallbackUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (loginCallbackUrl) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(loginCallbackUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 白名单限定重定向地址</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isValidURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(https</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">:</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/\\/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w\\-.]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(qq</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">tencent)</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">com(</span><span style="color:#D73A49;--shiki-dark:#F97583;">$|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w][\\w/.\\-_%]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+$</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">][</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 若未登录用户访问其他页面，则让用户导向到该处理函数进行登录</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 使用参数loginCallbackUrl记录先前尝试访问的url，在登录成功后跳转回loginCallbackUrl:</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">loginCallbackUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (loginCallbackUrl </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isValidUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(loginCallbackUrl)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(loginCallbackUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// good: 白名单限定重定向地址，通过返回html实现</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isValidURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(https</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">:</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/\\/</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w\\-.]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">(qq</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">tencent)</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">com(</span><span style="color:#D73A49;--shiki-dark:#F97583;">$|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\/</span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[\\w][\\w/.\\-_%]</span><span style="color:#D73A49;--shiki-dark:#F97583;">+$</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF;">    /</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">[/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">][</span><span style="color:#D73A49;--shiki-dark:#F97583;">^</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">/</span><span style="color:#22863A;--shiki-dark:#85E89D;font-weight:bold;--shiki-dark-font-weight:bold;">\\\\</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="color:#D73A49;--shiki-dark:#F97583;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sUrl)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 若未登录用户访问其他页面，则让用户导向到该处理函数进行登录</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 使用参数loginCallbackUrl记录先前尝试访问的url，在登录成功后跳转回loginCallbackUrl:</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">loginCallbackUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> req.query</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (loginCallbackUrl </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isValidUrl</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(loginCallbackUrl)) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 使用encodeURI，过滤左右尖括号与双引号，防止逃逸出包裹的双引号</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> redirectHtml</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`&lt;script&gt;location.href = &quot;\${</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">encodeURI</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">loginCallbackUrl</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}&quot;;&lt;/script&gt;\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(redirectHtml)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><p><em>关联漏洞：中风险 - 任意URL跳转漏洞</em></p><p><a id="2.1.13"></a></p><h4>1.13 Cookie与登录态</h4><p><strong>1.13.1【推荐】为Cookies中存储的关键登录态信息添加http-only保护</strong></p><p><em>关联漏洞：纵深防护措施 - 安全性增强特性</em></p><p><a id="2.2"></a></p><h3>II. 配置&amp;环境</h3><p><a id="2.2.1"></a></p><h4>2.1 依赖库</h4><p><strong>2.1.1【必须】使用安全的依赖库</strong></p><ul><li>使用自动工具，检查依赖库是否存在后门/漏洞，保持最新版本</li></ul><p><a id="2.2.2"></a></p><h4>2.2 运行环境</h4><p><strong>2.2.1 【必须】使用非root用户运行Node.js</strong></p><p><a id="2.2.3"></a></p><h4>2.3 配置信息</h4><p><strong>2.3.1【必须】禁止硬编码认证凭证</strong></p><ul><li>禁止在源码中硬编码<code>AK/SK</code>、<code>数据库账密</code>、<code>私钥证书</code>等配置信息</li><li>应使用配置系统或KMS密钥管理系统。</li></ul><p><strong>2.3.2【必须】禁止硬编码IP配置</strong></p><ul><li>禁止在源码中硬编码<code>IP</code>信息 <blockquote><p><strong>为什么要这么做？</strong></p><p>硬编码IP可能会导致后续机器裁撤或变更时产生额外的工作量，影响系统的可靠性。</p></blockquote></li></ul><p><strong>2.3.3【必须】禁止硬编码员工敏感信息</strong></p><ul><li>禁止在源代码中含员工敏感信息，包括但不限于：<code>员工ID</code>、<code>手机号</code>、<code>微信/QQ号</code>等。</li></ul>`,185),k=[o,r,e],y={__name:"JavaScript安全编码的一些注意事项",setup(E,{expose:a}){return a({frontmatter:{}}),(t,d)=>(n(),l("div",p,k))}};export{y as default};
