import{o as t,f as i,N as e}from"./vendor-KON_WPKK.js";const o={class:"markdown-body"},s=e("<h3>JavaScript 执行上下文</h3><h2>执行上下文分为三种：</h2><ul><li>全局执行上下文（全局只有一份）</li><li>函数执行上下文（函数执行时创建）</li><li>动态执行上下文（eval, new Function, setTimeout(string)）</li></ul><p>执行栈（调用栈）就是对执行上下文进行栈操作，js中函数为一等公民，所以栈里主要就是函数执行上下文，调用方法入栈，方法返回则出栈</p><h2>创建过程</h2><p>函数在被调用时才会创建执行上下文，一个执行上下文包含以下几部分：</p><ul><li>This 绑定</li><li>词法环境（let，const 块级作用域） <ul><li>词法环境保存了变量标识符、接收的参数（包括argument）与其值的引用</li><li>词法环境包含两种类型：全局环境，函数环境</li></ul></li><li>变量环境（var） <ul><li>变量环境具有变量提升的效果，在 es6 之前，变量环境是唯一的环境（作用域）类型</li></ul></li><li>外部环境的引用（形成作用域链）</li></ul>",7),a=[s],p={__name:"执行上下文",setup(n,{expose:l}){return l({frontmatter:{}}),(c,u)=>(t(),i("div",o,a))}};export{p as default};
