import{o as n,f as l,N as p}from"./vendor-F3_pRict.js";const i={class:"markdown-body"},c={__name:"字符串哈希算法",setup(r,{expose:a}){return a({frontmatter:{}}),(k,s)=>(n(),l("div",i,s[0]||(s[0]=[p(`<h3>字符串哈希算法</h3><p>字符串哈希可以将一个很长的子串变成一个数字，这样在子串匹配时只需要对比其哈希值是否一致，大大提高了效率。</p><p>字符串哈希的原理其实可以类比于数字字符串转整数，此时我们是基于十进制的按位取幂相加取得最终的结果，那字符串哈希值也是类似的过程，下面举例说明：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">字符串哈希，类似于将数字字符串转为对应的数字（十进制）一样，我们将字符串也看成某个进制的数字（最好选取一个不太小的质数）</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">以abcde举例，选131作为进制基数，计算结果如下（其中的下划线特指指数运算）</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">[a]:     a,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">[ab]:    a*131 + b,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">[abc]:   a*131_2 + b*131 + c,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">[abcd]:  a*131_3 + b*131_2 + c*131 + d,</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">[abcde]: a*131_4 + b*131_3 + c*131_2 + d*131 + e,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">例如计算[cde]的哈希值，就是[abcde] - [ab] * 131_3 = c*131_2 + d*131 + e</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">哈希值可能会很大，此时需要对一个大质数进行mod操作（代码中用的是asUintN，用来限制数字位数）</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">理论上哈希值无法完全避免碰撞，如果要确保正确还需要在命中时进行朴素方法的检测</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> StringHash</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> base</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 131</span><span style="color:#D73A49;--shiki-dark:#F97583;">n</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.h </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> BigUint64Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.p </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> BigUint64Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.p[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;">n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.h[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.h[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> base </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.p[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.p[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> base</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 计算子串的哈希值, l和r是从0开始的起始和终止下标（包含）</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">l</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">r</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> BigInt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">asUintN</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.h[r </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.h[l] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.p[r </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre>`,4)])))}};export{c as default};
