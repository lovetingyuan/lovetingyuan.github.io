import{c as o,o as r,a as c}from"./index-8d4acd66.js";const d={class:"markdown-body"},a=c('<h2>前端监控</h2><p>浏览器端的监控主要有以下几个方面：</p><ul><li>性能监控 <ul><li>加载性能</li><li>渲染帧率</li></ul></li><li>错误监控 <ul><li>资源错误</li><li>JS运行错误</li></ul></li><li>埋点上报</li></ul><h3>性能监控</h3><h4>页面加载</h4><p>衡量页面加载的速度有很多指标，比如：</p><ul><li><p>FCP: First contentful paint</p></li><li><p>FMP: First meaningful paint</p></li><li><p><a href="https://web.dev/lcp/"><code>LCP</code></a>: <strong>Largest contentful paint</strong></p><p>表示当前处于viewport内最大（未拉伸且实际显示的大小）的图片（可能是背景图）或者video或者文本块渲染完成的时间；</p></li><li><p><a href="https://web.dev/fid/"><code>FID</code></a>: <strong>First input delay</strong></p><p>表示首次交互延迟时间，通常发生在<code>FCP</code>和<code>TTI</code>之间，此时用户点击了链接或者按钮或者进行了输入，页面却可能被主线程阻塞无反应；</p></li><li><p>TTI: Time to Interactive</p></li><li><p><a href="https://web.dev/cls/"><code>CLS</code></a>: <strong>Cumulative layout shift</strong></p><p>用来衡量页面稳定性，用户不希望在浏览页面时被突然加载上的图片或者iframe将内容弹开，应该尽量避免dom插入或移动，并给置换元素提前设定好大小</p></li></ul><p>我们可以通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance"><code>performance</code></a>API来计算出上面这些指标。performance API仍处于标准化的过程中，其中的属性和方法仍可能会变化。可以通过<code>performance.getEntries()</code>来获取当前可用的性能指标(<code>PerformanceEntry</code>)，每个指标都会包含<code>duration</code>,<code>entryType</code>,<code>name</code>,<code>startTime</code>这几个属性，其中<code>duration</code>就表示耗时。</p><p>这些指标包含有不同的类型：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigation_timing_API"><code>PerformanceNavigationTiming</code></a>，这个指标中包含了页面导航、加载的一些时间点，包括从页面请求发出到DNS查找到重定向到响应结束再到dom树构建等丰富的时间节点，这些属性也可以通过<code>performance.timing</code>来获取；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceMark"><code>PerformanceMark</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceMeasure"><code>PerformanceMeasure</code></a>，这个指标供用户自己进行时间打点，可以调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/mark"><code>performance.mark(name)</code></a>开始计时，调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/measure"><code>performance.measure(name)</code></a>结束计时，然后通过<code>performance.getEntriesByName(name)</code>就能拿到测量的结果；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceResourceTiming"><code>PerformanceResourceTiming</code></a>，这个指标用来衡量资源加载和API请求的情况，包括重定向，DNS查找，请求开始结束等等的时间；</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformancePaintTiming"><code>PerformancePaintTiming</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEventTiming"><code>PerformanceEventTiming</code></a>，这两个指标包含<code>FP</code>,<code>FCP</code>, <code>first-input</code>;</li><li>另外还有<code>PerformanceServerTiming</code>,<code>PerformanceLongTaskTiming</code>,<code>PerformanceElementTiming</code>,<code>PerformanceFrameTiming</code>等等。</li></ul><p>性能指标的衡量是个动态的过程，随着页面渲染和交互的不断进行，其中的一些指标是会不断变化的，可以用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceObserver"><code>PerformanceObserver</code></a>来进行监听，它可以监听例如<code>first-input</code>(可以用来计算FID), <code>largest-contentful-paint</code>, <code>layout-shift</code>(可以用来计算CLS), <code>navigation</code>, <code>mark</code>&amp;<code>measure</code>等指标的变化。</p><p>Nodejs同时也对performance API提供了支持，实现了<a href="https://nodejs.org/api/perf_hooks.html">perf_hooks</a>接口。</p><h4>渲染性能</h4><p>页面渲染问题，一般可以在开发阶段进行评估和发现。Long-task的JS，频繁的重绘回流，大量的dom节点，复杂的动画，过高的CPU内存占用等都会引起掉帧问题。Chrome浏览器的控制台提供了功能强大的performance面板，以及rendering工具（可以查看实时帧率和重绘回流），JavaScript profiler工具，performance monitor工具（CPU，内存，重绘回流，dom节点数等），coverage工具等工具集，可以帮助快速定位性能问题。考虑到可能的掉帧问题，可以利用<code>requestAnimationFrame</code>来计算渲染帧率，例如fpsmeter，然后针对有连续掉帧的场景进行上报。</p><hr><h3>错误监控</h3><h4>JS及资源加载错误</h4><ul><li><code>window.onerror</code>或<code>window.addEventListener(&#39;error&#39;, handler)</code><ul><li>用来捕获JS运行时错误（包括语法错误），回调参数包含错误信息，脚本url，行号，列号等； 有时候脚本是从不同的域加载的，这时是无法获取错误的详细信息的，解决办法是为script标签加上<code>crossorigin</code>属性并让服务器开启<code>CORS</code>；</li><li>资源加载错误不会冒泡，所以只能通过<code>window.addEventListener(&#39;error&#39;, handler, true)</code>在捕获阶段捕获；</li></ul></li></ul><h4>Promise错误</h4><ul><li><code>window.onunhandledrejection</code>或<code>window.addEventListener(&#39;unhandledrejection&#39;, handler)</code><ul><li>用来捕获没有reject或catch来处理的<code>Promise</code>错误，回调的错误对象包含该promise以及<code>reason</code></li><li>也可以捕获<code>async/await</code>中发生的错误，但对于<code>await</code>后面的promise一般都需要进行错误处理，避免执行中断</li></ul></li></ul><h4>接口错误</h4><ul><li>对于接口请求，通常会封装成一系列方法供业务调用，此时可以很方便的集中处理接口错误； 否则可以通过patch的方法来实现对API错误的追踪：<code>fetch</code>可以直接被overwrite，<code>XMLHttpRequest</code>可以patch原型上的<code>open</code>，<code>send</code>等方法，拿到<code>xhr</code>实例然后监听错误。</li></ul><hr><h3>数据埋点上报</h3><p>一般需要对用户数据以及用户行为进行上报，用户数据包括账户信息，设备信息等，用户行为包括访问路径，访问时长，页面交互等；</p><p>埋点方式一般有代码埋点（主动调用上报API，或者采用dataset或指令等声明式），可视化埋点（如记录控件xpath），无痕埋点（如通过事件委托全量记录用户操作）</p><p>上报方式一般采用1px图片Get请求，将数据放在query中；或者采用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon"><code>navigator.sendBeacon</code></a>，它是异步的post请求，可以保证页面卸载也能完成上报，并且不会与接口请求竞争，是理想的上报方式</p>',27),i=[a],m={__name:"前端性能监控",setup(t,{expose:e}){return e({frontmatter:{}}),(l,p)=>(r(),o("div",d,i))}};export{m as default};
