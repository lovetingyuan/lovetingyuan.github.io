import{o as a,c as n,J as l}from"./vendor-qbV36AJH.js";const p={class:"markdown-body"},i=l(`<p>主要是必须使用双指针链表，这个是关键</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * lru</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ListNode</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.key </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> key</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.next </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> capacity</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> LRUCache</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">capacity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.capacity </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> capacity</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.head </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ListNode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.tail </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ListNode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.head.next </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.tail</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.tail.prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.head</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">LRUCache</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">_insertToHead</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> realHead</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.head.next</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.head.next </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  node.prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.head</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  node.next </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> realHead</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  realHead.prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> key</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">LRUCache</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache[key]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prev</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    prev.next </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    next.prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">_insertToHead</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.value</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> key</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">LRUCache</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache[key].value </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ListNode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key, value)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache[key] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">_insertToHead</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.count </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.capacity) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.count </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prev</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.tail.prev</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      prev.next </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.tail</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.tail.prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      delete</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cache[key]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Your LRUCache object will be instantiated and called as such:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var obj = new LRUCache(capacity)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var param_1 = obj.get(key)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * obj.put(key,value)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre>`,2),o=[i],t={__name:"LRU缓存",setup(r,{expose:s}){return s({frontmatter:{}}),(e,E)=>(a(),n("div",p,o))}};export{t as default};
