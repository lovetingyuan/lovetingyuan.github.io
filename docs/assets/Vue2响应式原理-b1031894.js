import{o as d,c,p as o}from"./index-2fe6d712.js";const t={class:"markdown-body"},l=o('<h3>Vue 的响应式原理</h3><p>Vue 的响应式实现在<code>src/core/observer</code>下面</p><p>响应式的建立依靠的是<code>Observer</code>, <code>Dep</code>, <code>Watcher</code>以及订阅发布模式，其中<code>Observer</code>通过<code>getter/setter</code>实现了数据的拦截， <code>Dep</code>作为 publisher，<code>Watcher</code>作为 subscriber</p><p>Vue 的每个响应式对象包括数组都有<code>__ob__</code>的属性，这就是<code>Observer</code></p><h3>Observer</h3><p><code>Observer</code>实际上就是对对象和数组进行响应式代理</p><ul><li>对于对象就对每个属性调用<code>defineReactive</code>执行实际的 getter/setter 劫持</li><li>对于数组，Vue 会更改数组的<code>__proto__</code>指向以实现对方法的覆盖，并依次代理数组项中的对象和数组</li><li>生成的<code>Observer</code>对象会被挂载到响应式对象的<code>__ob__</code>属性上</li><li>每个<code>Observer</code>对象都会有一个<code>Dep</code>对象，用来保存依赖于自己的一系列<code>Watcher</code></li></ul><h3>Dep</h3><p><code>Dep</code>就是发布变化的对象，它有一个 id 标识并且维护一个<code>Watcher</code>列表<code>subs</code></p><ul><li>可以添加或者删除某个<code>Watcher</code></li><li>可以通知所有的<code>Watcher</code>执行自己对应的<code>update</code>方法</li></ul><h3>defineReactive</h3><p><code>defineReactive</code>每次调用都会生成一个<code>Dep</code>对象，表示当前属性可能作为的依赖</p><ul><li>当 getter 被劫持后，每当取数据的时候，<code>Dep</code>对象就会从某个地方(<code>Dep.target</code>)把数据索取方(<code>Watcher</code>)加入到自己的<code>subs</code>列表中</li><li>如果当前的属性也是个对象，那么会 observe 这个对象，生成<code>ChildOb</code>，同时也会将当前的<code>Watcher</code>加入到<code>ChildOb</code>的<code>subs</code>中</li><li>劫持 setter 后，当新的值过来时，执行<code>Dep</code>对象的 notify，通知<code>Watcher</code>更新，调用<code>update</code>方法</li><li>如果 set 的值是对象或者数组会对它执行 observe 操作，生成新的<code>ChildOb</code>并更新闭包中旧的<code>ChildOb</code></li><li>上面提到的<code>Dep</code>和<code>ChildOb</code>都是处于 getter/setter 相对于 defineReactive 的闭包里的</li></ul><h3>Watcher</h3><p><code>Watcher</code>是数据的订阅方，来源有三个地方：render, computed, watch($watch)，相应的 watcher 也就分成三种，<code>Watcher</code>对象包含以下主要的内容：</p><ul><li>vm 组件实例对象</li><li>expression 获取数据的方法，如 computed 的回调，watch 的表达式或者方法，更新视图的方法</li><li>cb 变化时的回调方法，对于 watch 来讲它是有回调的</li><li>deps,depIds,newDeps,newDepIds 订阅的<code>Dep</code>列表，因为依赖会根据计算更新，所以每次都要更新新的依赖列表，id 用来避免自己被重复加到<code>Dep</code>中去</li><li>deep, lazy, sync, dirty, active</li><li>getter 获取数据的方法，就是上面的 expression</li><li>value 当前的值，用于 watch 方法</li></ul><p><code>Watcher</code>会提供<code>update</code>方法，也就是当数据变化时会被调用，有三种情况：</p><ul><li>对于 computed-watcher 来讲，是被动触发的过程，当访问到 computed 属性才会计算，那当 computed 依赖的属性发生了变化，computed-watcher 会在 computed-getter 那里标记数据已经变脏，这样 computed 就会重新计算而不会使用缓存值了</li><li>对于 render-watcher 来讲，渲染是异步的，这时<code>Watcher</code>会被加入到全局的待执行的 watcher 列表中，等待渲染调度<code>nextTick</code>执行，执行的时候会调用<code>getter</code>方法也就更新了组件的视图</li><li>对于同步的 watcher 来讲会直接调用<code>getter</code>获取新的 value，在调用 getter 期间，当前的<code>Watcher</code>会被推入一个全局的栈内，并且更新到<code>Dep.target</code>，执行的期间会触发数据的 getter 劫持，<code>Dep</code>就会得到订阅。执行完之后出栈并更新新的<code>deps</code>列表</li></ul><p><img src="https://cn.vuejs.org/images/data.png" alt="alt"></p><ul><li><p>Dep</p><ul><li><code>Dep.target</code></li><li><code>id</code></li><li><code>subs</code> watchers 列表</li><li><code>depend</code> <code>Dep.target.addDep(this)</code> 将自身(dep) 加入到 <code>Dep.target</code>的 deps 中，并且 watcher 也会加入到 dep 的 subs 中</li><li><code>notify()</code> 调用 watchers 的<code>update</code>方法</li></ul></li><li><p>Observer</p><ul><li><code>value</code></li><li><code>dep</code></li><li>如果值是数组，那么覆写原型方法，然后对每个值递归 <code>new Observer(value)</code></li><li>如果是对象，对每个 value 都调用 <code>defineReactive</code>，每个对象或数组都会挂载上<code>__ob__</code>属性 <ul><li>创建 <code>dep</code> 对象，存在在闭包中</li><li><code>getter</code> 时调用 <code>dep.depend()</code> 将 dep 加入 <code>Dep.target</code> 的 deps 中（包括子对象的 observer 的 dep）</li><li><code>setter</code> 对 set 的值进行 observe，调用 dep 的<code>notify()</code></li><li>对于子对象会递归调用 <code>new Observer(value)</code></li></ul></li></ul></li><li><p>Watcher</p><ul><li><code>vm</code></li><li><code>deps</code>, <code>newDeps</code></li><li><code>cb</code></li><li><code>value</code></li><li><code>addDep</code> 把 dep 加入到 deps（同时也会把自身加入到 dep 的 subs 中）</li><li><code>update</code><ul><li>如果是 lazy，则标记为 dirty</li><li>否则将当前 watcher 推入到任务队列</li></ul></li><li><code>run</code> 调用 <code>get</code> 得到新的值，调用 <code>cb</code> 回调</li><li><code>get</code>，将自身写入<code>Dep.target</code>，如果是对象，会把这个对象的所有属性都读一遍，<br> 之后撤销写入<code>Dep.target</code>，类似于回溯，然后会把重新收集到的依赖 <code>newDeps</code> 覆写到 <code>deps</code></li><li><code>depend</code> 调用所有 deps 的 depend 方法</li></ul></li></ul>',20),i=[l],h={__name:"Vue2响应式原理",setup(r,{expose:e}){return e({frontmatter:{}}),(a,s)=>(d(),c("div",t,i))}};export{h as default};
