import{o as a,f as n,P as l}from"./vendor-BH-iNz4O.js";const p={class:"markdown-body"},i=l(`<h2>发布订阅模式和观察者模式</h2><p>这两种都是比较常用的编程模式，它们的含义很相近但实现起来又有不同。 <img src="https://s1.ax1x.com/2020/08/07/afuYod.jpg" alt="alt"></p><h3>观察者模式</h3><p>观察者模式包含 <strong>被观察者(Subject)</strong> 和 <strong>观察者(Observers)</strong>，它们是一对多的关系，即 Observer 有很多个，Subject 只有一个。</p><p>其中，Observer 是依赖于 Subject 的，意味着当 Subject 有变化的时候，它会通知到每一位 Observer。</p><p>依赖的实现需要 Observer 主动联系 Subject，而通知则是 Subject 变化时主动去遍历 Observer。</p><p>可以看到二者是需要紧密联系的，它们知道彼此的存在并直接通信。比如 Vue 中的 watch 功能就是观察者模式的体现。</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Subject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.observers </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  addObserver</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">observer</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.observers.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(observer)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  removeObserver</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">observer</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.observers.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(observer)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.observers.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(index, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  notify</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.observers.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">observer</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> observer.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Observer</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  update</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Received data:&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><h3>订阅-发布模式</h3><p>订阅发布模式通常被视为观察者模式抽象思想上的一种实现，这种模式同样存在甲方乙方，这里称它们为 <strong>订阅者(Subscriber)</strong> 和 <strong>发布者(Publisher)</strong>。</p><p>除此之外还存在着一个第三方的角色，可以称它为消息中心，或者事件调度中心或者简称为<strong>中介</strong>。</p><p>所以二者最主要的区别出现了，订阅发布模式中，Subscriber 和 Publisher 不是直接通信的，而是借助于中介来联系，从而实现了松耦合的设计。</p><p>Subscriber 在订阅事件的时候，只关注事件本身，而不关心谁会发布这个事件；Publisher 在发布事件的时候，只关注事件本身，而不关心谁订阅了这个事件。</p><p>在实现中，中介通常会维护一个事件队列，每一种事件都有对应的订阅者，并向外提供订阅(on)和发布(emit)的接口。Node 中 EventEmitter，Vue 中的 EventBus 等都是订阅发布模式的体现。</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  subscribe</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">event</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event]) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(callback)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  unsubscribe</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">event</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(callback)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(index, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  publish</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">event</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.subscribers[event].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre>`,15),r=[i],t={__name:"发布订阅和观察者模式",setup(o,{expose:s}){return s({frontmatter:{}}),(k,E)=>(a(),n("div",p,r))}};export{t as default};
