import{c as i,o as e,a}from"./index-14848697.js";const l={class:"markdown-body"},o=a("<p>浏览器中图层一般包含两大类：渲染图层（普通图层）以及复合图层</p><ul><li>渲染图层，是页面普通的文档流。我们虽然可以通过绝对定位，相对定位，浮动定位脱离文档流，但它仍然属于默认复合层(根层叠上下文)，共用同一个绘图上下文对象（GraphicsContext）。</li><li>复合图层，又称图形层。它会单独分配系统资源，每个复合图层都有一个独立的 GraphicsContext。（当然也会脱离普通文档流，这样一来，不管这个复合图层中怎么变化，也不会影响默认复合层里的回流重绘）</li></ul><p>某些特殊的渲染层会被提升为复合成层（Compositing Layers），复合图层拥有单独的 GraphicsLayer，而其他不是复合图层的渲染层，则跟随第一个拥有 GraphicsLayer 的父层。</p><ul><li>3D 转换：translate3d，translateZ 依此类推；</li><li><code>&lt;video&gt;</code>，<code>&lt;canvas&gt;</code>和<code>&lt;iframe&gt;</code>元件;</li><li>transform 和 opacity 经由 Element.animate();</li><li>transform 和 opacity 经由 СSS 过渡和动画;</li><li>有合成层后代同时本身 fixed 定位</li><li>will-change;</li><li>拥有加速 CSS 过滤器的元素 filter;</li><li>元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)</li><li>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</li></ul><p>每个 GraphicsLayer 都有一个 GraphicsContext，GraphicsContext 会负责输出该层的位图，位图是存储在共享内存中，作为纹理上传到 GPU 中，最后由 GPU 将多个位图进行合成，然后显示到屏幕上。</p>",5),r=[o],m={__name:"图层",setup(c,{expose:t}){return t({frontmatter:{}}),(n,p)=>(e(),i("div",l,r))}};export{m as default};
