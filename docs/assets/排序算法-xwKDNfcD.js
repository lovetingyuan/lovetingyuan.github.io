import{o as n,c as a,J as l}from"./vendor-8cLrSdCZ.js";const p={class:"markdown-body"},o=l(`<h2>快排，堆排，归并排序</h2><blockquote><p>关于算法的 js 实现可以参考<a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md" target="_blank" rel="noopener">javascript-algorithms</a>，这里面有相当丰富的基于 JavaScript 的数据结构和算法实现。</p></blockquote><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最坏时间复杂度</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O（n2）</td><td>O（n2）</td><td>O（1）</td><td>是</td></tr><tr><td>选择排序</td><td>O（n2）</td><td>O（n2）</td><td>O（1）</td><td>不是</td></tr><tr><td>直接插入排序</td><td>O（n2）</td><td>O（n2）</td><td>O（1）</td><td>是</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O（n）</td><td>是</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O（n2）</td><td>O（logn）</td><td>不是</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O（1）</td><td>不是</td></tr><tr><td>希尔排序</td><td>O(nlogn)</td><td>O（ns）</td><td>O（1）</td><td>不是</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>是</td></tr><tr><td>基数排序</td><td>O(N∗M)</td><td>O(N∗M)</td><td>O(M)</td><td>是</td></tr></tbody></table><p>快排，堆排，归并排序是众多排序算法里时间复杂度和空间复杂度比较好的三种，它们的时间复杂度都是 O(nlogn)。</p><p>其中归并排序的空间复杂度对数组来讲是 On，可以通过“手摇算法”降为 O（1），但会增加运行时间；对链表则是 Ologn，可以通过递归改循环降低为 O（1）。</p><p>快排和归并排序都是分治算法的典型应用，堆排序是优先队列的一种应用。</p><p>其中快排的实际性能表现通常是最好的，但如果原本数据就比较有序那么快排的时间复杂度会退化，这种情况可以采用随机化选取标定值的方法规避。</p><p>下面是用 JS 实现的三种排序算法代码：</p><ul><li>快速排序</li></ul><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A9955;">// 这是个递归的过程，每次我们选一个元素作为标定值</span></span>
<span class="line"><span style="color:#6A9955;">// 然后一次遍历使得所有小于标定值的元素都位于它的左边，大于它的值位于它的右边</span></span>
<span class="line"><span style="color:#6A9955;">// 上面这个过程是快排的核心，通常有三种方式可以实现：首尾指针、前后指针、挖坑法</span></span>
<span class="line"><span style="color:#6A9955;">// 然后递归左右两个子数组进行上面的过程，这里采用了原地算法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 首尾指针法</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">quickSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">array</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">target</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// 选第一个值作为标定值，也可以选最后的值</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">endIndex</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// right指针找到第一个小于标定值的值，left指针找到第一个大于标定值的值然后交换</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">] &gt; </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">] &lt; </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      ;[</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">]] = [</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// 注意这里一定要先判断右边的指针，因为选了最左边的作为标定值</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">] &gt;= </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> ? </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">-- : </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">++</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  ;[</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">]] = [</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">quickSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">quickSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">array</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 前后指针法</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">quickSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">array</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">target</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// 选最后边的值作为标定值，也可以选第一个</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;">// j表示等待交换的位置</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] &lt;= </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// 如果遇到比标定值小或等于的值就与j处的元素交换并且j + 1</span></span>
<span class="line"><span style="color:#D4D4D4;">      ;[</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">]] = [</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">quickSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">startIndex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">quickSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">endIndex</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">array</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><ul><li>堆排序</li></ul><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A9955;">// 首先要将数组构造成大/小根堆，根节点为最大值或最小值的二叉树结构</span></span>
<span class="line"><span style="color:#6A9955;">// 然后依次取根节点和末尾节点交换，交换之后需要保持当前的数组依旧是堆</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxheapsort</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// maxheapit 用来使以某个节点为根节点的子树成为大根堆</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">maxheapit</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">parentindex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">leftindex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">parentindex</span><span style="color:#D4D4D4;"> * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">rightindex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">leftindex</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 比较父节点，左右子节点这三个，选最大的那个作为新的父节点</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 如果是子节点做了父节点，那么就要继续维护那个子节点成为堆</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">leftindex</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">leftindex</span><span style="color:#D4D4D4;">] &gt; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">parentindex</span><span style="color:#D4D4D4;">] ? </span><span style="color:#9CDCFE;">leftindex</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">parentindex</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">rightindex</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">rightindex</span><span style="color:#D4D4D4;">] &gt; </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;">] ? </span><span style="color:#9CDCFE;">rightindex</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">maxindex</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">parentindex</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      ;[</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">parentindex</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;">]] = [</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">parentindex</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">maxheapit</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">maxindex</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 自底向上构造大根堆，就从最后的父节点开始向前遍历</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">floor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> / </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">--) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">maxheapit</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 依次交换根节点到首位，然后维护大根堆性质</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">--) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    ;[</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]] = [</span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">maxheapit</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, --</span><span style="color:#9CDCFE;">heapsize</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">list</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><ul><li>归并排序</li></ul><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A9955;">// 同样是递归的过程，把数组分成左右两列分别归并排序</span></span>
<span class="line"><span style="color:#6A9955;">// 然后合并左右两个有序数组为新的数组并返回</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">mergeSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">array</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">middle</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">floor</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;">) / </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) + </span><span style="color:#9CDCFE;">start</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mergeSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">start</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">middle</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">right</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mergeSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">middle</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">end</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">merged</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] &gt; </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">] ? </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++] : </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++])</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> ? </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++] : </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++])</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">merged</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><p>由于递归在运行中有其自身的切换、调用以及栈空间开销，所以我们还可以用非递归的形式实现上面的归并排序算法（前提是算法本身能比较容易的将递归改为循环迭代并且不会对代码可读性产生太大的影响）</p><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A9955;">// 循环的形式实现归并排序，此时我们需要按照“自底向上”的方向求解问题</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">mergeSort</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">length</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;"> = [] </span><span style="color:#6A9955;">// len维护每次的合并区间长度</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">] = [</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">          </span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++] = </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">] &lt; </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">] ? </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">++] : </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">++]</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">          </span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++] = </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> ? </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">++] : </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">++]</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    ;[</span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;">] = [</span><span style="color:#9CDCFE;">merged</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">array</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// 这里只使用了一个On的额外数组</span></span>
<span class="line"><span style="color:#D4D4D4;">    ;(</span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">), (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">array</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre>`,16),D=[o],C={__name:"排序算法",setup(t,{expose:s}){return s({frontmatter:{}}),(r,c)=>(n(),a("div",p,D))}};export{C as default};
