import{o as t,e as r,M as o}from"./vendor-B7iAV6MF.js";const a={class:"markdown-body"},s=o('<h3>二分查找</h3><p>最显而易见的情况就是在有序数组中查找目标值</p><p>其中最简单的一类问题就是在无重复元素的数组中查找目标值并且目标值一定存在，例如<a href="https://leetcode.cn/problems/binary-search/description/" target="_blank" rel="noopener">二分查找</a></p><p>但是如果增加一些限制，比如有重复元素，目标值不一定存在而是寻找上界或者下界，此时虽然还是二分查找的框架，但是一些细节的条件判断上是有不同的</p><p>有的题目并不会直接给出有序的序列，需要你自己排序或者去寻找跟解集相关的单调性，例如如果某个问题的解具有一定的范围并且具备二分性并且每个解都比较容易验证，那么就可以考虑使用二分法进行查找，例如 <a href="https://leetcode.cn/problems/longest-duplicate-substring/" target="_blank" rel="noopener">最长重复子串</a>，<a href="https://leetcode.cn/problems/split-array-largest-sum/" target="_blank" rel="noopener">分割数组的最大值</a>，<a href="https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener">在D天内送达包裹的能力</a>，<a href="https://leetcode.cn/problems/split-array-largest-sum/" target="_blank" rel="noopener">分割数组的最大值</a></p><p><strong>值得注意的一点是，必须保证每次二分，left或者right有变化</strong>，也就是说如果你的二分中出现了 <code>left = mid</code> 或者<code>right = mid</code>，此时必须考虑死循环的情况！</p>',6),n=[s],h={__name:"二分查找",setup(p,{expose:e}){return e({frontmatter:{}}),(l,d)=>(t(),r("div",a,n))}};export{h as default};
