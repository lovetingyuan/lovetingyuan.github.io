import{o,f as e,P as i}from"./vendor-CYDcDHDY.js";const s={class:"markdown-body"},t=i("<h3>nodejs的事件循环</h3><p>Node.js 的事件循环是其异步非阻塞 I/O 模型的核心。它允许 Node.js 在单线程上执行 I/O 密集型操作，而不会阻塞线程。这是通过事件循环机制实现的。以下是 Node.js 事件循环的基本工作原理：</p><h3>事件循环的阶段</h3><p>事件循环可以分为以下几个阶段，每个阶段都有特定类型的回调要执行：</p><ol><li><strong>timers</strong> 阶段</li><li><strong>I/O callbacks</strong> 阶段</li><li><strong>idle, prepare</strong> 阶段</li><li><strong>poll</strong> 阶段</li><li><strong>check</strong> 阶段</li><li><strong>close callbacks</strong> 阶段</li></ol><h3>详细说明</h3><ol><li><p><strong>timers 阶段</strong>:</p><ul><li>执行 <code>setTimeout</code> 和 <code>setInterval</code> 设定的回调。</li></ul></li><li><p><strong>I/O callbacks 阶段</strong>:</p><ul><li>执行一些系统操作的回调，如 TCP 错误类型的回调。</li></ul></li><li><p><strong>idle, prepare 阶段</strong>:</p><ul><li>仅限内部使用，可以忽略。</li></ul></li><li><p><strong>poll 阶段</strong>:</p><ul><li>获取新的 I/O 事件；执行与 I/O 相关的回调（几乎所有的回调都会在这个阶段执行，除了 <code>close</code>、<code>timers</code> 和 <code>setImmediate</code> 回调）。</li></ul></li><li><p><strong>check 阶段</strong>:</p><ul><li>执行 <code>setImmediate</code> 设定的回调。</li></ul></li><li><p><strong>close callbacks 阶段</strong>:</p><ul><li>执行 <code>close</code> 事件回调，例如 <code>socket.on(&#39;close&#39;, ...)</code>。</li></ul></li></ol><h3>事件循环的执行流程</h3><ol><li><p><strong>进入事件循环</strong>:</p><ul><li>当 Node.js 启动后，初始化事件循环，进入循环。</li></ul></li><li><p><strong>timers 阶段</strong>:</p><ul><li>执行任何已准备好的 <code>setTimeout</code> 和 <code>setInterval</code> 回调。</li><li>然后进入下一个阶段。</li></ul></li><li><p><strong>I/O callbacks 阶段</strong>:</p><ul><li>执行系统级别的 I/O 回调。</li></ul></li><li><p><strong>idle, prepare 阶段</strong>:</p><ul><li>仅限内部使用，可以忽略。</li></ul></li><li><p><strong>poll 阶段</strong>:</p><ul><li>检查是否有被延迟到下一个循环迭代的 I/O 事件。</li><li>如果 <code>poll</code> 队列不为空，循环执行队列中的回调，直到队列清空或达到系统限制。</li><li>如果 <code>poll</code> 队列为空： <ul><li>如果有 <code>setImmediate</code> 回调，结束 <code>poll</code> 阶段并进入 <code>check</code> 阶段。</li><li>如果没有 <code>setImmediate</code> 回调，等待回调被加入 <code>poll</code> 队列并立即执行。</li></ul></li></ul></li><li><p><strong>check 阶段</strong>:</p><ul><li>执行 <code>setImmediate</code> 回调。</li></ul></li><li><p><strong>close callbacks 阶段</strong>:</p><ul><li>执行 <code>close</code> 事件的回调。</li></ul></li><li><p><strong>循环返回 timers 阶段</strong>:</p><ul><li>重复上述步骤。</li></ul></li></ol>",9),c=[t],a={__name:"nodejs的事件循环",setup(r,{expose:l}){return l({frontmatter:{}}),(n,p)=>(o(),e("div",s,c))}};export{a as default};
