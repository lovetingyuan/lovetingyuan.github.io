import{o as a,f as n,O as l}from"./vendor-b1BbEorC.js";const i={class:"markdown-body"},o=l(`<h2>节流(throttle)和防抖(debounce)</h2><p>这两种函数执行策略都是针对短时间内函数被频繁触发执行的问题，比如 input，resize，scroll，mousemove 等等，是改善程序性能的一种手段。</p><p>其中</p><ul><li><p>节流表示在设置的单位时间内，保证函数只被执行一次；</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">throttle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(method, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// method每次调用时间间隔都保证至少为200ms</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> throttle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">delay</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> timer</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#E36209;--shiki-dark:#FFAB70;">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (timer) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    timer </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 也可以通过记录上一次执行时的时间戳对比现在的时间戳是否超出delay来决定是否执行函数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      timer </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }, delay)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></li><li><p>防抖表示在函数仅在频繁触发(间隔小于设置的时间)的最后一次执行；</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">debounce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(method, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 在一段时间内，如果method触发的周期都小于200ms，那么只会最后执行一次</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">delay</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> timer</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#E36209;--shiki-dark:#FFAB70;">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    clearTimeout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(timer)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    timer </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }, delay)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></li></ul><p><code>lodash</code>提供了上面两个方法更为增强和细致的实现，<a href="https://github.com/lodash/lodash/blob/master/throttle.js" target="_blank" rel="noopener">throttle</a>, <a href="https://github.com/lodash/lodash/blob/master/debounce.js" target="_blank" rel="noopener">debounce</a>.</p>`,5),p=[o],c={__name:"节流throttle防抖debounce",setup(r,{expose:s}){return s({frontmatter:{}}),(k,t)=>(a(),n("div",i,p))}};export{c as default};
