import{o,c as i,p as t}from"./index-cb801410.js";const p={class:"markdown-body"},r=t('<h2>微前端</h2><blockquote><p>Techniques, strategies and recipes for building a modern web app with multiple teams that can ship features independently. – <a href="https://micro-frontends.org/" target="_blank" rel="noopener">Micro Frontends</a> <br> 微前端是一种多个团队通过独立发布功能的方式来共同构建现代化 web 应用的技术手段及方法策略。</p></blockquote><p>微前端架构具备以下几个核心价值：</p><ul><li><p>【技术栈无关】 主框架不限制接入应用的技术栈，微应用具备完全自主权</p></li><li><p>【独立开发、独立部署】 微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</p></li><li><p>【增量升级】 在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</p></li><li><p>【独立运行时】 每个微应用之间状态隔离，运行时状态不共享（但可以在必要时与其他微应用通信）</p></li></ul><hr><h3>现有的微前端解决方案</h3><ul><li><p><code>iframe</code></p><p>iframe 天然支持上述提到的微前端核心功能，但是也有天然的问题：</p><ol><li>url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。</li><li>UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中…</li><li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</li><li>慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</li></ol></li><li><p><code>single-spa</code></p></li><li><p><code>qiankun.js</code></p></li><li><p><a href="https://wujie-micro.github.io/doc/" target="_blank" rel="noopener">无界</a> 无界基于 WebComponent 和 iframe 实现</p></li><li><p><a href="https://github.com/ice-lab/icestark" target="_blank" rel="noopener"><code>icestark</code></a></p></li><li><p><a href="https://github.com/efoxTeam/emp" target="_blank" rel="noopener"><code>emp</code></a> emp 基于 Webpack 5 的 Module Federation 实现</p></li><li><p><a href="https://github.com/micro-zoe/micro-app" target="_blank" rel="noopener"><code>micro-app</code></a> micro-app 基于 WebComponent 实现</p></li></ul>',7),l=[r],d={__name:"微前端",setup(a,{expose:e}){return e({frontmatter:{}}),(n,s)=>(o(),i("div",p,l))}};export{d as default};
