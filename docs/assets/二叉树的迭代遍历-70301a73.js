import { o as openBlock, c as createElementBlock, p as createStaticVNode } from "./index-30d4195a.js";
const _hoisted_1 = { class: "markdown-body" };
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h3>二叉树三种遍历的迭代写法</h3><h4>前序遍历</h4><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">preorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">root</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">result</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nodeList</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">result</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><p>另一种前序遍历方法：</p><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">preorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">list</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nodeList</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">list</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><h4>中序遍历</h4><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">inorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">root</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nodeList</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">result</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">result</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre><h4>后序遍历</h4><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">postorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nodeList</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">result</span><span style="color:#D4D4D4;"> = []</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">root</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">last</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">nodeList</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 不能走回头路</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">last</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">last</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">last</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span></span>\n<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span>\n<span class="line"><span style="color:#D4D4D4;">    }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">result</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre>', 9);
const _hoisted_11 = [
  _hoisted_2
];
const _sfc_main = {
  __name: "二叉树的迭代遍历",
  setup(__props, { expose: __expose }) {
    const frontmatter = {};
    __expose({ frontmatter });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, _hoisted_11);
    };
  }
};
export {
  _sfc_main as default
};
