import{o as a,f as n,O as l}from"./vendor-y_6yhxmk.js";const o={class:"markdown-body"},r=l(`<h3>leetcode一些会员题</h3><h4>340. 至多包含 K 个不同字符的最长子串</h4><p>给你一个字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 和一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> ，请你找出 <strong>至多 </strong>包含<em> </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>k</em></code> 个 <strong>不同</strong> 字符的最长</p><p>子串</p><p>，并返回该子串的长度。 </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;eceba&quot;, k = 2
输出：3
解释：满足题目要求的子串是 &quot;ece&quot; ，长度为 3 。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;aa&quot;, k = 1
输出：2
解释：满足题目要求的子串是 &quot;aa&quot; ，长度为 2 。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= s.length &lt;= 5 * 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= k &lt;= 50</code></li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 滑动窗口</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 用哈希表来记录窗口内不同字符以及对应的数量</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> lengthOfLongestSubstringKDistinct</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map.size </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 窗口合法，右指针继续移动</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[r], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[r]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 不合法，窗口收缩</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> l</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l])) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 没有s[l]这个字符了，从哈希表删除</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map.size </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 如果窗口合法，记录可能的最大值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>772. 基本计算器 III</h4><p>实现一个基本的计算器来计算简单的表达式字符串。</p><p>表达式字符串只包含非负整数，算符 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">+</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">*</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">/</code> ，左括号 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">(</code> 和右括号 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">)</code> 。整数除法需要 <strong>向下截断</strong> 。</p><p>你可以假定给定的表达式总是有效的。所有的中间结果的范围均满足 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[-231, 231 - 1]</code> 。</p><p><strong>注意：</strong>你不能使用任何将字符串作为表达式求值的内置函数，比如 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">eval()</code> 。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;1+1&quot;
输出：2
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;6-4/2&quot;
输出：4
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;2*(5+5*2)/3+(6/2+8)&quot;
输出：21
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= s &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 由整数、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;+&#39;</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;-&#39;</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;*&#39;</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;/&#39;</code>、<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;(&#39;</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;)&#39;</code> 组成</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 是一个 <strong>有效的</strong> 表达式</li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 栈</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 当遇到乘除时，总是先计算出来，结果入栈</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 当遇到括号时，总是先把括号的结果计算出来，结果入栈</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> calculate</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> stack</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  s </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 补个括号，统一处理</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      num </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 如果是数字，收集</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (num) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 在处理符号之前，数字先入栈</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 每当数字入栈的时候，我们都去判断栈顶是不是乘除，如果是就先计算结果</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">op</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(), stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 这里向下取整不能用parseInt，例如 4 / 232424223 = 1.720991017360527e-8</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(op </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 如果遇到括号结尾，我们就去计算括号内的表达式，由于乘除总是被立即处理，所以可以保证括号内都是加减</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 从后往前计算，( 1, -2, +3 )</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> op</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (op </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> op </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;+&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">n</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 判断栈顶是不是乘除，如果是就先计算结果</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">op</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(), stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(op </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sum)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>2417. 最近的公平整数</h4><p>给定一个 <strong>正整数</strong> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code>。</p><p>如果一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 中的 <strong>偶数 </strong>位数与<strong> 奇数</strong> 位数相等，那么我们称 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 为公平整数。</p><p>返回 <strong><em>大于或等于 </em></strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code><em> 的 </em><strong><em>最小 </em></strong><em>的公平整数。</em></p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: n = 2
输出: 10
解释: 大于等于 2 的最小的公平整数是 10。
10是公平整数，因为它的偶数和奇数个数相等 (一个奇数和一个偶数)。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: n = 403
输出: 1001
解释: 大于或等于 403 的最小的公平整数是 1001。
1001 是公平整数，因为它有相等数量的偶数和奇数 (两个奇数和两个偶数)。
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= 109</code></li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> closestFair</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (len </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 如果当前n的位数是奇数 显然答案是n + 1位的数字中第一个fair的数字</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nextLen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nextLen </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ret </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">repeat</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(half) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">repeat</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(half </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(ret)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cnt </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> str) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    cnt </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (cnt </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 如果当前n已经fair了 直接返回它</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> closestFair</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 否则递归 直到遇到第一个fair的</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1940. 排序数组之间的最长公共子序列</h4><p>给定一个由整数数组组成的数组<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">arrays</code>，其中<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">arrays[i]</code>是严格递增排序的，返回一个表示所有数组之间的最长公共子序列的整数数组。</p><p>子序列是从另一个序列派生出来的序列，删除一些元素或不删除任何元素，而不改变其余元素的顺序。</p><p><strong>示例1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: arrays = [[1,3,4],
               [1,4,7,9]]
输出: [1,4]
解释: 这两个数组中的最长子序列是[1,4]。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: arrays = [[2,3,6,8],
               [1,2,3,5,6,7,10],
               [2,3,4,6,9]]
输出: [2,3,6]
解释: 这三个数组中的最长子序列是[2,3,6]。
</pre><p><strong>示例 3:</strong></p><pre class="ql-syntax" spellcheck="false">输入: arrays = [[1,2,3,4,5],
               [6,7,8]]
输出: []
解释: 这两个数组之间没有公共子序列。
</pre><p> </p><p><strong>限制条件:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">2 &lt;= arrays.length &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= arrays[i].length &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= arrays[i][j] &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">arrays[i]</code> 是严格递增排序.</li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> longestCommonSubsequence</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">arrays</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> arrays2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    arrays2.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(arrays[i]))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (arrays2.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">every</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">v</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> v.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n))) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>2764. 数组是否表示某二叉树的前序遍历</h4><p>给定一个以 <strong>0</strong> 为起始索引的整数 <strong>二维数组</strong> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nodes</code> ，你的任务是确定给定的数组是否表示某个 <strong>二叉</strong> 树的 <strong>前序</strong> 遍历。</p><p>对于每个索引 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">i</code> ，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nodes[i] = [id, parentId]</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">id</code> 是索引 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">i</code> 处节点的 id，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">parentId</code> 是其在树中的父节点 id（如果该节点没有父节点，则 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">parentId = -1</code> ）。</p><p>如果给定的数组表示某个树的前序遍历，则返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">true</code> ，否则返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">false</code> 。</p><p><strong>注意</strong>：树的 <strong>前序</strong> 遍历是一种递归的遍历方式，它首先访问当前节点，然后对左子节点进行前序遍历，最后对右子节点进行前序遍历。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]
输出：true
解释：给定的 nodes 数组可以构成下面图片中的树。
我们可以验证这是树的前序遍历，首先访问节点 0，然后对左子节点进行前序遍历，即 [1] ，然后对右子节点进行前序遍历，即 [2,3,4] 。
</pre><p><span style="background-color:rgb(255, 255, 255);"><img src="https://assets.leetcode.com/uploads/2023/07/04/1.png"></span></p><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]
输出：false
解释：给定的 nodes 数组可以构成下面图片中的树。
对于前序遍历，首先访问节点 0，然后对左子节点进行前序遍历，即 [1,3,4]，但是我们可以看到在给定的顺序中，2 位于 1 和 3 之间，因此它不是树的前序遍历。
</pre><p><span style="background-color:rgb(255, 255, 255);"><img src="https://assets.leetcode.com/uploads/2023/07/04/2.png"></span></p><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nodes.length &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nodes[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= nodes[i][0] &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-1 &lt;= nodes[i][1] &lt;= 105</code></li><li>生成的输入保证 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nodes</code> 可以组成二叉树。</li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isPreorder</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nodes</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> stack</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nodes.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">parent</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nodes[i]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nodes[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (stack.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>2307. 检查方程中的矛盾之处</h4><p>给你一个由字符串二维数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">equations</code> 和实数数组  <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">values</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">equations[i] = [Ai, Bi]</code>，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">values[i]</code> 表示 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Ai / Bi = values[i]</code>.。</p><p>确定方程中是否存在矛盾。<em>如果存在矛盾则返回 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>true</em></code><em>，否则返回 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>false</em></code>。</p><p><strong>注意</strong>:</p><ul><li>当检查两个数字是否相等时，检查它们的 <strong>绝对差值 </strong>是否小于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">10-5</code>.</li><li>生成的测试用例没有针对精度的用例，即使用 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">double</code> 就足以解决问题。</li></ul><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;],[&quot;a&quot;,&quot;c&quot;]], values = [3,0.5,1.5]
输出: false
解释:
给定的方程为: a / b = 3, b / c = 0.5, a / c = 1.5
方程中没有矛盾。满足所有方程的一个可能的分配是:
a = 3, b = 1 和 c = 2.
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: equations = [[&quot;le&quot;,&quot;et&quot;],[&quot;le&quot;,&quot;code&quot;],[&quot;code&quot;,&quot;et&quot;]], values = [2,5,0.5]
输出: true
解释:
给定的方程为: le / et = 2, le / code = 5, code / et = 0.5
根据前两个方程，我们得到 code / et = 0.4.
因为第三个方程是 code / et = 0.5, 所以矛盾。
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= equations.length &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">equations[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= Ai.length, Bi.length &lt;= 5</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Ai</code>, <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Bi</code> 由小写英文字母组成。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">equations.length == values.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0.0 &lt; values[i] &lt;= 10.0</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">values[i]</code> 小数点后最多 2 位。</li></ul><p><br></p><hr><p><a href="https://leetcode.cn/problems/meeting-rooms-ii/" target="_blank" style="color:inherit;">253. 会议室 II</a></p><p>已解答</p><p><br></p><p>中等</p><p>相关标签</p><p>相关企业</p><p>提示</p><p><br></p><p>给你一个会议时间安排的数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">intervals</code> ，每个会议时间都会包括开始和结束的时间 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">intervals[i] = [starti, endi]</code> ，返回 <em>所需会议室的最小数量</em> 。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：intervals = [[0,30],[5,10],[15,20]]
输出：2
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：intervals = [[7,10],[2,4]]
输出：1
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= intervals.length &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= starti &lt; endi &lt;= 106</code></li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> ----------</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    -----</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">       -------</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">                ------</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> minMeetingRooms</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">intervals</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 其实就是求所有的区间最大重叠数</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // intervals.sort((a, b) =&gt; a[0] - b[0])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [a, b] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map[a] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 一旦有会议开始我们就当前时间计数加一</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map[a]</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map[b] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map[b]</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 一旦有会议结束我们就当前时间计数减一</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> keys</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(map)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> keys) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 按时间先后顺序来统计计数 （js中map key如果是数字会自动排序）</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    count </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map[k]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, count)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>280. 摆动排序</h4><p>给你一个的整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code>, 将该数组重新排序后使 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code> </p><p>输入数组总是有一个有效的答案。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [3,5,2,1,6,4]
输出：[3,5,1,6,2,4]
解释：[1,6,2,5,3,4]也是有效的答案
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [6,6,5,6,3,8]
输出：[6,6,5,6,3,8]
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums.length &lt;= 5 * 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= nums[i] &lt;= 104</code></li><li><a href="https://leetcode.cn/problems/meeting-rooms-ii/" target="_blank" style="color:inherit;">输入的 </a><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> 保证至少有一个答案。</li></ul><p> </p><p><strong>进阶：</strong>你能在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">O(n)</code> 时间复杂度下解决这个问题吗？</p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> Do not return anything, modify nums in-place instead.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> wiggleSort</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> last</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (last </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        ;[nums[i], nums[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [nums[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], nums[i]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (last </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ;[nums[i], nums[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [nums[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], nums[i]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>250. 统计同值子树</h4><p>给定一个二叉树，统计该二叉树数值相同的</p><p>子树</p><p>个数。同值子树是指该子树的所有节点都拥有相同的数值。</p><p><strong>示例：</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = [5,1,5,5,5,null,5]
<pre><code>          5
         / \\
        1   5
       / \\   \\
      5   5   5
</code></pre>
<p>输出: 4</p>
</pre><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> countUnivalSubtrees</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">root) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isUnivalSubtree</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node.left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node.right) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> isUnival </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.left) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      isUnival </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isUnivalSubtree</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.left) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> isUnival </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.left.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.val</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.right) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      isUnival </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isUnivalSubtree</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.right) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> isUnival </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.right.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.val</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (isUnival) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  isUnivalSubtree</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>159. 至多包含两个不同字符的最长子串</h4><p><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">给你一个字符串 </span><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> ，请你找出 </span><strong style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">至多 </strong><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">包含 </span><strong style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">两个不同字符</strong><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> 的最长</span><span style="background-color:rgb(240, 240, 240);font-size:14px;">子串</span></p><p><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">，并返回该子串的长度。</span></p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;eceba&quot;
输出：3
解释：满足题目要求的子串是 &quot;ece&quot; ，长度为 3 。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;ccaabbb&quot;
输出：5
解释：满足题目要求的子串是 &quot;aabbb&quot; ，长度为 5 。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= s.length &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 由英文字母组成</li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 滑动窗口</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> lengthOfLongestSubstringTwoDistinct</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 保存窗口内的字符及其个数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map.size </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[r], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[r]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> l</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l])) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map.size </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>186. 反转字符串中的单词 II</h4><p>给你一个字符数组 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">s</code> ，反转其中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 的定义为：单词是一个由非空格字符组成的序列。<code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">s</code> 中的单词将会由单个空格分隔。</p><p>必须设计并实现 <strong>原地</strong> 解法来解决此问题，即不分配额外的空间。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = [&quot;t&quot;,&quot;h&quot;,&quot;e&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;]
输出：[&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;t&quot;,&quot;h&quot;,&quot;e&quot;]
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = [&quot;a&quot;]
输出：[&quot;a&quot;]
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">1 &lt;= s.length &lt;= 105</code></li><li><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">s[i]</code> 可以是一个英文字母（大写或小写）、数字、或是空格 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">&#39; &#39;</code> 。</li><li><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">s</code> 中至少存在一个单词</li><li><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">s</code> 不含前导或尾随空格</li><li>题目数据保证：<code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">s</code> 中的每个单词都由单个空格分隔</li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {character[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> Do not return anything, modify s in-place instead.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reverseWords</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    ;[s[left], s[right]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [s[right], s[left]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    left</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    right</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; ) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (s[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ;[s[left], s[right]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [s[right], s[left]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>2204. 无向图中到环的距离</h4><p>给定一个正整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code>，表示一个 <strong>连通无向图</strong> 中的节点数，该图 <strong>只包含一个 </strong>环。节点编号为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> ~ <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n - 1</code>(<strong>含</strong>)。</p><p>你还得到了一个二维整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">edges</code>，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">edges[i] = [node1i, node2i]</code> 表示有一条 <strong>双向 </strong>边连接图中的 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">node1i</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">node2i</code>。</p><p>两个节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 之间的距离定义为从 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 到 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 所需的 <strong>最小边数</strong>。</p><p>返回<em>一个长度为 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>n</em></code><em> 的整数数组 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>answer</em></code><em>，其中 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">answer[i]</code><em> 是第 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>i</em></code><em> 个节点与环中任何节点之间的最小距离</em>。</p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: n = 7, edges = [[1,2],[2,4],[4,3],[3,1],[0,1],[5,2],[6,5]]
给输出: [1,0,0,0,0,1,2]
解释:
节点 1, 2, 3, 和 4 来自环。
0 到 1 的距离是 1。
1 到 1 的距离是 0。
2 到 2 的距离是 0。
3 到 3 的距离是 0。
4 到 4 的距离是 0。
5 到 2 的距离是 1。
6 到 2 的距离是 2。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: n = 9, edges = [[0,1],[1,2],[0,2],[2,6],[6,7],[6,8],[0,3],[3,4],[3,5]]
你输出: [0,0,0,1,2,2,1,2,2]
解释:
节点 0, 1, 和 2 来自环.
0 到 0 的距离是 0。
1 到 1 的距离是 0。
2 到 2 的距离是 0。
3 到 1 的距离是 1。
4 到 1 的距离是 2。
5 到 1 的距离是 2。
6 到 2 的距离是 1。
7 到 2 的距离是 2。
8 到 2 的距离是 2。
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3 &lt;= n &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">edges.length == n</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">edges[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= node1i, node2i &lt;= n - 1</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">node1i != node2i</code></li><li>图是连通的。</li><li>这个图只有一个环。</li><li>任何顶点对之间最多只有一条边。</li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> edges</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> distanceToCycle</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">edges</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //统计无向图中所有点到环路点的最近距离</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //1、dfs求出无向图中的环</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //邻接矩阵-无向图</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> graph</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [x, y] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> edges) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    graph[x].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    graph[y].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //单源DFS</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cycle </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">//判圈剪枝：正在进行</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">cur</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">pre</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (cycle.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //代表已经找到环路</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (process[cur]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (cycle </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cur)))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    process[cur] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cur)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> graph[cur]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (next </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> pre) </span><span style="color:#6F42C1;--shiki-dark:#B392F0;">dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(next, cur)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    process[cur] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cur)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //多源BFS</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> visited </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cycle) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    queue.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    visited[num] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //代表已经入队</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dist </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (queue.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> size</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> size; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //1、出队</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue[i]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //2、计数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res[x] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dist</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //3、入队</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> graph[x]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (visited[y]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">continue</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //如果已经访问过，返回</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        visited[y] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        queue2.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    queue </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    queue2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dist</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1136. 并行课程</h4><p>给你一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> ，表示编号从 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code> 到 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> 的 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> 门课程。另给你一个数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">relations</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">relations[i] = [prevCoursei, nextCoursei]</code> ，表示课程 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">prevCoursei</code> 和课程 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nextCoursei</code> 之间存在先修关系：课程 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">prevCoursei</code> 必须在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nextCoursei</code> 之前修读完成。</p><p>在一个学期内，你可以学习 <strong>任意数量</strong> 的课程，但前提是你已经在 <strong>上</strong> 一学期修读完待学习课程的所有先修课程。</p><p>请你返回学完全部课程所需的 <strong>最少</strong> 学期数。如果没有办法做到学完全部这些课程的话，就返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-1</code>。</p><p> </p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：n = 3, relations = [[1,3],[2,3]]
给输出：2
解释：上图表示课程之间的关系图：
在第一学期，可以修读课程 1 和 2 。
在第二学期，可以修读课程 3 。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：n = 3, relations = [[1,2],[2,3],[3,1]]
定输出：-1
解释：没有课程可以学习，因为它们互为先修课程。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= 5000</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= relations.length &lt;= 5000</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">relations[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= prevCoursei, nextCoursei &lt;= n</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">prevCoursei != nextCoursei</code></li><li>所有 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[prevCoursei, nextCoursei]</code> <strong>互不相同</strong></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> minimumSemesters</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">relations</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> graph</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> queue</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> inDegree</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ length: n </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prereq</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">course</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> relations) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">graph[prereq]) graph[prereq] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    graph[prereq].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(course)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    inDegree[course]</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //graph存储了所有的课程，其中 先修课程 =&gt; 才能修的课程</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //也就是图论中的 先修的课 -&gt; 指向 后修的课</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // console.log(graph)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //{ &#39;1&#39;: [ 3 ], &#39;2&#39;: [ 3 ], &#39;3&#39;: [] }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //inDegree 是在图里指向这个点的edge数</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //在本题中代表了每门课需要的前修课程的数量</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //对应关系是 index =&gt; 前修课数量</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //比如 inDegree[3] = 2代表第三门课前修课程数量要求是2</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // console.log(inDegree)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //[ 0, 0, 0, 2 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //同样的利用了课程是数字的便利...</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //这里建造一个queue，第一层先学习不要前置课程的</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> course </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; course </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n; course</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (inDegree[course] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) queue.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(course)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> semester </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (queue.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> size; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prereq </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //这里要注意要加上if graph[prereq]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //因为声明inDegree 的时候是默认所有都是0</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //但是可能n = 10 但relations里没有关于10这门课程的信息</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (graph[prereq]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> course </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> graph[prereq]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          inDegree[course]</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //得到还剩下的prereq的数量</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (inDegree[course] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) queue.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(course)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    semester</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //如果经历过这门多学期还有不能学的，那就说明没办法学到这门课程</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //也就是说图中某处有环</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> course</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> inDegree) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (course </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> semester</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>681. 最近时刻</h4><p>给定一个形如 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot;HH:MM&quot;</code> 表示的时刻 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">time</code> ，利用当前出现过的数字构造下一个距离当前时间最近的时刻。每个出现数字都可以被无限次使用。</p><p>你可以认为给定的字符串一定是合法的。例如， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot;01:34&quot;</code> 和  <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot;12:09&quot;</code> 是合法的，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">“1:34”</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">“12:9”</code> 是不合法的。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: &quot;19:34&quot;
输出: &quot;19:39&quot;
解释: 利用数字 1, 9, 3, 4 构造出来的最近时刻是 19:39，是 5 分钟之后。
结果不是 19:33 因为这个时刻是 23 小时 59 分钟之后。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: &quot;23:59&quot;
输出: &quot;22:22&quot;
解释: 利用数字 2, 3, 5, 9 构造出来的最近时刻是 22:22。
答案一定是第二天的某一时刻，所以选择可构造的最小时刻。
</pre><ul><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> nextClosestTime</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">time</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">hour</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">minute</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;:&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> nums</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (num </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;:&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    nums.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> timestmap</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> hour </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">minute</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> max</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="color:#D73A49;--shiki-dark:#F97583;"> *</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 59</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> timestmap </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; t </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max; t</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ans</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> convert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(t, nums)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (ans) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; t </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> timestmap; t</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ans</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> convert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(t, nums)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (ans) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> convert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">time</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 60</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> h</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(time </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ((h </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">nums.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> h) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">nums.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c)) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (h </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> h) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;:&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> m)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>774. 最小化去加油站的最大距离</h4><p>整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">stations</code> 表示 <strong>水平数轴</strong> 上各个加油站的位置。给你一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 。</p><p>请你在数轴上增设 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 个加油站，新增加油站可以位于 <strong>水平数轴</strong> 上的任意位置，而不必放在整数位置上。</p><p>设 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">penalty()</code> 是：增设 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 个新加油站后，<strong>相邻</strong> 两个加油站间的最大距离。</p><p><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">请你返回 </span><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">penalty()</code><strong style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> </strong><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">可能的最小值。与实际答案误差在 </span><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">10-6</code><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> 范围内的答案将被视作正确答案。</span></p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：stations = [1,2,3,4,5,6,7,8,9,10], k = 9
输出：0.50000
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：stations = [23,24,36,39,46,56,57,65,84,98], k = 1
输出：14.00000
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">10 &lt;= stations.length &lt;= 2000</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= stations[i] &lt;= 108</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">stations</code> 按 <strong>严格递增</strong> 顺序排列</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= k &lt;= 106</code></li></ul><p><br></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stations</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> check</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">dist</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    c </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ((arr[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arr[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dist) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> minmaxGasDist</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">stations</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1e8</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1e-6</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(stations, mid, k)) left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>489. 扫地机器人</h4><p>房间中的某个位置上有一个机器人，你需要控制它清扫房间。房间被建模为一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m x n</code> 的二进制网格，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> 表示单元格中有障碍物，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code> 表示空单元格。</p><p>机器人从一个未知的空单元格开始出发，并且你无法访问网格，但你可以使用给定的 API <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Robot</code> 控制机器人。</p><p>你的任务是使用机器人清扫整个房间（即清理房间中的每个空单元格）。机器人具有四个给定的API，可以前进、向左转或向右转。每次转弯 90 度。</p><p>当机器人试图移动到一个存在障碍物的单元格时，它的碰撞传感器会检测到障碍物，并停留在当前单元格。</p><p>设计一个算法，使用下述 API 清扫整个房间：</p><pre class="ql-syntax" spellcheck="false">interface Robot {
  // 若下一个单元格为空，则返回 true ，并移动至该单元格。
  // 若下一个单元格为障碍物，则返回 false ，并停留在当前单元格。
  boolean move();
<p>// 在调用 turnLeft/turnRight 后机器人会停留在当前单元格。
  // 每次转弯 90 度。
  void turnLeft();
  void turnRight();</p>
<p>// 清理当前单元格。
void clean();
}</p>
</pre><p><strong>注意</strong> 扫地机器人的初始方向向上。你可以假定网格的四周都被墙包围。</p><p> </p><p><strong>自定义测试：</strong></p><p>输入只用于初始化房间和机器人的位置。你需要「盲解」这个问题。换而言之，你必须在对房间和机器人位置一无所知的情况下，只使用 4 个给出的 API 解决问题。 </p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：room = [[1,1,1,1,1,0,1,1],[1,1,1,1,1,0,1,1],[1,0,1,1,1,1,1,1],[0,0,0,1,0,0,0,0],[1,1,1,1,1,1,1,1]], row = 1, col = 3
整输出：Robot cleaned all rooms.
解释：
房间内的所有单元格用 0 或 1 填充。
0 表示障碍物，1 表示可以通过。
机器人从 row=1, col=3 的初始位置出发。
在左上角的一行以下，三列以右。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：room = [[1]], row = 0, col = 0
输出：Robot cleaned all rooms.
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m == room.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == room[i].length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= m &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= 200</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">room[i][j]</code> 为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> 或 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code>.</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= row &lt; m</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= col &lt; n</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">room[row][col] == 1</code></li><li>所有空单元格都可以从起始位置出发访问到。</li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * // This is the robot&#39;s control interface.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * // You should not implement it, or speculate about its implementation</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function Robot() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Returns true if the cell in front is open and robot moves into the cell.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Returns false if the cell in front is blocked and robot stays in the current cell.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.move = function() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *         ...</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Robot will stay in the same cell after calling turnLeft/turnRight.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Each turn will be 90 degrees.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.turnLeft = function() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *         ...</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Robot will stay in the same cell after calling turnLeft/turnRight.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Each turn will be 90 degrees.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.turnRight = function() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *         ...</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     // Clean the current cell.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.clean = function() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *         ...</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Robot}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> robot</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> cleanRoom</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">robot</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, map, robot)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map.size</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">position</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [], </span><span style="color:#E36209;--shiki-dark:#FFAB70;">dir</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="color:#E36209;--shiki-dark:#FFAB70;">robot</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">posX</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">posY</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> position</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">posX</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}_\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">posY</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key, [])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(dir)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">clean</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> directions </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> curDirectionIndex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (dir </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i) </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [dx, dy] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> directions[curDirectionIndex]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> newX </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> posX </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dx</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> newY </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> posY </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dy</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> newPositionKey</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">newX</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}_\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">newY</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(newPositionKey) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">move</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([newX, newY], curDirectionIndex, map, robot)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      goBack</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(robot)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">turnRight</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> goBack</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">robot</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">turnRight</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">turnRight</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">move</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">turnLeft</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  robot.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">turnLeft</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>255. 验证二叉搜索树的前序遍历序列</h4><p>给定一个 <strong>无重复元素</strong> 的整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">preorder</code> ， <em>如果它是以二叉搜索树的</em><strong><em>先序遍历</em></strong><em>排列 </em>，返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">true</code> 。</p><p> </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/12/preorder-tree.jpg"></p><pre class="ql-syntax" spellcheck="false">输入: preorder = [5,2,1,3,6]
输出: true
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入: preorder = [5,2,6,1,3]
输出: false
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= preorder.length &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= preorder[i] &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">preorder</code> 中 <strong>无重复元素</strong></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> preorder</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> verifyPreorder</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">preorder</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> inorder</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> preorder.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> invalid </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> used </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">start</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">rootIndex</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (invalid) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (start </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rootIndex </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> preorder.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (used[rootIndex]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      invalid </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    used[rootIndex] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      val: preorder[rootIndex],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (start </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> inorder.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root.val)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 左子树的根结点就是当前先序根结点的下一个</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    root.left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start, index </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, rootIndex </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (root.left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root.left.val) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      invalid </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 右子树的根结点则要从当前先序根节点往后数左子树的节点个数的下一个</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    root.right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, end, rootIndex </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (root.right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root.right.val) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      invalid </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  produce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, preorder.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">invalid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1490. 克隆 N 叉树</h4><p>给定一棵 N 叉树的根节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">root</code> ，返回该树的<a href="https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin" target="_blank"><strong>深拷贝</strong></a>（克隆）。</p><p>N 叉树的每个节点都包含一个值（ <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">int</code> ）和子节点的列表（ <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">List[Node]</code> ）。</p><pre class="ql-syntax" spellcheck="false">class Node {
    public int val;
    public List&lt;Node&gt; children;
}
</pre><p><em>N 叉树的输入序列用层序遍历表示，每组子节点用 null 分隔（见示例）。</em></p><p> </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"></p><pre class="ql-syntax" spellcheck="false">输入：root = [1,null,3,2,4,null,5,6]
输出：[1,null,3,2,4,null,5,6]
</pre><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"></p><pre class="ql-syntax" spellcheck="false">输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出：[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
</pre><p> </p><p><strong>提示：</strong></p><ul><li>给定的 N 叉树的深度小于或等于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1000</code>。</li><li>节点的总个数在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[0, 10^4]</code> 之间</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * // Definition for a Node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function Node(val, children) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.val = val === undefined ? 0 : val;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.children = children === undefined ? [] : children;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node|null}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node|null}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> cloneTree</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> copy</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> children</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> newNode</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.val, children)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.children.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> child</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.children[i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      children.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(child))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> newNode</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> copy</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>642. 设计搜索自动补全系统</h4><p>为搜索引擎设计一个搜索自动补全系统。用户会输入一条语句（最少包含一个字母，以特殊字符 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;#&#39;</code> 结尾）。</p><p>给定一个字符串数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">sentences</code> 和一个整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">times</code> ，长度都为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">sentences[i]</code> 是之前输入的句子， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">times[i]</code> 是该句子输入的相应次数。对于除 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">‘#’</code> 以外的每个输入字符，返回前 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3</code> 个历史热门句子，这些句子的前缀与已经输入的句子的部分相同。</p><p>下面是详细规则：</p><ul><li>一条句子的热度定义为历史上用户输入这个句子的总次数。</li><li>返回前 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3</code> 的句子需要按照热度从高到低排序（第一个是最热门的）。如果有多条热度相同的句子，请按照 ASCII 码的顺序输出（ASCII 码越小排名越前）。</li><li>如果满足条件的句子个数少于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3</code> ，将它们全部输出。</li><li>如果输入了特殊字符，意味着句子结束了，请返回一个空集合。</li></ul><p>实现 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">AutocompleteSystem</code> 类：</p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">AutocompleteSystem(String[] sentences, int[] times):</code> 使用数组<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">sentences</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">times</code> 对对象进行初始化。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">List&lt;String&gt; input(char c)</code> 表示用户输入了字符 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">c</code> 。</li><li class="ql-indent-1">如果 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">c == &#39;#&#39;</code> ，则返回空数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[]</code> ，并将输入的语句存储在系统中。</li><li class="ql-indent-1">返回前 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3</code> 个历史热门句子，这些句子的前缀与已经输入的句子的部分相同。如果少于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3</code> 个匹配项，则全部返回。</li></ul><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入
[&quot;AutocompleteSystem&quot;, &quot;input&quot;, &quot;input&quot;, &quot;input&quot;, &quot;input&quot;]
[[[&quot;i love you&quot;, &quot;island&quot;, &quot;iroman&quot;, &quot;i love leetcode&quot;], [5, 3, 2, 2]], [&quot;i&quot;], [&quot; &quot;], [&quot;a&quot;], [&quot;#&quot;]]
输出
[null, [&quot;i love you&quot;, &quot;island&quot;, &quot;i love leetcode&quot;], [&quot;i love you&quot;, &quot;i love leetcode&quot;], [], []]
<p>解释
AutocompleteSystem obj = new AutocompleteSystem([“i love you”, “island”, “iroman”, “i love leetcode”], [5, 3, 2, 2]);
obj.input(“i”); // return [“i love you”, “island”, “i love leetcode”]. There are four sentences that have prefix “i”. Among them, “ironman” and “i love leetcode” have same hot degree. Since ’ ’ has ASCII code 32 and ‘r’ has ASCII code 114, “i love leetcode” should be in front of “ironman”. Also we only need to output top 3 hot sentences, so “ironman” will be ignored.
obj.input(&quot; &quot;); // return [“i love you”, “i love leetcode”]. There are only two sentences that have prefix “i “.
obj.input(“a”); // return []. There are no sentences that have prefix “i a”.
obj.input(”#”); // return []. The user finished the input, the sentence “i a” should be saved as a historical sentence in system. And the following input will be counted as a new search.</p>
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == sentences.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == times.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= sentences[i].length &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= times[i] &lt;= 50</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">c</code> 是小写英文字母， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;#&#39;</code>, 或空格 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39; &#39;</code></li><li>每个被测试的句子将是一个以字符 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;#&#39;</code> 结尾的字符 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">c</code> 序列。</li><li>每个被测试的句子的长度范围为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1,200]</code> </li><li>每个输入句子中的单词用单个空格隔开。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">input</code> 最多被调用 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">5000</code> 次</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Trie</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sentences</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">times</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.dictionary </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.curNode </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, len </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sentences.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sentences[i], times[i])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  insert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">word</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">time</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.dictionary</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node[c]) node[c] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { isEnd: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, word: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, time: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      node </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node[c]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    node[</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;isEnd&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    node[</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;word&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    node[</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;time&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">ans</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node[</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;isEnd&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) ans.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (p </span><span style="color:#D73A49;--shiki-dark:#F97583;">!=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;word&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="color:#D73A49;--shiki-dark:#F97583;">!=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;time&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="color:#D73A49;--shiki-dark:#F97583;">!=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;isEnd&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node[p], ans)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> AutocompleteSystem</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sentences</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">times</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Trie</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sentences, times)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cur </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  input</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;#&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cur, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cur </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //表示当前输入在字典树中没有符合的串，你再输入别的也不会有什么东西出来</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.cur </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.flag) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.dictionary[c]</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode, ans)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode) </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode[c], ans)</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode[c]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.trie.curNode) </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (a.time </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b.time) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a.word </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b.word </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b.time </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a.time</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val[</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;word&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>2291. 最大股票收益</h4><p>给你两个下标从 <strong>0</strong> 开始的数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">present</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">future</code> ，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">present[i]</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">future[i]</code> 分别代表第 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">i</code> 支股票现在和将来的价格。每支股票你最多购买 <strong>一次</strong> ，你的预算为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">budget</code> 。</p><p>求最大的收益。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：present = [5,4,6,2,3], future = [8,5,4,3,5], budget = 10
输出：6
解释：你可以选择购买第 0,3,4 支股票获得最大收益：6 。总开销为：5 + 2 + 3 = 10 , 总收益是: 8 + 3 + 5 - 10 = 6 。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：present = [2,2,5], future = [3,4,10], budget = 6
输出：5
解释：你可以选择购买第 2 支股票获得最大收益：5 。总开销为：5 , 总收益是: 10 - 5 = 5 。
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：present = [3,3,12], future = [0,3,15], budget = 10
输出：0
解释：你无法购买唯一一支正收益股票 2 ，因此你的收益是 0 。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == present.length == future.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= 1000</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= present[i], future[i] &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= budget &lt;= 1000</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> present</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> future</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> budget</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maximumProfit</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">present</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">future</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">budget</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(budget </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> present.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> budget; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> present[i]; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(dp[j], dp[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> present[i]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> future[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> present[i])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[budget]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>624. 数组列表中的最大距离</h4><p>给定 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m</code> 个数组，每个数组都已经按照升序排好序了。现在你需要从两个不同的数组中选择两个整数（每个数组选一个）并且计算它们的距离。两个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 之间的距离定义为它们差的绝对值 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">|a-b|</code> 。你的任务就是去找到最大距离</p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：
[[1,2,3],
 [4,5],
 [1,2,3]]
输出： 4
解释：
一种得到答案 4 的方法是从第一个数组或者第三个数组中选择 1，同时从第二个数组中选择 5 。
</pre><p> </p><p><strong>注意：</strong></p><ol><li>每个给定数组至少会有 1 个数字。列表中至少有两个非空数组。</li><li><strong>所有</strong> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m</code> 个数组中的数字总数目在范围 [2, 10000] 内。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m</code> 个数组中所有整数的范围在 [-10000, 10000] 内。</li></ol><ul><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maxDistance</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">arrays</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [min1, min2, max1, max2] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> min</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays[i][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> max</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arrays[i].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (min </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min1[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      min2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      min1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [min, i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (min </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min2[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      min2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [min, i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (max </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max1[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [max, i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (max </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max2[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [max, i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmax</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getmax</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(min1, max1), </span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getmax</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(min2, max1), </span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getmax</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(min1, max2), </span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getmax</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(min2, max2))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1066. 校园自行车分配 II</h4><p>在由 2D 网格表示的校园里有 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> 位工人（<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">worker</code>）和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m</code> 辆自行车（<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">bike</code>），<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n &lt;= m</code>。所有工人和自行车的位置都用网格上的 2D 坐标表示。</p><p>我们为每一位工人分配一辆专属自行车，使每个工人与其分配到的自行车之间的 <strong>曼哈顿距离</strong> 最小化。</p><p>返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">每个工人与分配到的自行车之间的曼哈顿距离的最小可能总和</code> 。</p><p><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">p1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">p2</code> 之间的 <strong>曼哈顿距离</strong> 为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|</code>。</p><p> </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_1_v2.png"></p><pre class="ql-syntax" spellcheck="false">输入：workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
输出：6
解释：
自行车 0 分配给工人 0，自行车 1 分配给工人 1 。分配得到的曼哈顿距离都是 3, 所以输出为 6 。
</pre><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_2_v2.png"></p><pre class="ql-syntax" spellcheck="false">输入：workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
输出：4
解释：
先将自行车 0 分配给工人 0，再将自行车 1 分配给工人 1（或工人 2），自行车 2 给工人 2（或工人 1）。如此分配使得曼哈顿距离的总和为 4。
</pre><p><strong>示例 3:</strong></p><pre class="ql-syntax" spellcheck="false">输入：workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]
输出：4995
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == workers.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m == bikes.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= m &lt;= 10</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">workers[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">bikes[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] &lt; 1000</code></li><li>所有的工人和自行车的位置都是 <strong>不同</strong> 的。</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> assignBikes</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">workers</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">bikes</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> workers.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> bikes.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  prev.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> current </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> m; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [k, v] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j)) </span><span style="color:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">|</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> w </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> workers[i],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          b </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> bikes[j]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(w[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(w[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> v</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">current.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          current.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key, value)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          current.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key, Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(current.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key), value))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> current</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Infinity</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [k, v] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(v, ans)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>758. 字符串中的加粗单词</h4><p>给定一个关键词集合 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">words</code> 和一个字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code>，将所有 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 中出现的关键词 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">words[i]</code> 加粗。所有在标签 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&lt;b&gt;</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&lt;b&gt;</code> 中的字母都会加粗。</p><p>加粗后返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 。返回的字符串需要使用尽可能少的标签，当然标签应形成有效的组合。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: words = [&quot;ab&quot;,&quot;bc&quot;], s = &quot;aabcd&quot;
输出: &quot;a&lt;b&gt;abc&lt;/b&gt;d&quot;
解释: 注意返回 &quot;a&lt;b&gt;a&lt;b&gt;b&lt;/b&gt;c&lt;/b&gt;d&quot; 会使用更多的标签，因此是错误的。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: words = [&quot;ab&quot;,&quot;cb&quot;], s = &quot;aabcd&quot;
输出: &quot;a&lt;b&gt;ab&lt;/b&gt;cd&quot;
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= s.length &lt;= 500</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= words.length &lt;= 50</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= words[i].length &lt;= 10</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">words[i]</code> 由小写英文字母组成</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> words</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> boldWords</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">words</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">words.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> intervals</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findword</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">word</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 查找单词匹配的位置</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (word.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (word[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s[j]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        intervals.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">start</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> mergeranges</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 合并区间</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">intervals.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ranges</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [left, right] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ranges[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ranges.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">ll</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">rr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ranges[i]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (ll </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([left, right])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ll</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rr</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (rr </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rr</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([left, right])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> word</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> words) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    findword</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(word)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">intervals.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> mergeranges</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, a))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;b&gt;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(a, b </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;/b&gt;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">substring</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1101. 彼此熟识的最早时间</h4><p>在一个社交圈子当中，有 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> 个人。每个人都有一个从 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> 到 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n - 1</code> 的唯一编号。我们有一份日志列表 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">logs</code>，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">logs[i] = [timestampi, xi, yi]</code> 表示 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">xi</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">yi</code> 将在同一时间 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestampi</code> 成为朋友。</p><p>友谊是 <strong>相互</strong> 的。也就是说，如果 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 是朋友，那么 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 也是朋友。同样，如果 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 是朋友，或者 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 朋友的朋友 ，那么 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">b</code> 是熟识友。</p><p>返回圈子里所有人之间都熟识的最早时间。如果找不到最早时间，就返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-1</code> 。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
输出：20190301
解释：
第一次结交发生在 timestamp = 20190101，0 和 1 成为好友，社交朋友圈如下 [0,1], [2], [3], [4], [5]。
第二次结交发生在 timestamp = 20190104，3 和 4 成为好友，社交朋友圈如下 [0,1], [2], [3,4], [5].
第三次结交发生在 timestamp = 20190107，2 和 3 成为好友，社交朋友圈如下 [0,1], [2,3,4], [5].
第四次结交发生在 timestamp = 20190211，1 和 5 成为好友，社交朋友圈如下 [0,1,5], [2,3,4].
第五次结交发生在 timestamp = 20190224，2 和 4 已经是好友了。
第六次结交发生在 timestamp = 20190301，0 和 3 成为好友，大家都互相熟识了。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: logs = [[0,2,0],[1,0,1],[3,0,3],[4,1,2],[7,3,1]], n = 4
输出: 3
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">2 &lt;= n &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= logs.length &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">logs[i].length == 3</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= timestampi &lt;= 109</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= xi, yi &lt;= n - 1</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">xi != yi</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestampi</code> 中的所有时间戳 <strong>均不同</strong></li><li>所有的对 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">(xi, yi)</code> 在输入中最多出现一次</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> logs</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> earliestAcq</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">logs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> UF</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    unio</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">q</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> pRoot </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> qRoot </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(q)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (pRoot </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> qRoot) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent[pRoot] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> qRoot</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 联通份量--</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.count</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    find</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent[p] </span><span style="color:#D73A49;--shiki-dark:#F97583;">!=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent[p] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent[p])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.parent[p]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> uf </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> UF</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  logs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> logs) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    uf.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">unio</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(p, q)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (uf.count </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1166. 设计文件系统</h4><p>你需要设计一个文件系统，你可以创建新的路径并将它们与不同的值关联。</p><p>路径的格式是一个或多个连接在一起的字符串，形式为： <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">/</code> ，后面跟着一个或多个小写英文字母。例如， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot; /leetcode&quot;</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot;/leetcode/problems&quot;</code> 是有效路径，而空字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot;&quot;</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&quot;/&quot;</code> 不是。</p><p>实现 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">FileSystem</code> 类:</p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">bool createPath(string path, int value)</code> 创建一个新的 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">path</code> ，并在可能的情况下关联一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">value</code> ，然后返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">true</code> 。如果路径<strong>已经存在</strong>或其父路径<strong>不存在</strong>，则返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">false</code> 。</li><li> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">int get(string path)</code> 返回与 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">path</code> 关联的值，如果路径不存在则返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-1</code> 。</li></ul><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：
[&quot;FileSystem&quot;,&quot;create&quot;,&quot;get&quot;]
[[],[&quot;/a&quot;,1],[&quot;/a&quot;]]
输出：
[null,true,1]
解释：
FileSystem fileSystem = new FileSystem();
<p>fileSystem.create(“/a”, 1); // 返回 true
fileSystem.get(“/a”); // 返回 1</p>
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：
[&quot;FileSystem&quot;,&quot;createPath&quot;,&quot;createPath&quot;,&quot;get&quot;,&quot;createPath&quot;,&quot;get&quot;]
[[],[&quot;/leet&quot;,1],[&quot;/leet/code&quot;,2],[&quot;/leet/code&quot;],[&quot;/c/d&quot;,1],[&quot;/c&quot;]]
输出：
[null,true,true,2,false,-1]
解释：
FileSystem fileSystem = new FileSystem();
<p>fileSystem.createPath(“/leet”, 1); // 返回 true
fileSystem.createPath(“/leet/code”, 2); // 返回 true
fileSystem.get(“/leet/code”); // 返回 2
fileSystem.createPath(“/c/d”, 1); // 返回 false 因为父路径 “/c” 不存在。
fileSystem.get(“/c”); // 返回 -1 因为该路径不存在。</p>
</pre><p> </p><p><strong>提示：</strong></p><ul><li>对两个函数的调用次数加起来小于等于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">104</code> </li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">2 &lt;= path.length &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= value &lt;= 109</code> </li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> FileSystem</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.map </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">FileSystem</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">createPath</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">path</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(key) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(path)) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(path, value)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">FileSystem</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">path</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(path) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Your FileSystem object will be instantiated and called as such:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var obj = new FileSystem()</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var param_1 = obj.createPath(path,value)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var param_2 = obj.get(path)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div></details><hr><h4>759. 员工空闲时间</h4><p>给定员工的 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">schedule</code> 列表，表示每个员工的工作时间。</p><p>每个员工都有一个非重叠的时间段  <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Intervals</code> 列表，这些时间段已经排好序。</p><p>返回表示 <em>所有 </em>员工的 <strong>共同，正数长度的空闲时间 </strong>的有限时间段的列表，同样需要排好序。</p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
输出：[[3,4]]
解释：
共有 3 个员工，并且所有共同的
空间时间段是 [-inf, 1], [3, 4], [10, inf]。
我们去除所有包含 inf 的时间段，因为它们不是有限的时间段。
</pre><p> </p><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
输出：[[5,6],[7,9]]
</pre><p> </p><p>（尽管我们用 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[x, y]</code> 的形式表示 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Intervals</code> ，内部的对象是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Intervals</code> 而不是列表或数组。例如，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">schedule[0][0].start = 1, schedule[0][0].end = 2</code>，并且 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">schedule[0][0][0]</code> 是未定义的）</p><p>而且，答案中不包含 [5, 5] ，因为长度为 0。</p><p> </p><p><strong>注：</strong></p><ol><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">schedule</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">schedule[i]</code> 为长度范围在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1, 50]</code>的列表。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= schedule[i].start &lt; schedule[i].end &lt;= 10^8</code>。</li></ol><ul><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> employeeFreeTime</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">schedule</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    close</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    events</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> employee </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> schedule) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> iv </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> employee) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      events.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([iv.start, open])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      events.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([iv.end, close])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  events.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    bal </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> events) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    //event[0] = time, event[1] = command</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (bal </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Interval</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(prev, event[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    bal </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> event[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> open </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> event[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h3>1197. 进击的骑士</h3><p>一个坐标可以从 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-infinity</code> 延伸到 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">+infinity</code> 的 <strong>无限大的</strong> 棋盘上，你的 <strong>骑士 </strong>驻扎在坐标为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[0, 0]</code> 的方格里。</p><p>骑士的走法和中国象棋中的马相似，走 “日” 字：即先向左（或右）走 1 格，再向上（或下）走 2 格；或先向左（或右）走 2 格，再向上（或下）走 1 格。</p><p>每次移动，他都可以按图示八个方向之一前进。</p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/knight.png"></p><p>返回 <em>骑士前去征服坐标为 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>[x, y]</em></code><em> 的部落所需的最小移动次数</em> 。本题确保答案是一定存在的。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：x = 2, y = 1
输出：1
解释：[0, 0] → [2, 1]
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：x = 5, y = 5
输出：4
解释：[0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-300 &lt;= x, y &lt;= 300</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= |x| + |y| &lt;= 300</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 双向BFS</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// * 通过 visited 剪枝，因为重走已经访问过的节点，既不会发现新路径，也不会得到更短的路径</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// * 二维 (x, y) 降维成一维 k</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> minKnightMoves</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">y</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> DELTA</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // NOTICE:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // |x| + |y| &lt;= 300  -&gt; |x| &lt;= 300, |y| &lt;= 300</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 虽然终点 (x, y) 满足 |x| &lt;= 300, |y| &lt;= 300</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 但是从终点出发可以往8个方向走，经过的点不一定满足该条件，所以要来留出空间以免哈希碰撞，即 LIMIT * 2</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 测试用例 assert(minKnightMoves(-34, -156), 78)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> LIMIT</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reduceDimension</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">y</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> LIMIT</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> LIMIT</span><span style="color:#D73A49;--shiki-dark:#F97583;"> *</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (y </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> LIMIT</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 先偏移，确保大于等于0，再降维</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    queue2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [[x, y]]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 入队时记录为访问过</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> visited1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduceDimension</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> visited2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduceDimension</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(x, y)])</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 目前走了几步，每层</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> step </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (queue1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (queue1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ;[queue1, queue2, visited1, visited2] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [queue2, queue1, visited2, visited1]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 分层遍历</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prevLevelLength </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (prevLevelLength</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prevI</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prevJ</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> queue1.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">di</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">dj</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> DELTA</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">j</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [prevI </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> di, prevJ </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dj]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reduceDimension</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, j)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (visited1.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(k)) </span><span style="color:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (visited2.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(k)) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> step</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        queue1.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([i, j])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        visited1.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(k)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 分层自增</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    step</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> step</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>666. 路径总和 IV</h4><p>对于一棵深度小于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">5</code> 的树，可以用一组三位十进制整数来表示。对于每个整数：</p><ul><li>百位上的数字表示这个节点的深度 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">d</code>，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= d &lt;= 4</code>。</li><li>十位上的数字表示这个节点在当前层所在的位置 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">P</code>， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= p &lt;= 8</code>。位置编号与一棵满二叉树的位置编号相同。</li><li>个位上的数字表示这个节点的权值 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">v</code>，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= v &lt;= 9</code>。</li></ul><p>给定一个包含三位整数的 <strong>升序 </strong>数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> ，表示一棵深度小于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">5</code> 的二叉树，请你返回 <em>从根到所有叶子结点的路径之和 </em>。</p><p><strong>保证 </strong>给定的数组表示一个有效的连接二叉树。</p><p> </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/04/30/pathsum4-1-tree.jpg"></p><pre class="ql-syntax" spellcheck="false">输入: nums = [113, 215, 221]
输出: 12
解释: 列表所表示的树如上所示。
路径和 = (3 + 5) + (3 + 1) = 12.
</pre><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/04/30/pathsum4-2-tree.jpg"></p><pre class="ql-syntax" spellcheck="false">输入: nums = [113, 221]
输出: 4
解释: 列表所表示的树如上所示。
路径和 = (3 + 1) = 4.
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums.length &lt;= 15</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">110 &lt;= nums[i] &lt;= 489</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> 表示深度小于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">5</code> 的有效二叉树</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> pathSum</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> nodes</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    nodes[index] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">sum</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nodes[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> val</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nodes[i]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      right</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nodes[left] </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nodes[right] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left, sum)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(right, sum)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1868. 两个行程编码数组的积</h4><p><strong>行程编码（Run-length encoding）</strong>是一种压缩算法，能让一个含有许多段<strong>连续重复</strong>数字的整数类型数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> 以一个（通常更小的）二维数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded</code> 表示。每个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded[i] = [vali, freqi]</code> 表示 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> 中第 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">i</code> 段重复数字，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">vali</code> 是该段重复数字，重复了 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">freqi</code> 次。</p><ul><li>例如， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums = [1,1,1,2,2,2,2,2]</code> 可表示称行程编码数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded = [[1,3],[2,5]]</code> 。对此数组的另一种读法是“三个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code> ，后面有五个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">2</code> ”。</li></ul><p>两个行程编码数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2</code> 的积可以按下列步骤计算：</p><ol><li>将 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2</code> 分别<strong>扩展</strong>成完整数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums2</code> 。</li><li>创建一个新的数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">prodNums</code> ，长度为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums1.length</code> 并设 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">prodNums[i] = nums1[i] * nums2[i]</code> 。</li><li>将 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">prodNums</code> <strong>压缩</strong>成一个行程编码数组并返回之。</li></ol><p>给定两个<strong>行程编码</strong>数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2</code> ，分别表示完整数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums2</code> 。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums2</code> 的<strong>长度相同</strong>。 每一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1[i] = [vali, freqi]</code> 表示 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums1</code> 中的第 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">i</code> 段，每一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2[j] = [valj, freqj]</code> 表示 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums2</code> 中的第 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">j</code> 段。</p><p>返回<em> </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2</code> 的<strong>乘积</strong>。</p><p><strong>注：</strong>行程编码数组需压缩成可能的<strong>最小</strong>长度。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: encoded1 = [[1,3],[2,3]], encoded2 = [[6,3],[3,3]]
输出: [[6,6]]
解释n: encoded1 扩展为 [1,1,1,2,2,2] ，encoded2 扩展为 [6,6,6,3,3,3]。
prodNums = [6,6,6,6,6,6]，压缩成行程编码数组 [[6,6]]。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: encoded1 = [[1,3],[2,1],[3,2]], encoded2 = [[2,3],[3,3]]
输出: [[2,3],[6,1],[9,2]]
解释: encoded1 扩展为 [1,1,1,2,3,3] ，encoded2 扩展为 [2,2,2,3,3,3]。
prodNums = [2,2,2,6,9,9]，压缩成行程编码数组 [[2,3],[6,1],[9,2]]。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= encoded1.length, encoded2.length &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2[j].length == 2</code></li><li>对于每一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1[i]</code>， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= vali, freqi &lt;= 104</code>  </li><li>对于每一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2[j]</code>， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= valj, freqj &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">encoded2</code> 表示的完整数组长度相同。</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded1</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findRLEArray</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">encoded1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">encoded2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> point1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    point2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    len2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cur </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded1[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    qty </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (point1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> point2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len2) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 判断是否push入结果</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 如果和之前的积结果不一样，直接push进入res</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 如果和之前的积结果一样，增加数量，暂时不push</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      qty </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([cur, qty])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      qty </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      cur </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 判断哪个指针前进</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      point1</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      point2</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      point2</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      encoded2[point2][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> encoded1[point1][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      point1</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([cur, qty])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>644. 子数组最大平均数 II</h4><p>给你一个包含 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n</code> 个整数的数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> ，和一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 。</p><p>请你找出<strong> 长度大于等于</strong> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 且含最大平均值的连续子数组。并输出这个最大平均值。任何计算误差小于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">10-5</code> 的结果都将被视为正确答案。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [1,12,-5,-6,50,3], k = 4
输出：12.75000
解释：
- 当长度为 4 的时候，连续子数组平均值分别为 [0.5, 12.75, 10.5] ，其中最大平均值是 12.75 。
- 当长度为 5 的时候，连续子数组平均值分别为 [10.4, 10.8] ，其中最大平均值是 10.8 。
- 当长度为 6 的时候，连续子数组平均值分别为 [9.16667] ，其中最大平均值是 9.16667 。
当取长度为 4 的子数组（即，子数组 [12, -5, -6, 50]）的时候，可以得到最大的连续子数组平均值 12.75 ，所以返回 12.75 。
根据题目要求，无需考虑长度小于 4 的子数组。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [5], k = 1
输出：5.00000
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == nums.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= k &lt;= n &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-104 &lt;= nums[i] &lt;= 104</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findMaxAverage</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">nums),</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">nums)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0.00001</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (max </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(mid)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      min </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> check</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">mid</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min_sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      min_sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(min_sum, prev)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> min_sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>267. 回文排列 II</h4><p>给定一个字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> ，返回 <em>其重新排列组合后可能构成的所有回文字符串，并去除重复的组合</em> 。</p><p>你可以按 <strong>任意顺序</strong> 返回答案。如果 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 不能形成任何回文排列时，则返回一个空列表。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入: s = &quot;aabb&quot;
输出: [&quot;abba&quot;, &quot;baab&quot;]
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入: s = &quot;abc&quot;
输出: []
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= s.length &lt;= 16</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 仅由小写英文字母组成</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> generatePalindromes</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[i], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[i]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> singleChar </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (count </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (singleChar </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      singleChar </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (singleChar </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(singleChar, map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(singleChar) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 回溯法拼接回文串</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> walk</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">path</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (path.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(path)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (count </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c, map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      walk</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">c</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c, map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  walk</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(singleChar)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1231. 分享巧克力</h4><p>你有一大块巧克力，它由一些甜度不完全相同的小块组成。我们用数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">sweetness</code> 来表示每一小块的甜度。</p><p>你打算和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">K</code> 名朋友一起分享这块巧克力，所以你需要将切割 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">K</code> 次才能得到 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">K+1</code> 块，每一块都由一些 <strong>连续 </strong>的小块组成。</p><p>为了表现出你的慷慨，你将会吃掉 <strong>总甜度最小</strong> 的一块，并将其余几块分给你的朋友们。</p><p>请找出一个最佳的切割策略，使得你所分得的巧克力 <strong>总甜度最大</strong>，并返回这个 <strong>最大总甜度</strong>。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：sweetness = [1,2,3,4,5,6,7,8,9], K = 5
输出：6
解释：你可以把巧克力分成 [1,2,3], [4,5], [6], [7], [8], [9]。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：sweetness = [5,6,7,8,9,1,2,3,4], K = 8
输出：1
解释：只有一种办法可以把巧克力分成 9 块。
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：sweetness = [1,2,2,1,2,2,1,2,2], K = 2
输出：5
解释：你可以把巧克力分成 [1,2,2], [1,2,2], [1,2,2]。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= K &lt; sweetness.length &lt;= 10^4</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= sweetness[i] &lt;= 10^5</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maximizeSweetness</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">sweetness</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 初始化左右边界。</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // left = 1 并且 right = total 甜度 / number of people.</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> numberOfPeople </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">sweetness)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sweetness.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">y</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> y) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> numberOfPeople)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 获取左右边界之前的中间值索引。</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // cur_sweetness 表示当前人的总甜度。</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // people_with_chocolate 表示有一块巧克力甜度大于等于 mid 的人数。</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> curSweetness </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> peopleWithChocolate </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 开始为当前人分配块。</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> s</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sweetness) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      curSweetness </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 当他的总甜度不小于 mid，说明我们</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 已经结束了对他的分配，继续处理下一个人</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (curSweetness </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        peopleWithChocolate </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        curSweetness </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 检查我们是否成功给了每个人一块甜度不小于 mid 的巧克力</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 并且缩小一半搜索范围。</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (peopleWithChocolate </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> numberOfPeople) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 一旦左右边界相遇，我们找到了目标值</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 就是我们能够得到的最大甜度。</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>251. 展开二维向量</h4><p>请设计并实现一个能够展开二维向量的迭代器。该迭代器需要支持 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">next</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">hasNext</code> 两种操作。</p><p> </p><p><strong>示例：</strong></p><pre class="ql-syntax" spellcheck="false">Vector2D iterator = new Vector2D([[1,2],[3],[4]]);
<p>iterator.next(); // 返回 1
iterator.next(); // 返回 2
iterator.next(); // 返回 3
iterator.hasNext(); // 返回 true
iterator.hasNext(); // 返回 true
iterator.next(); // 返回 4
iterator.hasNext(); // 返回 false</p>
</pre><p> </p><p><strong>注意：</strong></p><ol><li>请记得 <strong>重置 </strong>在 Vector2D 中声明的类变量（静态变量），因为类变量会 <strong>在多个测试用例中保持不变</strong>，影响判题准确。请 <a href="https://support.leetcode-cn.com/hc/kb/section/1071534/" target="_blank">查阅</a> 这里。</li><li>你可以假定 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">next()</code> 的调用总是合法的，即当 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">next()</code> 被调用时，二维向量总是存在至少一个后续元素。</li></ol><ul><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Vector2D</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">vec</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.nums </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> vec) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.nums.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">v)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.position </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Vector2D</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.nums[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.position]</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.position</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Vector2D</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.position </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1522. N 叉树的直径</h4><p>给定一棵 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">N 叉树</code> 的根节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">root</code> ，计算这棵树的直径长度。</p><p>N 叉树的直径指的是树中任意两个节点间路径中<strong> 最长 </strong>路径的长度。这条路径可能经过根节点，也可能不经过根节点。</p><p><em>（N 叉树的输入序列以层序遍历的形式给出，每组子节点用 null 分隔）</em></p><p> </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/07/19/sample_2_1897.png"></p><pre class="ql-syntax" spellcheck="false">输入：root = [1,null,3,2,4,null,5,6]
输出：3
解释：直径如图中红线所示。
</pre><p><strong>示例 2：</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2020/07/19/sample_1_1897.png"></strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [1,null,2,null,3,4,null,5,null,6]
输出：4
</pre><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/07/19/sample_3_1897.png"></p><pre class="ql-syntax" spellcheck="false">输入: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出: 7
</pre><p> </p><p><strong>提示：</strong></p><ul><li>N 叉树的深度小于或等于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1000</code> 。</li><li>节点的总个数在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[0, 10^4]</code> 间。</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * // Definition for a Node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function Node(val, children) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.val = val === undefined ? 0 : val;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.children = children === undefined ? [] : children;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> diameter</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.children.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.children) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(child)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (length </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max1) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        max2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        max1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> length</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (length </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max2) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        max2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> length</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, max1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max2)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max1, max2) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>362. 敲击计数器</h4><p>设计一个敲击计数器，使它可以统计在过去 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">5</code> 分钟内被敲击次数。（即过去 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">300</code> 秒）</p><p>您的系统应该接受一个时间戳参数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestamp</code> (单位为 <strong>秒</strong> )，并且您可以假定对系统的调用是按时间顺序进行的(即 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestamp</code> 是单调递增的)。几次撞击可能同时发生。</p><p>实现 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">HitCounter</code> 类:</p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">HitCounter()</code> 初始化命中计数器系统。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">void hit(int timestamp)</code> 记录在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestamp</code> ( <strong>单位为秒</strong> )发生的一次命中。在同一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestamp</code> 中可能会出现几个点击。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">int getHits(int timestamp)</code> 返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestamp</code> 在过去 5 分钟内(即过去 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">300</code> 秒)的命中次数。</li></ul><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入：
[&quot;HitCounter&quot;, &quot;hit&quot;, &quot;hit&quot;, &quot;hit&quot;, &quot;getHits&quot;, &quot;hit&quot;, &quot;getHits&quot;, &quot;getHits&quot;]
[[], [1], [2], [3], [4], [300], [300], [301]]
输出：
[null, null, null, null, 3, null, 4, 3]
<p>解释：
HitCounter counter = new HitCounter();
counter.hit(1);// 在时刻 1 敲击一次。
counter.hit(2);// 在时刻 2 敲击一次。
counter.hit(3);// 在时刻 3 敲击一次。
counter.getHits(4);// 在时刻 4 统计过去 5 分钟内的敲击次数, 函数返回 3 。
counter.hit(300);// 在时刻 300 敲击一次。
counter.getHits(300); // 在时刻 300 统计过去 5 分钟内的敲击次数，函数返回 4 。
counter.getHits(301); // 在时刻 301 统计过去 5 分钟内的敲击次数，函数返回 3 。</p>
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= timestamp &lt;= 2 * 109</code></li><li>所有对系统的调用都是按时间顺序进行的（即 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">timestamp</code> 是单调递增的）</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">hit</code> and <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">getHits </code>最多被调用 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">300</code> 次</li></ul><p> </p><ul><li><strong>进阶:</strong> 如果每秒的敲击次数是一个很大的数字，你的计数器可以应对吗？</li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> HitCounter</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.a </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">t</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    r </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (l </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (l </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> r) </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (arr[mid] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> t) r </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> l</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> timestamp</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {void}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">HitCounter</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">hit</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">timestamp</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.a.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(timestamp)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> timestamp</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">HitCounter</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getHits</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">timestamp</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.a, timestamp) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.a, timestamp </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Your HitCounter object will be instantiated and called as such:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var obj = new HitCounter()</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * obj.hit(timestamp)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * var param_2 = obj.getHits(timestamp)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span></code></pre></div></details><hr><h4>254. 因子的组合</h4><p>整数可以被看作是其因子的乘积。</p><p>例如：</p><pre class="ql-syntax" spellcheck="false">8 = 2 x 2 x 2;
  = 2 x 4.
</pre><p>请实现一个函数，该函数接收一个整数 <em>n</em> 并返回该整数所有的因子组合。</p><p><strong>注意：</strong></p><ol><li>你可以假定 <em>n</em> 为永远为正数。</li><li>因子必须大于 1 并且小于 <em>n</em>。</li></ol><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入: 1
输出: []
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入: 37
输出: []
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入: 12
输出:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
</pre><p><strong>示例 4:</strong></p><pre class="ql-syntax" spellcheck="false">输入: 32
输出:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]
</pre><ul><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getFactors</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getFactor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">list</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">); i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">list]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (arr[arr.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i) </span><span style="color:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        arr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        arr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">arr])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        arr.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">        getFactor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(arr, x </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  getFactor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([], n)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> res</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1150. 检查一个数是否在数组中占绝大多数</h4><p>给出一个按 <strong>非递减</strong> 顺序排列的数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code>，和一个目标数值 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">target</code>。假如数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> 中绝大多数元素的数值都等于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">target</code>，则返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">True</code>，否则请返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">False</code>。</p><p>所谓占绝大多数，是指在长度为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">N</code> 的数组中出现必须<strong> 超过 </strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><strong>N/2</strong></code> <strong>次</strong>。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [2,4,5,5,5,5,5,6,6], target = 5
输出：true
解释：
数字 5 出现了 5 次，而数组的长度为 9。
所以，5 在数组中占绝大多数，因为 5 次 &gt; 9/2。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [10,100,101,101], target = 101
输出：false
解释：
数字 101 出现了 2 次，而数组的长度是 4。
所以，101 不是 数组占绝大多数的元素，因为 2 次 = 4/2。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums.length &lt;= 1000</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums[i] &lt;= 10^9</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= target &lt;= 10^9</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> isMajorityElement</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">target</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    r </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (l </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((l </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> r) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums[mid] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      r </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      l </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> /</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[l </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> /</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="color:#D73A49;--shiki-dark:#F97583;">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1650. 二叉树的最近公共祖先 III</h4><p>给定一棵二叉树中的两个节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">p</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">q</code>，返回它们的最近公共祖先节点（LCA）。</p><p>每个节点都包含其父节点的引用（指针）。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Node</code> 的定义如下：</p><pre class="ql-syntax" spellcheck="false">class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
</pre><p>根据<a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank">维基百科中对最近公共祖先节点的定义</a>：“两个节点 p 和 q 在二叉树 T 中的最近公共祖先节点是后代节点中既包括 p 又包括 q 的最深节点（我们允许<strong>一个节点为自身的一个后代节点</strong>）”。一个节点 x 的后代节点是节点 x 到某一叶节点间的路径中的节点 y。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
给输出: 3
解释: 节点 5 和 1 的最近公共祖先是 3。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
出输出: 5
解释: 节点 5 和 4 的最近公共祖先是 5，根据定义，一个节点可以是自身的最近公共祖先。
</pre><p><strong>示例 3:</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = [1,2], p = 1, q = 2
输出: 1
</pre><p> </p><p><strong>提示:</strong></p><ul><li>树中节点个数的范围是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[2, 105]</code>。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-109 &lt;= Node.val &lt;= 109</code></li><li>所有的 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Node.val</code> 都是<strong>互不相同</strong>的。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">p != q</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">p</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">q</code> 存在于树中。</li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * // Definition for a Node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function Node(val) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.left = null;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.right = null;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.parent = null;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> lowestCommonAncestor</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">q</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (p </span><span style="color:#D73A49;--shiki-dark:#F97583;">!=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    p </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p.parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p.parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    q </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q.parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q.parent </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1272. 删除区间</h4><p>实数集合可以表示为若干不相交区间的并集，其中每个区间的形式为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[a, b)</code>（左闭右开），表示满足 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">a &lt;= x &lt; b</code> 的所有实数  <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">x</code> 的集合。如果某个区间 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[a, b)</code> 中包含实数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">x</code> ，则称实数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">x</code> 在集合中。</p><p>给你一个 <strong>有序的</strong> 不相交区间列表 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">intervals</code> 。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">intervals</code> 表示一个实数集合，其中每一项 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">intervals[i] = [ai, bi]</code> 都表示一个区间 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[ai, bi)</code> 。再给你一个要删除的区间 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">toBeRemoved</code> 。</p><p>返回 <em>一组实数，该实数表示</em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>intervals</em></code><em> 中 </em><strong><em>删除</em></strong><em> 了 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>toBeRemoved</em></code><em> 的部分</em> 。<em>换句话说，返回实数集合，并满足集合中的每个实数 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>x</em></code><em> 都在 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>intervals</em></code><em> 中，但不在 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>toBeRemoved</em></code><em> 中。你的答案应该是一个如上所述的 </em><strong><em>有序的</em></strong><em> 不相连的间隔列表 。</em></p><p> </p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
给输出：[[0,1],[6,7]]
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：intervals = [[0,5]], toBeRemoved = [2,3]
定输出：[[0,2],[3,5]]
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
输出：[[-5,-4],[-3,-2],[4,5],[8,9]]
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= intervals.length &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-109 &lt;= ai &lt; bi &lt;= 109</code></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> toBeRemoved</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> removeInterval</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">intervals</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">toBeRemoved</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> toBeRemoved</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">intervals.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findLeft</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">target</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // if (target &lt;= intervals[0][1]) return 0</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // if (target &gt;= intervals.at(-1)) return intervals.length - 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // if (left === right) return left</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // console.log(1111, left, right)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // if (intervals[mid][0] === target) return mid</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals[mid][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (intervals[mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]?.[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findRight</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">target</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // if (target &lt;= intervals[0][1]) return 0</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // if (target &gt;= intervals.at(-1)) return intervals.length - 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // if (left === right) return left</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // console.log(1111, left, right)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // if (intervals[mid][0] === target) return mid</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals[mid][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (target </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (intervals[mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]?.[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findLeft</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findRight</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(end)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftPart </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightPart </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (intervals[left][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    leftPart </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [intervals[left][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (intervals[right][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    rightPart </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [end, intervals[right][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  intervals.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left, right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (rightPart) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    intervals.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, rightPart)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (leftPart) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    intervals.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, leftPart)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> intervals</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>339. 嵌套列表加权和</h4><p>给定一个嵌套的整数列表 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nestedList</code> ，每个元素要么是整数，要么是列表。同时，列表中元素同样也可以是整数或者是另一个列表。</p><p>整数的 <strong>深度</strong> 是其在列表内部的嵌套层数。例如，嵌套列表 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1,[2,2],[[3],2],1]</code> 中每个整数的值就是其深度。</p><p>请返回该列表按深度加权后所有整数的总和。</p><p> </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/14/nestedlistweightsumex1.png"></p><pre class="ql-syntax" spellcheck="false">输入：nestedList = [[1,1],2,[1,1]]
输出：10
解释：因为列表中有四个深度为 2 的 1 ，和一个深度为 1 的 2。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nestedList = [1,[4,[6]]]
实输出：27
解释：一个深度为 1 的 1，一个深度为 2 的 4，一个深度为 3 的 6。所以，1 + 4*2 + 6*3 = 27。
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nestedList = [0]
输出：0
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nestedList.length &lt;= 50</code></li><li>嵌套列表中整数的值在范围 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[-100, 100]</code> 内</li><li>任何整数的最大 <strong>深度</strong> 都小于或等于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">50</code></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {NestedInteger[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nestedList</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> depthSum</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nestedList</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">xs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">depth</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> xs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">isInteger</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> xs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getInteger</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> depth</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      :</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> xs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getList</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">prev</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">cur</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cur, depth </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nestedList.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">prev</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">cur</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prev </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> helper</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(cur, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>439. 三元表达式解析器</h4><p>给定一个表示任意嵌套三元表达式的字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">expression</code> ，求值并返回其结果。</p><p>你可以总是假设给定的表达式是有效的，并且只包含数字， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;?&#39;</code> ，  <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;:&#39;</code> ，  <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;T&#39;</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;F&#39;</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;T&#39;</code> 为真， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;F&#39;</code> 为假。表达式中的所有数字都是 <strong>一位</strong> 数(即在 <strong>[0,9] </strong>范围内)。</p><p>条件表达式从右到左分组(大多数语言中都是这样)，表达式的结果总是为数字 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;T&#39;</code> 或 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;F&#39;</code> 。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入： expression = &quot;T?2:3&quot;
输出： &quot;2&quot;
解释： 如果条件为真，结果为 2；否则，结果为 3。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入： expression = &quot;F?1:T?4:5&quot;
输出： &quot;4&quot;
解释： 条件表达式自右向左结合。使用括号的话，相当于：
 &quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(F ? 1 : 4)&quot; --&gt; &quot;4&quot;
or &quot;(F ? 1 : (T ? 4 : 5))&quot; --&gt; &quot;(T ? 4 : 5)&quot; --&gt; &quot;4&quot;
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入： expression = &quot;T?T?F:5:3&quot;
输出： &quot;F&quot;
解释： 条件表达式自右向左结合。使用括号的话，相当于：
&quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 3)&quot; --&gt; &quot;F&quot;
&quot;(T ? (T ? F : 5) : 3)&quot; --&gt; &quot;(T ? F : 5)&quot; --&gt; &quot;F&quot;
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">5 &lt;= expression.length &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">expression</code> 由数字, <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;T&#39;</code>, <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;F&#39;</code>, <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;?&#39;</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;:&#39;</code> 组成</li><li><strong>保证 </strong>了表达式是一个有效的三元表达式，并且每个数字都是 <strong>一位数</strong> </li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> expression</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> parseTernary</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">expression</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> stack</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> expression.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(expression[i])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;?&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 注意要逆序入栈，遇到问号就去求解并且将结果继续入栈</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> condition</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(condition </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;T&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>490. 迷宫</h4><p><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">由空地（用 </span><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> 表示）和墙（用 </span><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> 表示）组成的迷宫 </span><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">maze</code><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> 中有一个球。球可以途经空地向</span><strong style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);"> 上、下、左、右 </strong><span style="background-color:rgb(240, 240, 240);font-size:14px;color:rgb(38, 38, 38);">四个方向滚动，且在遇到墙壁前不会停止滚动。当球停下时，可以选择向下一个方向滚动。</span></p><p>给你一个大小为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m x n</code> 的迷宫 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">maze</code> ，以及球的初始位置 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">start</code> 和目的地 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">destination</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">start = [startrow, startcol]</code> 且 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">destination = [destinationrow, destinationcol]</code> 。请你判断球能否在目的地停下：如果可以，返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">true</code> ；否则，返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">false</code> 。</p><p>你可以 <strong>假定迷宫的边缘都是墙壁</strong>（参考示例）。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
给输出：true
解释：一种可能的路径是 : 左 -&gt; 下 -&gt; 左 -&gt; 下 -&gt; 右 -&gt; 下 -&gt; 右。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
定输出：false
解释：不存在能够使球停在目的地的路径。注意，球可以经过目的地，但无法在那里停驻。
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
输出：false
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">m == maze.length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">n == maze[i].length</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= m, n &lt;= 100</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">maze[i][j]</code> is <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> or <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code>.</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">start.length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">destination.length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= startrow, destinationrow &lt;= m</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= startcol, destinationcol &lt;= n</code></li><li>球和目的地都在空地上，且初始时它们不在同一位置</li><li>迷宫 <strong>至少包括 2 块空地</strong></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> hasPath</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">maze</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">start</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">destination</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> row</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maze.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> col</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maze[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="color:#6A737D;--shiki-dark:#6A737D;">//记录从上一格走到下一格的路径</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">j</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">lastI</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">lastJ</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (set.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(lastI </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> lastJ </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j)) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //不允许重复的走 从上一格到下一格;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">nextI</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">nextJ</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> lastI), j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> lastJ)] </span><span style="color:#6A737D;--shiki-dark:#6A737D;">//确定沿着同一个方向走到下一个格子</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    set.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(lastI </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> lastJ </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nextI </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nextJ </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nextI </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nextJ </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> col </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maze[nextI][nextJ] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //如果下一格出界或撞墙</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> destination[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> destination[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> //如果这次格子刚好是目标格子 直接true 结束递归;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      //否则如果垂直方向上有空格 就沿着垂直方向继续行走;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nextI </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        //nextI === i 说明上一步不是上下方向,这次就走上下方向</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maze[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">||=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j, i, j)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maze[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">||=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j, i, j)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        //同理</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (maze[i][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">||=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, i, j)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (maze[i][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) flag </span><span style="color:#D73A49;--shiki-dark:#F97583;">||=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, i, j)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nextI, nextJ, i, j) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">//如果下一格没有出界或撞墙, 就继续沿同一个方向走</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  //初始分别从4个方向走</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], start[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1055. 形成字符串的最短路径</h4><p>对于任何字符串，我们可以通过删除其中一些字符（也可能不删除）来构造该字符串的 <strong>子序列</strong> 。(例如，<code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">“ace”</code> 是 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">“abcde”</code> 的子序列，而 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">“aec”</code> 不是)。</p><p>给定源字符串 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">source</code> 和目标字符串 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">target</code>，返回 <em>源字符串 </em><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);"><em>source</em></code><em> 中能通过串联形成目标字符串 </em><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">target</code> <em>的 </em><strong><em>子序列</em></strong><em> 的最小数量 </em>。如果无法通过串联源字符串中的子序列来构造目标字符串，则返回 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">-1</code>。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：source = &quot;abc&quot;, target = &quot;abcbc&quot;
输出：2
解释：目标字符串 &quot;abcbc&quot; 可以由 &quot;abc&quot; 和 &quot;bc&quot; 形成，它们都是源字符串 &quot;abc&quot; 的子序列。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：source = &quot;abc&quot;, target = &quot;acdbc&quot;
输出：-1
解释：由于目标字符串中包含字符 &quot;d&quot;，所以无法由源字符串的子序列构建目标字符串。
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：source = &quot;xyz&quot;, target = &quot;xzyxz&quot;
输出：3
解释：目标字符串可以按如下方式构建： &quot;xz&quot; + &quot;y&quot; + &quot;xz&quot;。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">1 &lt;= source.length, target.length &lt;= 1000</code></li><li><code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">source</code> 和 <code style="background-color:rgba(0, 10, 32, 0.03);color:rgba(38, 38, 38, 0.75);">target</code> 仅包含英文小写字母。</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> source</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> shortestWay</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">source</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">target</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> jj </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> source.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (source[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target[j]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> jj) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1100. 长度为 K 的无重复字符子串</h4><p>给你一个字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">S</code>，找出所有长度为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">K</code> 且不含重复字符的子串，请你返回全部满足要求的子串的 <strong>数目</strong>。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：S = &quot;havefunonleetcode&quot;, K = 5
输出：6
解释：
这里有 6 个满足题意的子串，分别是：&#39;havef&#39;,&#39;avefu&#39;,&#39;vefun&#39;,&#39;efuno&#39;,&#39;etcod&#39;,&#39;tcode&#39;。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：S = &quot;home&quot;, K = 5
输出：0
解释：
注意：K 可能会大于 S 的长度。在这种情况下，就无法找到任何长度为 K 的子串。
</pre><p> </p><p><strong>提示：</strong></p><ol><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= S.length &lt;= 10^4</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">S</code> 中的所有字符均为小写英文字母</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= K &lt;= 10^4</code></li></ol><ul><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> numKLenSubstrNoRepeats</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 26</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> hassame </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s[i]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      hassame </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map[c]</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map[c] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">hassame) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    map[s[left]]</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map[s[left]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      delete</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map[s[left]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[right] </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map[s[right]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map[s[right]]</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (Object.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(map).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">every</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">v</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> v </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    left</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>314. 二叉树的垂直遍历</h4><p>给你一个二叉树的根结点，返回其结点按 <strong>垂直方向</strong>（从上到下，逐列）遍历的结果。</p><p>如果两个结点在同一行和列，那么顺序则为 <strong>从左到右</strong>。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [3,9,20,null,null,15,7]
给输出：[[9],[3,15],[20],[7]]
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [3,9,8,4,0,1,7]
你输出：[[4],[9],[3,0,1],[8],[7]]
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [3,9,8,4,0,1,7,null,null,null,2,5]
一输出：[[4],[9,5],[3,0,1],[8,2],[7]]
</pre><p> </p><p><strong>提示：</strong></p><ul><li>树中结点的数目在范围 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[0, 100]</code> 内</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-100 &lt;= Node.val &lt;= 100</code></li></ul><details><summary>anwser</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[][]}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> verticalOrder</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> nodes</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> minx </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">y</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    minx </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(x, minx)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    nodes.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node, [x, y])</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.left, x </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, y </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.right, x </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, y </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nodes) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> minx</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result[index] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result[index][y] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    result[index][y].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.val)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> result.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(map).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">flat</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>487. 最大连续1的个数 II</h4><p>给定一个二进制数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> ，如果最多可以翻转一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> ，则返回数组中连续 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code> 的最大个数。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [1,0,1,1,0]
输出：4
解释：翻转第一个 0 可以得到最长的连续 1。
     当翻转以后，最大连续 1 的个数为 4。
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [1,0,1,1,0,1]
输出：4
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums.length &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums[i]</code> 不是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0</code> 就是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code>.</li></ul><p> </p><ul><li><strong>进阶：</strong>如果输入的数字是作为<strong> 无限流 </strong>逐个输入如何处理？换句话说，内存不能存储下所有从流中输入的数字。您可以有效地解决吗？</li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 滑动窗口，不过只允许里面最多有一个0</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findMaxConsecutiveOnes</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> zeroindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums[right] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (zeroindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      zeroindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> zeroindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      zeroindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1644. 二叉树的最近公共祖先 II</h4><p>给定一棵二叉树的根节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>root</span></code>，返回给定节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>p</span></code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>q</span></code> 的最近公共祖先（LCA）节点。如果 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>p</span></code> 或 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>q</span></code> 之一<strong> 不存在</strong> 于该二叉树中，返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>null</span></code>。树中的每个节点值都是互不相同的。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p>根据<a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank"><span>维基百科中对最近公共祖先节点的定义</span></a>：“两个节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>p</span></code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>q</span></code> 在二叉树 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>T</span></code> 中的最近公共祖先节点是<strong> 后代节点 </strong>中既包括 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>p</span></code> 又包括 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>q</span></code> 的最深节点（我们允许<strong> 一个节点为自身的一个后代节点 </strong>）”。一个节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>x</span></code> 的<strong> 后代节点 </strong>是节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>x</span></code> 到某一叶节点间的路径中的节点 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>y</span></code>。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p><strong>示例 1:</strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><pre class="ql-syntax" spellcheck="false">输入： root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</pre><pre class="ql-syntax" spellcheck="false">给输出： 3</pre><pre class="ql-syntax" spellcheck="false">解释： 节点 5 和 1 的共同祖先节点是 3。</pre><p><strong>示例 2:</strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><pre class="ql-syntax" spellcheck="false">输入： root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</pre><pre class="ql-syntax" spellcheck="false">输出： 5</pre><pre class="ql-syntax" spellcheck="false">解释： 节点 5 和 4 的共同祖先节点是 5。根据共同祖先节点的定义，一个节点可以是自身的后代节点。</pre><p><strong>示例 3:</strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><pre class="ql-syntax" spellcheck="false">输入： root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10</pre><pre class="ql-syntax" spellcheck="false">输出： null</pre><pre class="ql-syntax" spellcheck="false">解释： 节点 10 不存在于树中，所以返回 null。</pre><p> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p><strong>提示:</strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><ul><li>树中节点个数的范围是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>[1, 104]</span></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></li></ul><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>-109 &lt;= Node.val &lt;= 109</span></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></li></ul><ul><li>所有节点的值 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>Node.val</span></code> <strong>互不相同</strong><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></li></ul><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><span>p != q</span></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></li></ul><p> <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> lowestCommonAncestor</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">q</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root, p, q)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">q</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">root) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> flag1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root.left, p, q)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> flag2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dfs</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root.right, p, q)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> flag3</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> q</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (flag1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag3 </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) ans </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag1 </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag2 </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> flag3</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>1060. 有序数组中的缺失元素</h4><p>现有一个按 <strong>升序</strong> 排列的整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> ，其中每个数字都 <strong>互不相同</strong> 。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p>给你一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> ，请你找出并返回从数组最左边开始的第 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> 个缺失数字。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [4,7,9,10], k = 1
输出：5
解释：第一个缺失数字为 5 。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [4,7,9,10], k = 3
输出：8
解释：缺失数字有 [5,6,8,...]，因此第三个缺失数字为 8 。
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：nums = [1,2,4], k = 3
输出：6
解释：缺失数字有 [3,5,6,7,...]，因此第三个缺失数字为 6 。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums.length &lt;= 5 * 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= nums[i] &lt;= 107</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">nums</code> 按 <strong>升序</strong> 排列，其中所有元素 <strong>互不相同</strong> 。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= k &lt;= 108</code></li></ul><p> </p><p><strong>进阶：</strong>你可以设计一个对数时间复杂度（即，<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">O(log(n))</code>）的解决方案吗？<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number[]}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 二分查找，但是二分查找的是当前缺失的数字的数目</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> missingElement</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmisscount</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">index</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[index] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> index</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 表示缺失的数字就在nums[target]和nums[target+1]之间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((left </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> misscount</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmisscount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(mid)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (misscount </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 注意等于时，这个例子 [6,7,10,11,19,21,23] k=2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      target </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[target] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmisscount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(target))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>426. 将二叉搜索树转化为排序的双向链表</h4><p>将一个 <strong>二叉搜索树</strong> 就地转化为一个 <strong>已排序的双向循环链表</strong> 。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p>对于双向循环列表，你可以将左右孩子指针作为双向循环链表的前驱和后继指针，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p><p>特别地，我们希望可以 <strong>就地</strong> 完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中最小元素的指针。</p><p> </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [4,2,5,1,3]
<p>现输出：[1,2,3,4,5]</p>
<p>解释：下图显示了转化后的二叉搜索树，实线表示后继关系，虚线表示前驱关系。</p>
</pre><p>有<strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [2,1,3]
输出：[1,2,3]
</pre><p><strong>示例 3：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = []
输出：[]
解释：输入是空树，所以输出也是空链表。
</pre><p><strong>示例 4：</strong></p><pre class="ql-syntax" spellcheck="false">输入：root = [1]
输出：[1]
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-1000 &lt;= Node.val &lt;= 1000</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Node.left.val &lt; Node.val &lt; Node.right.val</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Node.val</code> 的所有值都是独一无二的</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= Number of Nodes &lt;= 2000</code></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maximumAverageSubtree</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maxmean </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmean</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // console.log(node.val, max)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">leftsum</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">leftcount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmean</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.left)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">rightsum</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">rightcount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmean</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.right)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftsum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightsum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.val</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftcount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightcount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    maxmean </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(maxmean, sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [sum, count]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  getmean</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maxmean</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>428. 序列化和反序列化 N 叉树</h4><p>序列化是指将一个数据结构转化为位序列的过程，因此可以将其存储在文件中或内存缓冲区中，以便稍后在相同或不同的计算机环境中恢复结构。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p>设计一个序列化和反序列化 N 叉树的算法。一个 N 叉树是指每个节点都有不超过 N 个孩子节点的有根树。序列化 / 反序列化算法的算法实现没有限制。你只需要保证 N 叉树可以被序列化为一个字符串并且该字符串可以被反序列化成原树结构即可。</p><p>例如，你需要序列化下面的 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">3-叉</code> 树。</p><p> </p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"></p><p> </p><p>为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1 [3[5 6] 2 4]]</code>。你不需要以这种形式完成，你可以自己创造和实现不同的方法。</p><p>或者，您可以遵循 LeetCode 的层序遍历序列化格式，其中每组孩子节点由空值分隔。</p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"></p><p>例如，上面的树可以序列化为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]</code></p><p>你不一定要遵循以上建议的格式，有很多不同的格式，所以请发挥创造力，想出不同的方法来完成本题。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
输出: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = [1,null,3,2,4,null,5,6]
输出: [1,null,3,2,4,null,5,6]
</pre><p><strong>示例 3:</strong></p><pre class="ql-syntax" spellcheck="false">输入: root = []
输出: []
</pre><p> </p><p><strong>提示：</strong></p><ul><li>树中节点数目的范围是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[0, 104]</code>.</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= Node.val &lt;= 104</code></li><li>N 叉树的高度小于等于 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1000</code></li><li>不要使用类成员 / 全局变量 / 静态变量来存储状态。你的序列化和反序列化算法应是无状态的。</li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * // Definition for a Node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function Node(val, children) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *    this.children = children;</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * };</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Codec</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">   * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node|null}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">   * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // Encodes a tree to a single string.</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  serialize</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> encode</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">node.children.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> str</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> children</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.children.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        children.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.children[i]))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">str</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}(\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">children</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">})\`</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> encode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">   * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> data</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">   * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {Node|null}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // Decodes your encoded data to tree.</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  deserialize</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">data) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> parentmap</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> stack</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> data.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (data[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (data[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        parentmap[stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findcomma</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">start</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> commaindexlist </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 表示分割每个子节点的逗号的位置</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (start </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftparentindex</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> commaindex</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (commaindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftparentindex) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">            break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (data[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">leftparentindex) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            leftparentindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (data[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;,&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">commaindex) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            commaindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (leftparentindex) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          commaindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> parentmap[leftparentindex] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (commaindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> commaindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 我们只统计逗号的位置</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          commaindexlist.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(commaindex)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          start </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> commaindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> commaindexlist</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> decode</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">start</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 下面按照 1(2(3,4,5),6(7),8,9(10,11)) 举例</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftparentindex </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 表示1后面那个左括号的位置</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> end; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (data[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          num </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> data[i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          leftparentindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> node</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, [])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">leftparentindex) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 表示当前区间只有数字，也就是叶子节点</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 表示2后面那个左括号的位置，这个左括号可能是不存在的，如果存在，那么逗号的位置就在其对应的右括号的下一个</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> firstleftparentindex</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> commaindexklist</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findcomma</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(leftparentindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, end)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> children</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftparentindex </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> comma</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> commaindexklist) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        children.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left, comma </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> comma </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      children.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left, end </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      node.children </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> children</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> decode</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, data.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// Your Codec object will be instantiated and called as such:</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// Codec codec = new Codec();</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// codec.deserialize(codec.serialize(root));</span></span></code></pre></div></details><hr><h4>549. 二叉树最长连续序列 II</h4><p>给定二叉树的根 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">root</code> ，返回树中<strong>最长连续路径</strong>的长度。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p><strong>连续路径</strong>是路径中相邻节点的值相差 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1</code> 的路径。此路径可以是增加或减少。</p><ul><li>例如， <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1,2,3,4]</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[4,3,2,1]</code> 都被认为有效，但路径 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1,2,4,3]</code> 无效。</li></ul><p>另一方面，路径可以是子-父-子顺序，不一定是父子顺序。</p><p> </p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/14/consec2-1-tree.jpg"></p><pre class="ql-syntax" spellcheck="false">输入: root = [1,2,3]
输出: 2
解释: 最长的连续路径是 [1, 2] 或者 [2, 1]。
</pre><p> </p><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/14/consec2-2-tree.jpg"></p><pre class="ql-syntax" spellcheck="false">输入: root = [2,1,3]
输出: 3
解释: 最长的连续路径是 [1, 2, 3] 或者 [3, 2, 1]。
</pre><p> </p><p><strong>提示：</strong></p><ul><li>树上所有节点的值都在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">[1, 3 * 104]</code> 范围内。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-3 * 104 &lt;= Node.val &lt;= 3 * 104</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {TreeNode}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> longestConsecutive</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">root</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmaxlen</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">node</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftincmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftdecmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightincmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightdecmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.left) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">leftinclen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">leftdeclen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmaxlen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.left)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.left.val) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        leftincmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(leftincmaxlen, leftinclen </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.left.val) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        leftdecmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(leftdecmaxlen, leftdeclen </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.right) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">rightinclen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">rightdeclen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getmaxlen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(node.right)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.right.val) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        rightincmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(rightincmaxlen, rightinclen </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (node.val </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> node.right.val) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        rightdecmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(rightdecmaxlen, rightdeclen </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    maxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      maxlen,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      leftincmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightdecmaxlen,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      leftdecmaxlen </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightincmaxlen</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(leftincmaxlen, rightincmaxlen), Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(leftdecmaxlen, rightdecmaxlen)]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  getmaxlen</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> maxlen</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>651. 四个键的键盘</h4><p>假设你有一个特殊的键盘包含下面的按键：<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">A</code>：在屏幕上打印一个 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">&#39;A&#39;</code>。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Ctrl-A</code>：选中整个屏幕。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Ctrl-C</code>：复制选中区域到缓冲区。</li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">Ctrl-V</code>：将缓冲区内容输出到上次输入的结束位置，并显示在屏幕上。</li></ul><p>现在，<em>你可以 </em><strong><em>最多</em></strong><em> 按键 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>n</em></code><em> 次（使用上述四种按键），返回屏幕上最多可以显示 </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>&#39;A&#39;</em></code><em> 的个数 </em>。</p><p> </p><p><strong>示例 1:</strong></p><pre class="ql-syntax" spellcheck="false">输入: n = 3
输出: 3
解释:
我们最多可以在屏幕上显示三个&#39;A&#39;通过如下顺序按键：
A, A, A
</pre><p><strong>示例 2:</strong></p><pre class="ql-syntax" spellcheck="false">输入: n = 7
输出: 9
解释:
我们最多可以在屏幕上显示九个&#39;A&#39;通过如下顺序按键：
A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
</pre><p> </p><p><strong>提示:</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= n &lt;= 50</code></li><li><br></li></ul><details><summary>anwser</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * 动态规划</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 可以这样考虑，最后一次操作肯定是按下A或者粘贴操作</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 如果是按下A，那么就是上一次的数量+1；</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 但是只能前几次依靠按下A来增加数量，后面肯定是一直复制粘贴才是最快增长的</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 考虑最后一次操作是V，那么再前面有可能是A+C，或者是A+C+V</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 即：ACV，ACVV，ACVVV，ACVVVV等</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 实际我们只需要比较前三种情况即可，因为AC占用两次机会，一直粘贴较早的结果那是累加，但是一直ACV的话那是2的指数增长</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 显然我们要追求指数增长</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maxA</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">n</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ACV</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ACVV</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // ACVVV</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[n </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>340. 至多包含 K 个不同字符的最长子串</h4><p>给你一个字符串 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">s</code> 和一个整数 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">k</code> ，请你找出 <strong>至多 </strong>包含<em> </em><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"><em>k</em></code> 个 <strong>不同</strong> 字符的最长<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p>子串</p><p>，并返回该子串的长度。 </p><p><strong>示例 1：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;eceba&quot;, k = 2
输出：3
解释：满足题目要求的子串是 &quot;ece&quot; ，长度为 3 。
</pre><p><strong>示例 2：</strong></p><pre class="ql-syntax" spellcheck="false">输入：s = &quot;aa&quot;, k = 1
输出：2
解释：满足题目要求的子串是 &quot;aa&quot; ，长度为 2 。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= s.length &lt;= 5 * 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">0 &lt;= k &lt;= 50</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@param</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="color:#D73A49;--shiki-dark:#F97583;">@return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> {number}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 滑动窗口</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> 用哈希表来记录窗口内不同字符以及对应的数量</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> lengthOfLongestSubstringKDistinct</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map.size </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 窗口合法，右指针继续移动</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[r], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[r]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 不合法，窗口收缩</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> l</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l], (map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l])) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 没有s[l]这个字符了，从哈希表删除</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        map.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(s[l])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (map.size </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 如果窗口合法，记录可能的最大值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, right </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr><h4>2548. 填满背包的最大价格</h4><p>给定一个二维整数数组 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">items</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">items[i] = [pricei, weighti]</code> 表示第 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">i</code> 个物品的价格和重量。<code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);"></code></p><p>还给定一个 <strong>正</strong> 整数容量 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">capacity</code> 。</p><p>每个物品可以分成两个部分，比率为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">part1</code> 和 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">part2</code> ，其中 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">part1 + part2 == 1</code> 。</p><ul><li>第一个物品的重量是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">weighti * part1</code> ，价格是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">pricei * part1</code> 。</li><li>同样，第二个物品的重量是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">weighti * part2</code> ，价格是 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">pricei * part2</code> 。</li></ul><p>使用给定的物品，返回填满容量为 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">capacity</code> 的背包所需的 <strong>最大总价格</strong> 。如果无法填满背包，则返回 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">-1</code> 。与实际答案的差距在 <code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">10-5</code> 以内的 <strong>实际答案</strong> 将被视为接受。</p><p> </p><p><strong>示例 1 ：</strong></p><pre class="ql-syntax" spellcheck="false">输入：items = [[50,1],[10,8]], capacity = 5
输出：55.00000
解释：
我们将第二个物品分成两个部分，part1 = 0.5，part2 = 0.5。
第一个物品的价格和重量分别为 5 和 4 。同样地，第二个物品的价格和重量也是 5 和 4 。
经过操作后，数组 items 变为 [[50,1],[5,4],[5,4]] 。
为了填满容量为 5 的背包，我们取价格为 50 的第一个元素和价格为 5 的第二个元素。
可以证明，55.0 是我们可以达到的最大总价值。
</pre><p><strong>示例 2 ：</strong></p><pre class="ql-syntax" spellcheck="false">输入：items = [[100,30]], capacity = 50
输出：-1.00000
解释：无法用给定的物品装满背包。
</pre><p> </p><p><strong>提示：</strong></p><ul><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= items.length &lt;= 105</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">items[i].length == 2</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= pricei, weighti &lt;= 104</code></li><li><code style="color:rgba(38, 38, 38, 0.75);background-color:rgba(0, 10, 32, 0.03);">1 &lt;= capacity &lt;= 109</code></li><li><br></li></ul><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maxPrice</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">items</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">capacity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  items.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> items[i]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> capacity) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (p </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> capacity) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    price </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> p</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    capacity </span><span style="color:#D73A49;--shiki-dark:#F97583;">-=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><hr>`,852),p=[r],E={__name:"leetcode-plus",setup(i,{expose:s}){return s({frontmatter:{}}),(k,c)=>(a(),n("div",o,p))}};export{E as default};
