import{o as a,c as n,J as l}from"./vendor-qbV36AJH.js";const p={class:"markdown-body"},i=l(`<h2>Promise 的 polyfill 实现</h2><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> resolveValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  try</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> then </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value.then </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// thenable只能读取一次并且需要捕获可能的错误</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> then </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> called </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 所有的回调只能调用一次</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  try</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    then.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      value,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">called) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          called </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          resolveValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(val, resolve, reject) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 需要递归resolve，因为可能多次返回thenable</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">called) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          called </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(reason) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// reject就直接调用即可</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    called </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#D73A49;--shiki-dark:#F97583;"> instanceof</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Promise cannot be invoked without &quot;new&quot;.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> callback </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Promise callback is not a function.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  ;[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._status, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._value] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;pending&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._callbacks </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { resolved: [], rejected: [] }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> fulfill</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">status</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._status </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;pending&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 状态只能变更一次</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ;[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._status, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._value] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [status, value]</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._callbacks[status].</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> cb</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(value))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  try</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 不能返回自身</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          fulfill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;rejected&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#D73A49;--shiki-dark:#F97583;">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Can not resolve or return the current promise.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          resolveValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            value,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">              fulfill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;resolved&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">              fulfill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;rejected&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, reason)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">        fulfill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;rejected&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, reason) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// reject 直接返回值</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="color:#D73A49;--shiki-dark:#F97583;">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    fulfill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;rejected&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">onResolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">onReject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> promise</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleCallback</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">resolved</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // then的回调需要在新的事件循环中执行</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> callback</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> resolved </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> onResolve </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> onReject</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> callback </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (resolved </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> resolve </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> reject)(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._value)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        try</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._value)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (promise </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 返回的值不能是promise本身(TypeError: Chaining cycle detected for promise)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Can not resolve or return the current promise.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          resolveValue</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(val, resolve, reject)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._status </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;pending&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._callbacks.resolved.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleCallback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._callbacks.rejected.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleCallback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      handleCallback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">._status </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;resolved&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> promise</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><hr><p>以上是对<code>Promise</code>的简单实现，实际上 Promise/A+规范只要求实例对象必须要有 then 方法，ES 规范中还规定了一些静态和实例方法，这些都可以依赖 Promise 核心来实现</p><ul><li><p><code>Promise.prototype.catch</code></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">onReject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, onReject)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></li><li><p><code>Promise.prototype.finally</code></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">finally</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></li><li><p><code>Promise.resolve</code> &amp; <code>Promise.reject</code></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="color:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(val))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">_</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(reason))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></li><li><p><code>Promise.all</code></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> all</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">values</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 实际上这里的values只要是可迭代对象就可以，这里简化了判断，其他方法也一样</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">Array.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(values)) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="color:#D73A49;--shiki-dark:#F97583;"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> TypeError</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Promise.all only accepts iterable value.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> resolvedValues</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> taskCount</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> values.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> resolvedCount</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (resolvedCount </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> taskCount) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(resolvedValues)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> taskCount; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF;">      Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(values[i]).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">val</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        resolvedValues[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        resolvedCount</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (resolvedCount </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> taskCount) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(resolvedValues)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }, reject)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled" target="_blank" rel="noopener"><code>Promise.allSettled</code></a>，等待所有 promise 结束，返回一个结果数组</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">;[</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    status: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;fulfilled&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    value: any,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    status: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;rejected&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    reason: any,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener"><code>Promise.race</code></a>，谁先结束就返回谁</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any" target="_blank" rel="noopener"><code>Promise.any</code></a>，和<code>Promise.all</code>在功能上是相反的，会尝试返回第一个成功的 promise，如果都失败那就以<code>AggregateError</code>来 reject</p></li></ul>`,5),r=[i],t={__name:"promise-polyfill",setup(o,{expose:s}){return s({frontmatter:{}}),(e,E)=>(a(),n("div",p,r))}};export{t as default};
