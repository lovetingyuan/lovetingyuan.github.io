import{o,c as e,p as a}from"./index-170ce2c4.js";const p={class:"markdown-body"},l=a(`<h3>千分位分隔符</h3><p>一串数字，使用千分位分隔符分隔开 如 100000 -&gt; 100,000</p><p>10000000 -&gt; 10,000,000</p><p>最简单的方式是使用正则表达式来实现，从末尾开始向前，每三个数字就插入一个分隔符</p><p><code>/(\\d{3})+$/</code></p><p>这样会匹配末尾之前三的整数倍的数字</p><blockquote><p>关于正则量词可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers</a></p></blockquote><p>但实际我们要匹配的是三个数字之前的那个空白位置，分隔符需要被插入到该位置。这时需要用到前向断言<code>x(?=y)</code>，这个正则会匹配 x 但是要求 x 后面必须跟着 y，<code>(?=(\\d{3}))</code>这样会匹配一个空白位置，后面跟着三个数字，这样正则变成了 <code>(?=(\\d{3})+$)</code></p><blockquote><p>关于正则断言可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions</a></p></blockquote><p>接下来需要处理开头的特殊情况，不处理的话如果数字恰好是三的整数倍，那么开头也会被插入分隔符 我们只需要不匹配开头即可，<code>/(?=(\\B\\d{3})+$)/g</code>，这里的元字符<code>\\B</code>表示非单词边界，宽度为 0</p><blockquote><p>关于正则元字符可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes</a></p></blockquote><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;10000000000&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;"> = </span><span style="color:#D16969;">/</span><span style="color:#CE9178;">(?=(</span><span style="color:#DCDCAA;">\\B</span><span style="color:#D16969;">\\d</span><span style="color:#D7BA7D;">{3}</span><span style="color:#CE9178;">)</span><span style="color:#D7BA7D;">+</span><span style="color:#DCDCAA;">$</span><span style="color:#CE9178;">)</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">g</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">str</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;,&#39;</span><span style="color:#D4D4D4;">)) </span><span style="color:#6A9955;">// 10,000,000,000</span></span>
<span class="line"></span></code></pre>`,12),n=[l],i={__name:"千分位分隔符",setup(r,{expose:s}){return s({frontmatter:{}}),(c,D)=>(o(),e("div",p,n))}};export{i as default};
