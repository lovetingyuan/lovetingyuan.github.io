import{o as a,c as n,L as p}from"./vendor-CQk5JuTp.js";const l={class:"markdown-body"},i=p(`<h3>0-1背包问题</h3><p>有一个给定容量的背包，和一系列物品，每个物品都有价值和重量，要求放入背包能装下的最大价值 关于此类问题有很多变种，本质都是选择或者不选择某个元素，然后判断是否满足要求</p><p>以 <a href="https://leetcode.cn/problems/partition-equal-subset-sum/" target="_blank" rel="noopener">分割等和子集</a> 为例</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> canPartition</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// dp[i][j]表示用前i个数字能不能加成j</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 目标加和为0，那么默认是可以有一种方案凑出的</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 没有可供选择的数字，那么是无法凑出的</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 如果选择当前的数字，那么就要判断选之前的数字时能不能凑成 j-nums[i]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 如果不选当前的数字，那么就要判断选之前的数字时能不能凑成 j</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i][j]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>可以看出0-1背包问题的状态转移是依赖于上一行同位置的状态和上一行之前位置的状态，这样的话是可以做空间压缩优化的 类似于下面的做法</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp2[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (dp2[target]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  dp </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>更进一步，我们可以直接利用一个dp数组来保存状态而不是交替数组</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (dp[target]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>注意内层遍历的顺序，需要从后向前，因为我们在滚动更新dp的时候依赖的是之前dp数组的值</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-"><span class="line"><span>a1 a2 a3 a4 a5</span></span>
<span class="line"><span>         b4 b5 （此时的dp数组为a1 a2 a3 b4 b5）</span></span></code></pre><p>例如在计算b4的时候我们依赖的是a4和a4之前的值，为了不覆盖依赖值，必须从后向前遍历。</p><p>一些基于01背包的题目还有: <a href="https://leetcode-cn.com/problems/ones-and-zeroes/" target="_blank" rel="noopener">一和零</a> <a href="https://leetcode-cn.com/problems/target-sum/" target="_blank" rel="noopener">目标和</a> <a href="https://leetcode-cn.com/problems/last-stone-weight-ii/" target="_blank" rel="noopener">最后一块石头的重量 II</a>等</p><h3>完全背包问题</h3><p>完全背包问题和01背包非常类似，只是每个选择的物品或元素可以选择多次，例如<a href="https://leetcode.cn/problems/coin-change/" target="_blank" rel="noopener">零钱兑换</a>问题</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> coinChange</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">coins</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// dp[i][j]表示用前i个硬币凑成金额j的最少个数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(amount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      continue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> coin</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> amount; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 从个数为0开始枚举个数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> coinscount</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(dp[i][j], coinscount)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        count</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][amount] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Infinity</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][amount]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>注意上面我们枚举了选当前硬币不同的个数来求最小值，实际上这里存在着重复计算，可以优化为下面的状态转移：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> coinChange</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">coins</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// dp[i][j]表示用前i个硬币凑成金额j的最少个数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(amount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i][</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      continue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> coin</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> amount; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 注意这里的 dp[i][j - coin] + 1，因为硬币数量不限制，所以还是可以用i枚硬币</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 具体的公式证明可以看这个 https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247486107&amp;idx=1&amp;sn=e5fa523008fc5588737b7ed801caf4c3&amp;chksm=fd9ca184caeb28926959c0987208a3932ed9c965267ed366b5b82a6fc16d42f1ff40c29db5f1&amp;token=990510480&amp;lang=zh_CN&amp;scene=21#wechat_redirect</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(dp[i][j], dp[i][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][amount] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Infinity</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][amount]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>同样地我们可以将二维dp降为一维dp</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> coinChange</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">coins</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(amount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Infinity</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  dp[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> coin</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 跟01背包不同的是这里是正序遍历</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> amount; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(dp[j], dp[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[amount] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Infinity</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[amount]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><a href="https://leetcode.cn/problems/coin-change-ii/" target="_blank" rel="noopener">零钱兑换II</a> 也是完全背包问题的一个变体 这个问题要求的是兑换的方案数量</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> change</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">coins</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // dp[m][c] 金额为m，使用前c枚硬币的组合数</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 特别的m=0 组合数为1，c=0 组合数为0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; m </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> amount; m</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[m] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; c </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; c</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (m </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[m][c] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[m][c] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 两种选择，不使用当前硬币 + 使用当前硬币</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 使用或不使用当前硬币产生的组合是不会有重复的，并且也仅有这两种方式达到目的</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[m][c] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[m][c </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (dp[m </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins[c </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]]?.[c] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[amount][coins.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>一维优化</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> change</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">coins</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // dp[i]表示金额为i时的方案组合数</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(amount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  dp[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> coin</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coins) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 注意这里必须先遍历硬币种类，以保证产生的方案数不会包含重复，可以跟下面组合总和IV对比一下</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> amount; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> coin]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[amount]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><a href="https://leetcode.cn/problems/combination-sum-iv/" target="_blank" rel="noopener">组合总和IV</a></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> combinationSum4</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">target</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(target </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// dp[i]表示目标为i时的组合个数</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  dp[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> target; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="color:#D73A49;--shiki-dark:#F97583;"> of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n] </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[target]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><a href="https://leetcode.cn/problems/perfect-squares/description/" target="_blank" rel="noopener">完全平方数</a> 也是完全背包问题</p>`,26),o=[i],t={__name:"背包问题",setup(r,{expose:s}){return s({frontmatter:{}}),(E,e)=>(a(),n("div",l,o))}};export{t as default};
