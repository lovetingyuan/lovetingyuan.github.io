import{o as a,f as n,P as p}from"./vendor-CYDcDHDY.js";const l={class:"markdown-body"},o=p(`<h2>useEffect vs useLayoutEffect</h2><h3>useLayoutEffect</h3><p>它运行在react将当前渲染结果提交给dom之后，但是浏览器实际执行渲染之前（所以如果它的回调是个长任务就会延迟浏览器的渲染，造成渲染性能问题），所以它一般只用于需要对dom有操作的情景。</p><p>在useLayoutEffect中触发的状态更新，也会在浏览器渲染页面之前被调度执行。</p><p>例如，在组件内部调用useLayoutEffect以及立即添加一个微任务，useLayoutEffect的回调通常会在微任务之前运行，这说明其回调是在dom变更提交完毕后立即执行的。</p><h3>useEffect</h3><p>一般情况下，useEffect会在浏览器完成当前渲染之后执行。</p><p>如果你的 Effect 是由一个交互（比如点击）引起的，React 可能会在浏览器重新绘制屏幕之前执行 Effect。</p><p>如果渲染之前有新的更新任务，那么react也会先执行当前的useEffect。</p><p>总的来说，useEffect 的运行时机实际并不确定，它与任务优先级、帧剩余时间、更新来源等都有关系。</p><hr><p>一个小测验</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-jsx"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> React, { useState, useEffect, useLayoutEffect } </span><span style="color:#D73A49;--shiki-dark:#F97583;">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="color:#D73A49;--shiki-dark:#F97583;">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;App&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">state</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">state</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;useEffect 1&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;useEffect 1 cleanup&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [state])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;useEffect 2&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;useEffect 2 cleanup&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [state])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useLayoutEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;useLayoutEffect&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;useLayoutEffect cleanup&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [state])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> root</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">createRoot</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">root.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> /&gt;)</span></span></code></pre><details><summary>result</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-bash"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;App&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useLayoutEffect&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useEffect 1&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useEffect 2&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;App&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useLayoutEffect cleanup&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useLayoutEffect&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useEffect 1 cleanup&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useEffect 2 cleanup&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useEffect 1&quot;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">&quot;useEffect 2&quot;</span></span></code></pre></div></details><p>另外react还提供了 <code>useInsertionEffect</code> 这个hook，它的用法和 <code>useLayoutEffect</code>相同，但是适用场景更受限，一般只用在对样式表有更改的情况下，通常在dom修改提交之前运行。因为样式表的更改会引起页面的回流和重绘，尽早提交有助于保持渲染性能。</p>`,15),e=[o],c={__name:"useEffect和useLayoutEffect",setup(i,{expose:s}){return s({frontmatter:{}}),(t,E)=>(a(),n("div",l,e))}};export{c as default};
