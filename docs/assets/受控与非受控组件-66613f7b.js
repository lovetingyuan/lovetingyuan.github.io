import { o as openBlock, c as createElementBlock, p as createStaticVNode } from "./index-e93e62f4.js";
const _hoisted_1 = { class: "markdown-body" };
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h3>React 受控与非受控组件</h3><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-typescript"><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">SetStateAction</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;react&#39;</span></span>\n<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useMemoizedFn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useUpdate</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;ahooks&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Options</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">T</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">onChange</span><span style="color:#D4D4D4;">?: (</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">usePropsValue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Options</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">value</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">defaultValue</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">onChange</span><span style="color:#D4D4D4;"> } = </span><span style="color:#9CDCFE;">options</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">update</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useUpdate</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">stateRef</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRef</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;"> ? </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">) {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">stateRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">value</span></span>\n<span class="line"><span style="color:#D4D4D4;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">setState</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useMemoizedFn</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">SetStateAction</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;, </span><span style="color:#9CDCFE;">forceTrigger</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// `forceTrigger` means trigger `onChange` even if `v` is the same as `stateRef.current`</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">nextValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;function&#39;</span><span style="color:#D4D4D4;"> ? (</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">prevState</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">)(</span><span style="color:#9CDCFE;">stateRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">) : </span><span style="color:#9CDCFE;">v</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">forceTrigger</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">nextValue</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">stateRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">stateRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nextValue</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">()</span></span>\n<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">onChange</span><span style="color:#D4D4D4;">?.(</span><span style="color:#9CDCFE;">nextValue</span><span style="color:#D4D4D4;">)</span></span>\n<span class="line"><span style="color:#D4D4D4;">  })</span></span>\n<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">stateRef</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">current</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">setState</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">const</span></span>\n<span class="line"><span style="color:#D4D4D4;">}</span></span>\n<span class="line"></span></code></pre>', 2);
const _hoisted_4 = [
  _hoisted_2
];
const _sfc_main = {
  __name: "受控与非受控组件",
  setup(__props, { expose: __expose }) {
    const frontmatter = {};
    __expose({ frontmatter });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, _hoisted_4);
    };
  }
};
export {
  _sfc_main as default
};
