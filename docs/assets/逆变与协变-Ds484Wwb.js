import{o as a,e as n,M as l}from"./vendor-B7iAV6MF.js";const i={class:"markdown-body"},p=l(`<h3>逆变与协变</h3><p>ts 使用 extends 关键字来表示两个类型是否兼容</p><p>比如 <code>A extends B</code> 如果通过表示 A 是 B 的“子类型”，那么<code>b: B = a: A</code>就不会报错，这就是协变，下面是协变的一些例子：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-ts"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70;">  a</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70;">  a</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70;">  b</span><span style="color:#D73A49;--shiki-dark:#F97583;">?:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70;">  a</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70;">  b</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R3</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R4</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R5</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R6</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> |</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> |</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> |</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;c&#39;</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 注意在泛型中会自动分发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> R7</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // true</span></span></code></pre><p>对于函数类型来说，情况会稍微有些复杂， 例如有三个类型： <code>WhiteDog extends Dog extends Animal</code>，那么请问 <code>(d: Dog) =&gt; Dog</code> 的子类型是什么呢？</p><ol><li><code>(d: WhiteDog) =&gt; WhiteDog</code></li><li><code>(d: WhiteDog) =&gt; Animal</code></li><li><code>(d: Animal) =&gt; Animal</code></li><li><code>(d: Animal) =&gt; WhiteDog</code></li></ol><p>在 ts 中，思考子类型最好是将其代入到真实的运行场景中，看运行起来是否安全</p><p>我们假设有一个方法 f，接受上面的函数作为回调，<code>f(cb: (d: Dog) =&gt; Dog) =&gt; void</code> 那么，1-4 哪个方法可以安全的传递给 f 呢？</p><p>f 在调用 cb 的时候，会至少传递给它 Dog 类型作为参数，或者是更具体的 dog，比如 WhiteDog 或者 LittleDog，如果此时传递给 f 的 cb 参数类型是 WhiteDog，那么就会报错，因为实际 f 不一定会传递 WhiteDog 给它，但如果传递给 f 的 cb 参数类型是 Animal，那么就没问题，因为 Dog 或者更具体的 dog 永远都是 Animal，这就是逆变</p><p>同理，<strong>参数少的方法可以赋给参数多的方法</strong></p><p>再看 cb 的返回值，f 会使用 cb 的返回值，并且认为它至少是个 Dog，如果此时 cb 的返回值是 Animal 就会出错，因为 Animal 可不一定会叫，这符合协变</p><p>所以综上所述，只有 4 是可以安全传给 f 的，<strong>一个方法的子类型，其参数应该更宽泛，返回值应该更具体</strong></p><p>最后看一下剩余参数和可选参数的情况：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-ts"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> optionalParams</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">one</span><span style="color:#D73A49;--shiki-dark:#F97583;">?:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">tow</span><span style="color:#D73A49;--shiki-dark:#F97583;">?:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> void</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> requiredParams</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">one</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">tow</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> void</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> restParams</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">...</span><span style="color:#E36209;--shiki-dark:#FFAB70;">args</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> void</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">requiredParams </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> optionalParams </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ok</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">restParams </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> optionalParams </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ok</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;"> * 不能将类型“(...args: number[]) =&gt; undefined”分配给类型“(one?: number | undefined, tow?: number | undefined) =&gt; undefined”。</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  参数“args”和“one” 的类型不兼容。</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    不能将类型“number | undefined”分配给类型“number”。</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      不能将类型“undefined”分配给类型“number”。ts(2322)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">optionalParams </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> restParams </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ts(2322)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">optionalParams </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> requiredParams </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ts(2322)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">restParams </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> requiredParams </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ok，见下方解释</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">requiredParams </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> restParams </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// ok</span></span></code></pre><p>其中，对于 <code>restParams = requiredParams</code>之所以成立是因为，虽然 rest 参数在语义上表示可以传或不传或传任意个数，但是在类型检查方面并不能完全照搬运行时的语义。可以考虑约束函数类型的泛型时的写法 <code>&lt;F extends (...args: number[]) =&gt; any&gt;</code></p><h3>例子</h3><p>将联合类型转为交叉类型 <a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00055-hard-union-to-intersection/README.md" target="_blank" rel="noopener">题目</a></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-ts"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// expected to be &#39;foo&#39; &amp; 42 &amp; true</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> I</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> UnionToIntersection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="color:#D73A49;--shiki-dark:#F97583;"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><details><summary>answer</summary><div style="padding-top:10px;"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-ts"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// your answers</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> UnionToIntersection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">U</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">U</span><span style="color:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> U</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> never</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">extends</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70;">  arg</span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#D73A49;--shiki-dark:#F97583;"> infer</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> P</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> unknown</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> P</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> never</span></span></code></pre></div></details>`,19),o=[p],d={__name:"逆变与协变",setup(r,{expose:s}){return s({frontmatter:{}}),(k,t)=>(a(),n("div",i,o))}};export{d as default};
