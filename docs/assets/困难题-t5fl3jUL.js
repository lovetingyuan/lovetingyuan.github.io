import{o as a,c as n,L as l}from"./vendor-80y6nIiq.js";const p={class:"markdown-body"},i=l(`<details><summary><a href="https://leetcode-cn.com/problems/trapping-rain-water/" target="_blank" rel="noopener" style="margin-left:8px;">接雨水</a></summary><div style="padding-top:10px;"><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="-"></p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> trap</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">height</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> leftMax </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightMax </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> height.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 木桶理论，找到较短的那个边界</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    leftMax </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(height[i], leftMax)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    left.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(leftMax)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    rightMax </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(height[j], rightMax)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    right[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> rightMax</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> height.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left[i], right[i]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> height[i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener" style="margin-left:8px;">两个正序数组的中位数</a></summary><div style="padding-top:10px;"><p>要求时间复杂度 O(log(m+n))，用二分查找，假设一个数组有 5 个 另一个有 8 个，那么中位数就是第 7 大的数字，我们分别在两个数组中寻找前 3 小的数，然后通过比较尾数来排除一组前 3 小的数，就这样不断排除直到排除到第 7 位数字</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> findMedianSortedArrays</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((nums1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 下面的任务就是找到前k小的数，策略就是找两个数组前k/2小的数，然后通过比较尾数决定排除哪个k/2</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 然后慢慢缩小k</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> isOdd</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">%</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [i, j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> isOdd </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums2[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> isOdd </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums1[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums1[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums1[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (isOdd) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums1[i], nums2[j])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums1[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2[j]) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 偶数长度的话要交叉对比取最小的两个值的平均值</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums1[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums1[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], nums2[j])) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums1[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2[j]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums2[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums2[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], nums1[i])) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums2[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums1[i]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> half</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(k </span><span style="color:#D73A49;--shiki-dark:#F97583;">/</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">lastI</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">lastJ</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (lastI </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (lastJ </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums1[lastI] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums2[lastJ]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    k </span><span style="color:#D73A49;--shiki-dark:#F97583;">-=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> half</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/candy/" target="_blank" rel="noopener" style="margin-left:8px;">分发糖果</a></summary><div style="padding-top:10px;"><p>n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。相邻的孩子得分高的要多拿一颗糖果，但是每个孩子都至少得有一颗糖果，问最少需要准备多少糖果</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> candy</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">ratings</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 两次遍历，从左遍历，得分高的糖果就+1，否则只给一颗</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 从右遍历，规则是一样的，然后两次遍历分给相同孩子数量较多的糖果就是最终应该给他的糖果</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> left</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> right</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ratings.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j</span><span style="color:#D73A49;--shiki-dark:#F97583;">--</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      left[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ratings[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ratings[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      right[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ratings[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ratings[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> right[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> left.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(left[i], right[i])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener" style="margin-left:8px;">最长有效括号</a></summary><div style="padding-top:10px;"><p>动态规划，定义 dp[i] 表示以下标 i 字符结尾的最长有效括号的长度，然后考虑两种情况：<code>....()</code>和<code>....))</code>， 具体可以去看力扣</p><p>下面的解法是自己想出的，就是每个合法的子串至少是<code>()</code>，考察每个<code>()</code>然后不断扩展它， 扩展的时候记录最大长度，需要注意的是如果前后都有合法的子串那么它们需要合并成大子串</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> longestValidParentheses</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> map</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> extend</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">j</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">in</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> map) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 需要合并前后有效的子串</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, map[j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, map[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">??</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(j, map[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, map[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">||</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    ;[map[i], map[j]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [j, i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    max </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(max, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 不需要处理 [j+1,j+2]和[i-2,i-1]，因为它们总会被处理到</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s[a] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s[b] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      extend</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (s[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      extend</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i, i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> max</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/first-missing-positive/" target="_blank" rel="noopener" style="margin-left:8px;">缺失的第一个正数</a></summary><div style="padding-top:10px;"><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。O(n)</p><p><code>[3,4,-1,1]</code> -&gt; <code>[1,-1,3,4]</code>，思路就是不断交换，让元素处在它值对应的下标处，这样第一个不满足值和下标相等的那个位置就是答案</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> firstMissingPositive</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 将nums[i]放到对应的位置</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[n </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ;[nums[n </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], nums[i]] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [n, nums[n </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      n </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 遍历是否是对应位置</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener" style="margin-left:8px;">编辑距离</a></summary><div style="padding-top:10px;"><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数</p><p>经典动态规划，dp[i][j] 表示 word1 前<strong>i 个</strong>字符和 word2 前 <strong>j 个</strong>字符最小编辑距离</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> minDistance</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">word1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">word2</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> dp</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [i]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    dp[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (word1[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> word2[j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        dp[i][j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], dp[i][j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">], dp[i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][j]) </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> dp[word1.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">][word2.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener" style="margin-left:8px;">数组中的逆序对个数</a></summary><div style="padding-top:10px;"><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对，求所有逆序对个数</p><p>采用归并排序（下面使用的迭代法，也可以用递归），在归并的时候可以统计逆序对的数量，因为归并不会改变元素的顺序却可以比较大小（而且消除了暴力法中产生的重复比较）</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> reversePairs</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (len </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (start </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">d</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [start, start </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, start </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len, Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [i, j] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [a, c]</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> merged</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="color:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> d) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nums[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[j]) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 这里不能包含等于，如 1 3, 2 3，包含等于会丢掉3-2这一对</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          merged.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums[j])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          merged.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums[i])</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">          // 关键在这里，如果i比j小，说明i比j之前的都大，那么j之前的数字都能组成一个逆序对</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          count </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> b) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        merged.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums[i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        count </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 如果j走完了，那么说明都比i小，那都可以是逆序对</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (j </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> d) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        merged.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums[j</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a; k </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> d; k</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        nums[k] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> merged[k </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> a]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      start </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> len </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    len </span><span style="color:#D73A49;--shiki-dark:#F97583;">*=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>这个题有个很类似的题目：<a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="noopener">计算右侧小于当前元素的个数</a>，这个就是需要具体统计每个数拥有的逆序对的个数，只需要在上面的基础上，在计算 count 的时候按照对应数字的位置记录下逆序对数</p></div></details><details><summary><a href="https://leetcode-cn.com/problems/basic-calculator/" target="_blank" rel="noopener" style="margin-left:8px;">基本计算器</a></summary><div style="padding-top:10px;"><p>用栈就行了，遇到<code>)</code>的时候，就需要计算出括号内的值了</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> calculate</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">s</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> stack</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  s </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // 统一形式</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">of</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> s) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (num) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      continue</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;+&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (num) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (num) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 减号既可以是运算符又可以是负数，所以这里需要对负数的情况特殊处理下</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 方法就是如果减号前面不是数字，那么它就是负数符号，在前面补一个0把它转换为运算符，方便计算</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack[stack.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#D73A49;--shiki-dark:#F97583;"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;)&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (num) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">num)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 当遇到右括号时，需要计算出括号内的表达式的值然后入栈</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 这里相当于从后向前计算一个普通表达式</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> op</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (op </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;(&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> item</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">          break</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="color:#D73A49;--shiki-dark:#F97583;">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (op </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;+&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583;"> :</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      stack.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(sum)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      num </span><span style="color:#D73A49;--shiki-dark:#F97583;">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><details><summary><a href="https://leetcode-cn.com/problems/sliding-window-maximum/" target="_blank" rel="noopener" style="margin-left:8px;">滑动窗口最大值</a></summary><div style="padding-top:10px;"><p>在窗口滑动的过程中同时维护一个单调递减队列，<strong>队列保存元素的下标</strong>。当添加元素时，需要把队列中小于该元素的元素都移除掉保证队列递减；同时从队首判断元素是否在当前窗口内，不在的话就移除掉；上面两个动作保证了队列中的元素递减并且都在当前窗口内，然后记录队首元素作为解集就可以了。</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">var</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> maxSlidingWindow</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">k</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 队列数组（存放的是元素下标，为了取值方便）</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> q</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 结果数组</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ans</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  for</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 若队列不为空，且当前元素大于等于队尾所存下标的元素，则弹出队尾</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (q.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[i] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> nums[q[q.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]]) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      q.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 入队当前元素下标</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    q.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 判断当前最大值（即队首元素）是否在窗口中，若不在便将其出队</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (q[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      q.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // 当达到窗口大小时便开始向结果中添加数据</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) ans.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nums[q[</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ans</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details>`,9),r=[i],c={__name:"困难题",setup(o,{expose:s}){return s({frontmatter:{}}),(E,e)=>(a(),n("div",p,r))}};export{c as default};
