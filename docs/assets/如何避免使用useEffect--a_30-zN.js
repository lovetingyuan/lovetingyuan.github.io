import{o as a,c as n,L as l}from"./vendor-80y6nIiq.js";const i={class:"markdown-body"},p=l(`<h2>如何避免使用 useEffect</h2><p>useEffect 用来处理组件包含的副作用，但是过度使用它会带来一系列问题， 如，闭包问题，多次渲染问题，逻辑割裂以及应对烦人的依赖列表等。应该尽可能的避免使用 useEffect</p><h3>计算派生状态</h3><p>例如，如果你只是想更新一些派生状态，那么完全没必要使用 useEffect</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Form</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">firstName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setFirstName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Taylor&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">lastName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setLastName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Swift&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: redundant state and unnecessary Effect</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">fullName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setFullName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setFullName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(firstName </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> lastName)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [firstName, lastName])</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>更好的方式是：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Form</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">firstName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setFirstName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Taylor&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">lastName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setLastName</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Swift&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ✅ Good: calculated during rendering</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> fullName</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> firstName </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> lastName</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>如果派生状态计算比较昂贵（可以使用<code>console.time</code>和<code>console.timeEnd</code>来测量计算的耗时），那么可以借助<code>useMemo</code>来优化</p><hr><h3>响应 props 变化</h3><p>很多时候，组件状态需要响应 props 的变化，如：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">export</span><span style="color:#D73A49;--shiki-dark:#F97583;"> default</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ProfilePage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">comment</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setComment</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: Resetting state on prop change in an Effect</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setComment</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [userId])</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>当用户的 id 改变时，重置组件的状态，更好的做法是重置整个组件，使用用户 id 作为组件的<code>key</code>:</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Profile</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ✅ This and any other state below will reset on key change automatically</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">comment</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setComment</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">export</span><span style="color:#D73A49;--shiki-dark:#F97583;"> default</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ProfilePage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Profile</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> userId</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{userId} </span><span style="color:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{userId} /&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>这代表了一类场景，当组件用来渲染某个实体时用 id 作为 key 是完全合理的</p><p>但是如果只是想让某一部分的状态响应 props 的变化呢？如：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">items</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">isReverse</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setIsReverse</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">selection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setSelection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: Adjusting state on prop change in an Effect</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setSelection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [items])</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>通常直接在组件内部更改状态是被禁止的，但是如果处于合理的逻辑条件下，这样做是有好处的：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">items</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">isReverse</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setIsReverse</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">selection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setSelection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // Better: Adjust the state while rendering</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">prevItems</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setPrevItems</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(items)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (items </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> prevItems) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setPrevItems</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(items)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setSelection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // Or use \`usePrevious\` hook</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">usePrevious</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(items) </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> items) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setSelection</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p><code>setSelection</code>是直接在组件渲染时调用的，这会让 react 放弃后续的 diff 而立即再次运行当前组件。</p><p>上面也给出了如何使用<a href="https://github.com/streamich/react-use/blob/master/src/usePrevious.ts" target="_blank" rel="noopener"><code>usePrevious</code></a>来简化这种模式。 <strong>不过要特别注意条件的设置，避免出现无限渲染的问题</strong></p><hr><h3>响应事件引起的状态变化</h3><p>通常状态变更来自于用户的事件，当有一些逻辑用于响应状态变更时，你可能会把它放到 useEffect 中。 例如当用户添加购物车或者直接购买时，你想发出一条通知：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ProductPage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">product</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">addToCart</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: Event-specific logic inside an Effect</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (product.isInCart) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      showNotification</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`Added \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">product</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">} to the shopping cart!\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [product])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleBuyClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    addToCart</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(product)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleCheckoutClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    addToCart</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(product)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    navigateTo</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/checkout&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>实际上发出通知这样的操作是跟用户的动作相关联的，只依赖属性的变化是不可靠的，并且事件处理方法本身就是天然的副作用容器</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ProductPage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">product</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">addToCart</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ✅ Good: Event-specific logic is called from event handlers</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> buyProduct</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    addToCart</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(product)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    showNotification</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`Added \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">product</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">} to the shopping cart!\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleBuyClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    buyProduct</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleCheckoutClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    buyProduct</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    navigateTo</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;/checkout&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><hr><h3>响应多个状态的依赖变化</h3><p>有时组件的内的状态之间也有互相的关联，一个状态变化可能引起其它状态的变化，甚至是一个变化的链条：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Game</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">card</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">goldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setGoldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">round</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setRound</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">isGameOver</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setIsGameOver</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (card </span><span style="color:#D73A49;--shiki-dark:#F97583;">!==</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="color:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> card.gold) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setGoldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">c</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [card])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (goldCardCount </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setRound</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">r</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setGoldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [goldCardCount])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (round </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setIsGameOver</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [round])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Good game!&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [isGameOver])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handlePlaceCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nextCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (isGameOver) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Game already ended.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nextCard)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>上面的例子除了性能问题，状态之间互相影响的逻辑过于碎片化，不利于维护：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Game</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">card</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">goldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setGoldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">round</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setRound</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ✅ Calculate what you can during rendering</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> isGameOver</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> round </span><span style="color:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handlePlaceCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nextCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (isGameOver) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Game already ended.&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // ✅ Calculate all the next state in the event handler</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nextCard)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (nextCard.gold) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (goldCardCount </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">        setGoldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(goldCardCount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">        setGoldCardCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">        setRound</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(round </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (round </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">          alert</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;Good game!&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><hr><h3>调用父组件的方法</h3><p>响应状态变化另一个常见的操作是调用父组件的方法，例如 onChange</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Toggle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">onChange</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: The onChange handler runs too late</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    onChange</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(isOn)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [isOn, onChange])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">isOn)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleDragEnd</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">e</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">isCloserToRightEdge</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(e)) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>很容易想到这里的 useEffect 是没必要的，通过简单的封装可以达到更好的效果：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Toggle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">onChange</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">isOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> updateToggle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">nextIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">    // ✅ Good: Perform all updates during the event that caused them</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setIsOn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nextIsOn)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    onChange</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(nextIsOn)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    updateToggle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">isOn)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleDragEnd</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">e</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">isCloserToRightEdge</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(e)) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      updateToggle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      updateToggle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>这里开关的状态实际上是父子组件共享的，这种情况下将 isOn 提升到父组件（Lifting state up）是更好的做法：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Parent</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setData</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> onFetched</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{setData} /&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Child</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">onFetched</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useSomeAPI</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // 🔴 Avoid: Passing data to the parent in an Effect</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (data) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      onFetched</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [onFetched, data])</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>经过提升之后:</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Parent</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useSomeAPI</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ✅ Good: Passing data down to the child</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> data</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{data} /&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Child</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><hr><h3>订阅外部事件</h3><p>下面的 hook 返回了网络连接状态：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useOnlineStatus</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // Not ideal: Manual store subscription in an Effect</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">isOnline</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setIsOnline</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> updateState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">      setIsOnline</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(navigator.onLine)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    updateState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, updateState)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, updateState)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, updateState)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, updateState)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> isOnline</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>有很多事件 react 无法感知，需要主动订阅并返回给 react，在这种情况下推荐使用<code>useSyncExternalStore</code>来代替 useEffect</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> subscribe</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, callback)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, callback)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;online&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, callback)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;offline&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, callback)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useOnlineStatus</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ✅ Good: Subscribing to an external store with a built-in Hook</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useSyncExternalStore</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    subscribe, </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// React won&#39;t resubscribe for as long as you pass the same function</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> navigator.onLine, </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// How to get the value on the client</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // How to get the value on the server</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><hr><h3>数据获取</h3><p>数据获取是另一种 useEffect 常用的场景，如果只请求一次通常并没有什么问题，但实际的数据获取可能变得复杂。 最常见的问题就是当依赖的状态多次变化时，获取数据会产生竞态：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> SearchResults</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="color:#E36209;--shiki-dark:#FFAB70;">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">results</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setResults</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">([])</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">page</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">setPage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ignore </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    fetchResults</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(query, page).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">json</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">ignore) {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">        setResults</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(json)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      ignore </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }, [query, page])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> handleNextPageClick</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">    setPage</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(page </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><p>除此之外当数据变化到与之前相同时是否可以利用上缓存；多个请求形成的网络瀑布是否可以优化等。</p><p>解决这些问题通常需要将数据请求统一封装成新的 hook，更好的方式是使用例如<code>swr</code>等第三方库。</p><blockquote><p><em>以上示例来自 <a href="https://react.dev/learn/you-might-not-need-an-effect" target="_blank" rel="noopener">react.dev</a></em></p></blockquote>`,56),o=[p],c={__name:"如何避免使用useEffect",setup(r,{expose:s}){return s({frontmatter:{}}),(k,E)=>(a(),n("div",i,o))}};export{c as default};
