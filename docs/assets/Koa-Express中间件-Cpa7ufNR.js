import{o as a,f as n,N as l}from"./vendor-KON_WPKK.js";const r={class:"markdown-body"},p=l(`<h2>Koa 和 Express 的中间件机制</h2><h3>Koa</h3><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> start</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  await</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ms</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">method</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">ctx</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">} - \${</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">ms</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">}ms\`</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> createServer</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> ctx</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> createContext</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(req, res)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  ctx.res.statusCode </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 404</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> fnMiddleware</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> compose</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(middlewares)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> fnMiddleware</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> finalRespond</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(ctx))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ctx.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">onerror</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 洋葱模型</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> compose</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">middlewares</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#D73A49;--shiki-dark:#F97583;"> function</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70;">context</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#D73A49;--shiki-dark:#F97583;"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="color:#6A737D;--shiki-dark:#6A737D;"> // last called middleware #</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dispatch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dispatch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">i</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> index) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#D73A49;--shiki-dark:#F97583;">new</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;next() called multiple times&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      index </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      let</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> fn </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> middlewares[i]</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 当i等于中间件队列长度时表示最后一个中间件正在调用next</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> middlewares.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) fn </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">      // 这里next是空的就直接resolve返回即可，之后就是从洋葱芯回到表皮的过程</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="color:#D73A49;--shiki-dark:#F97583;">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">fn) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">      try</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">        // 这里可以看到，调用next方法其实就是调用下一个中间件</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(context, dispatch.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="color:#D73A49;--shiki-dark:#F97583;">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><h3>Express</h3><p>Express 中间件其实和 Koa 类似，也是从上到下的执行流程，当调用<code>next</code>的时候，express 会执行下一个中间件，如果没调用<code>next</code>并且也没有返回响应，那么 express 会挂起，前端就一直等待，而 Koa 则不同，不调用<code>next</code>只是不会调用剩余的中间件，但最终还是会返回响应；另外 express 的中间件是同步调用的，意味着如果中间件有异步操作，<code>next</code>也不会等待异步完成，而就只是线性的调用下一个中间件</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 伪代码</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> dispatch</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">req</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">res</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">done</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> idx </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">.stack</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (stack.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> done</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  function</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#E36209;--shiki-dark:#FFAB70;">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    var</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> layer </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> stack[idx</span><span style="color:#D73A49;--shiki-dark:#F97583;">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#6A737D;--shiki-dark:#6A737D;">// 因为express注册中间件途径多种多样，每个中间件都会被抽象成layer</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;route&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="color:#D73A49;--shiki-dark:#F97583;">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;router&#39;</span><span style="color:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="color:#D73A49;--shiki-dark:#F97583;"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">layer) </span><span style="color:#D73A49;--shiki-dark:#F97583;">return</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> done</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      layer.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">handle_error</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(err, req, res, next)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="color:#D73A49;--shiki-dark:#F97583;">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      layer.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">handle_request</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><hr><p>总结来讲，Koa 和 Express 的中间件区别主要在于，express 是依靠主动调用<code>res.end</code>来响应请求，koa 则只是向 ctx 挂载数据，中间件执行完再返回响应；二者都是通过<code>next</code>来调用下一个中间件，区别在于 express 不会等待异步的中间件执行完，而 koa 会强制让你<code>await next()</code>才可以</p>`,9),i=[p],t={__name:"Koa-Express中间件",setup(o,{expose:s}){return s({frontmatter:{}}),(e,E)=>(a(),n("div",r,i))}};export{t as default};
