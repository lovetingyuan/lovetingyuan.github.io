import{o as a,c as n,L as l}from"./vendor-Zve-xysi.js";const p={class:"markdown-body"},i=l(`<h3>虚拟列表</h3><p>当前端渲染很长的列表时，如果一次性全部渲染，则对应的视图节点就会很多，渲染的压力会很大，但实际用户能看到的只是一小部分内容。虚拟列表组件可以呈现出全部渲染出的效果，但实际视图节点只会有用户可以看到的那部分，同时还可以正常滚动刷新渲染，是一种常用的性能优化手段。下面是根据 <code>ahooks</code> 中的 <a href="https://github.com/alibaba/hooks/blob/master/packages/hooks/src/useVirtualList/index.ts" target="_blank" rel="noopener"><code>useVirtualList</code></a> 对虚拟列表原理的分析</p><p><a href="https://ahooks.js.org/hooks/use-virtual-list/#default-usage" target="_blank" rel="noopener">用法</a>：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-jsx"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> React, { useMemo, useRef } </span><span style="color:#D73A49;--shiki-dark:#F97583;">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { useVirtualList } </span><span style="color:#D73A49;--shiki-dark:#F97583;">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;ahooks&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">export</span><span style="color:#D73A49;--shiki-dark:#F97583;"> default</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> containerRef</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> wrapperRef</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> originalList</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useMemo</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">99999</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">()), [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> useVirtualList</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(originalList, {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    containerTarget: containerRef,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    wrapperTarget: wrapperRef,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    itemHeight: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    overscan: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{containerRef} </span><span style="color:#6F42C1;--shiki-dark:#B392F0;">style</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{{ height: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;300px&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, overflow: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;auto&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, border: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;1px solid&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> }}&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{wrapperRef}&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          {list.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">ele</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">              style</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{{</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">                height: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">52</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">                display: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;flex&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">                justifyContent: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;center&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">                alignItems: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;center&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">                border: </span><span style="color:#032F62;--shiki-dark:#9ECBFF;">&#39;1px solid #e8e8e8&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">                marginBottom: </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">              }}</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">              key</span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">{ele.index}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            &gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">              Row: {ele.data}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">          ))}</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="color:#22863A;--shiki-dark:#85E89D;">div</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><ul><li><p>外层是视图容器（containerRef），是一个固定高度用来包含长列表容器的容器，overflow 需要设置为 ‘auto’ 来保证出现滚动条</p></li><li><p>内部是列表容器（wrapperRef），用来容纳列表节点，它的高度是全部列表数据的高度总和（ahooks实现时是用 height + margin-top 来替代这个高度），这样滚动条的表现才是正常的</p></li><li><p>列表容器内部就是实际会渲染的列表节点了，具体的个数会动态计算，保证至少会覆盖可视区域（视图容器），并且为了减少渲染空白的出现，通常都会在上下看不见的区域也多渲染几个节点</p></li></ul><p>我们需要什么？</p><ol><li>计算出可视列表开始于第几项</li><li>计算当前需要渲染的项目的个数</li><li>计算所有项目的总高度</li><li>计算容器列表距离顶部的距离</li></ol><p>代码：</p><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 获取视图容器的 scrollTop 和 clientHeight</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">scrollTop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF;">clientHeight</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="color:#D73A49;--shiki-dark:#F97583;">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> container</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 计算需要开始渲染的项目的下标</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> offset</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getOffset</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(scrollTop)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 计算需要实际渲染的项目的数量</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> visibleCount</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getVisibleCount</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(clientHeight, offset)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 计算实际渲染数据的区间坐标</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> start</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, offset </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> overscan)</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> end</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">min</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(list.</span><span style="color:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, offset </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> visibleCount </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> overscan)</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 计算列表容器顶部距离最上面的距离</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583;">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF;"> offsetTop</span><span style="color:#D73A49;--shiki-dark:#F97583;"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0;"> getDistanceTop</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 设置列表容器的样式</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">setWrapperStyle</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  height: totalHeight </span><span style="color:#D73A49;--shiki-dark:#F97583;">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> offsetTop </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  marginTop: offsetTop </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D;">// 设置实际的数据</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0;">setTargetList</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  list.</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">(start, end).</span><span style="color:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="color:#E36209;--shiki-dark:#FFAB70;">ele</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="color:#E36209;--shiki-dark:#FFAB70;">index</span><span style="color:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="color:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    data: ele,</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">    index: index </span><span style="color:#D73A49;--shiki-dark:#F97583;">+</span><span style="color:#24292E;--shiki-dark:#E1E4E8;"> start</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">  }))</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><p>另一种实现方式是让列表项目节点全部相对于列表容器绝对定位，每一个项目都设置自己对应的top值，这样就不用marginTop了，可以参考<a href="https://libin1991.github.io/2019/04/04/100%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0React%E8%99%9A%E6%8B%9F%E5%8D%B7%E5%B8%98virtual-list/" target="_blank" rel="noopener">https://libin1991.github.io/2019/04/04/100行代码实现React虚拟卷帘virtual-list/</a></p>`,10),o=[i],c={__name:"虚拟列表的实现",setup(r,{expose:s}){return s({frontmatter:{}}),(k,E)=>(a(),n("div",p,o))}};export{c as default};
