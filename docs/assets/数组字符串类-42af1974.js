import{o as l,c as n,s as a}from"./index-886f785a.js";const p={class:"markdown-body"},e=a(`<details><summary><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener" style="margin-left:8px;">最长递增子序列</a></summary><div style="padding-top:10px;"><ul><li>动态规划，dp[i] 表示以 nums[i] 这个数结尾的最长递增子序列的长度</li><li>dp[i+1]就是在 dp[0] 到 dp[i]找比 nums[i+1]小的数再＋ 1</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener" style="margin-left:8px;">最长公共子序列</a></summary><div style="padding-top:10px;"><p>两个字符串 s1 和 s2，请你找出他们俩的最长公共子序列，返回这个子序列的长度</p><ul><li>二维动态规划，dp[i][j] 表示 s1 前 i 个字符和 s2 前 j 个字符最长公共子序列</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener" style="margin-left:8px;">无重复字符最长子串</a></summary><div style="padding-top:10px;"><p>给定一个字符串 s ，请你找出其中不含有重复字符的<strong>最长子串</strong>的长度。</p><ul><li>滑动窗口，右侧向前，如果有重复字符，左侧向前，直到没有重复字符，然后重复上述过程</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener" style="margin-left:8px;">字符串排列</a></summary><div style="padding-top:10px;"><p>给定两个字符串 s1, s2, 判断 s2 是否包含 s1 的一种排列</p><ul><li>滑动窗口，思路跟上面一样，只是要保证窗口大小是固定的（s1 长度），另外就是判断两个字符串是否满足重排后相同</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/" target="_blank" rel="noopener" style="margin-left:8px;">最长重复子数组</a></summary><div style="padding-top:10px;"><p>有两个数组，返回 两个数组中 公共的 、长度最长的子数组的长度</p><ul><li>动态规划，跟最长公共子串是一样的</li><li>滑动窗口，先固定数组 a，然后让数组 b 在 a 上滑动，寻找最长公共子数组，然后再固定 b，让 a 在 b 上滑动</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener" style="margin-left:8px;">乘积最大子数组</a></summary><div style="padding-top:10px;"><p>有一个整数数组（正数负数都可能有），求其中乘积最大的非空连续子数组的乘积</p><ul><li>动态规划，但是要维护两个值，最大的正数和最小的负数，默认为 0 <a href="https://leetcode-cn.com/submissions/detail/304987832/" target="_blank" rel="noopener">题解</a></li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/palindromic-substrings/" target="_blank" rel="noopener" style="margin-left:8px;">回文子串的数目</a></summary><div style="padding-top:10px;"><p>返回一个字符串中所有回文子串的数目（即使子串内容相同但是位置不同仍算不同结果）</p><ul><li>中心扩展，每个字符都是回文的，然后向两边扩展判断；每两个相同的字符是回文的，然后也是再扩展</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener" style="margin-left:8px;">最长回文子序列</a></summary><div style="padding-top:10px;"><p>给定一个字符串，返回最长回文<strong>子序列</strong>的长度</p><ul><li>动态规划，dp[i][j]表示从 i 到 j 并且以 i，j 结尾的字串中最长的回文子序列，然后向外扩展</li><li>需要注意的是遍历的顺序</li><li>也可以转换一下，将原字符串 s 反转为 s1，就等价于求二者的最长公共子序列了</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener" style="margin-left:8px;">分割等和子集</a></summary><div style="padding-top:10px;"><p>有一个只包含正整数的非空数组 nums，判断是否能够分成两个加和相等的子集</p><ul><li>动态规划，其实就是子集背包问题</li><li>dp[i][j] 表示前 i 个数字能否取得 j 的加和，特别的当 j=0 的时候为 true</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener" style="margin-left:8px;">最长回文子串</a></summary><div style="padding-top:10px;"><p>有一个只包含正整数的非空数组 nums，判断是否能够分成两个加和相等的子集</p><ul><li>中心扩展</li><li>动态规划，二维，dp[i][j] 表示 i 到 j 的子串是否是回文，这样 dp[i+1][j-1]如果是那么 dp[i][j]就也是，注意遍历顺序以及处理 i=j 和 j-i=1 的特殊情况</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener" style="margin-left:8px;">最大子数组和</a></summary><div style="padding-top:10px;"><ul><li>动态规划，dp[i]表示以 i 结尾的子数组的最大加和</li></ul></div></details><details><summary>undefined</summary><div style="padding-top:10px;"><ul><li>前缀和，可以和哈希表配合将复杂度降为 O(n)，统计有多少前缀和等于前缀和-k</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/find-the-duplicate-number/" target="_blank" rel="noopener" style="margin-left:8px;">寻找重复数</a></summary><div style="padding-top:10px;"><p>给定一个包含  n + 1 个整数的数组  nums ，其数字都在  [1, n]  范围内（包括 1 和 n），可知至少存在一个重复的整数。假设 nums 只有 一个重复的整数 ，返回   这个重复的数 。空间复杂度必须为 O(1)</p><ul><li>二进制法，二分查找法，快慢指针法</li><li>快慢指针就是 nums[i]当作下一个位置，只是快指针一次走两步，二者相遇后，快指针回到起点，二者再同时移动直到相遇就是重复的数字</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/first-missing-positive/" target="_blank" rel="noopener" style="margin-left:8px;">缺失的第一个正数</a></summary><div style="padding-top:10px;"><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。 请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。</p><ul><li><p>置换，原地哈希</p></li><li><p>把 1 - nums.length 之间的数字放到对应的位置上，那么第一个不满足 nums[i] === i + 1 的位置就是第一个缺失的正数</p><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">firstMissingPositive</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">len</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 将nums[i]放到对应的位置</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] !== </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      ;[</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]] = [</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// 注意这里要一直交换直到放置到正确的位置</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 遍历是否是对应位置</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] !== </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">len</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener" style="margin-left:8px;">最长连续子序列</a></summary><div style="padding-top:10px;"><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。O(n)</p><ul><li>哈希表</li></ul></div></details>`,15),o=[e],y={__name:"数组字符串类",setup(t,{expose:s}){return s({frontmatter:{}}),(D,i)=>(l(),n("div",p,o))}};export{y as default};
