import{o as n,c as a,p as l}from"./index-58c6a5d7.js";const p={class:"markdown-body"},o=l(`<h2>发布订阅模式和观察者模式</h2><p>这两种都是比较常用的编程模式，它们的含义很相近但实现起来又有不同。 <img src="https://s1.ax1x.com/2020/08/07/afuYod.jpg" alt="alt"></p><h3>观察者模式</h3><p>观察者模式包含 <strong>被观察者(Subject)</strong> 和 <strong>观察者(Observers)</strong>，它们是一对多的关系，即 Observer 有很多个，Subject 只有一个。</p><p>其中，Observer 是依赖于 Subject 的，意味着当 Subject 有变化的时候，它会通知到每一位 Observer。</p><p>依赖的实现需要 Observer 主动联系 Subject，而通知则是 Subject 变化时主动去遍历 Observer。</p><p>可以看到二者是需要紧密联系的，它们知道彼此的存在并直接通信。比如 Vue 中的 watch 功能就是观察者模式的体现。</p><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Subject</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">constructor</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">observers</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">observer</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">observers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">observer</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">notify</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">observers</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">observer</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">observer</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><h3>订阅-发布模式</h3><p>订阅发布模式通常被视为观察者模式抽象思想上的一种实现，这种模式同样存在甲方乙方，这里称它们为 <strong>订阅者(Subscriber)</strong> 和 <strong>发布者(Publisher)</strong>。</p><p>除此之外还存在着一个第三方的角色，可以称它为消息中心，或者事件调度中心或者简称为<strong>中介</strong>。</p><p>所以二者最主要的区别出现了，订阅发布模式中，Subscriber 和 Publisher 不是直接通信的，而是借助于中介来联系，从而实现了松耦合的设计。</p><p>Subscriber 在订阅事件的时候，只关注事件本身，而不关心谁会发布这个事件；Publisher 在发布事件的时候，只关注事件本身，而不关心谁订阅了这个事件。</p><p>在实现中，中介通常会维护一个事件队列，每一种事件都有对应的订阅者，并向外提供订阅(on)和发布(emit)的接口。Node 中 EventEmitter，Vue 中的 EventBus 等都是订阅发布模式的体现。</p><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code class="language-js"><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PubSub</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">constructor</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subscribers</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">subscribe</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">topic</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">callbacks</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subscribers</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">topic</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">callbacks</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subscribers</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">topic</span><span style="color:#D4D4D4;">] = [</span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">callbacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">publish</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">topic</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">callbacks</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">subscribers</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">topic</span><span style="color:#D4D4D4;">] || []</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">callbacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">callback</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">callback</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre>`,15),D=[o],C={__name:"发布订阅和观察者模式",setup(e,{expose:s}){return s({frontmatter:{}}),(r,t)=>(n(),a("div",p,D))}};export{C as default};
