import{o as l,c as t,M as i}from"./vendor-u6r1Igrm.js";const s={class:"markdown-body"},a=i('<h3>算法题</h3><details><summary><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener" style="margin-left:8px;">合并重叠区间</a></summary><div style="padding-top:10px;"><ol><li>按左端升序排列</li><li>将第一个元素加入解集，之后考虑剩下每个区间</li><li>如果不重合直接加入解集，否则取当前区间右端和解集最后区间右端最大值更新为解集最后区间右端的值</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener" style="margin-left:8px;">最长无重复字符子串</a></summary><div style="padding-top:10px;"><p>滑动窗口</p><ol><li>窗口右端不断向右判断，</li><li>如果没有重复字符，右端继续向右移动；</li><li>如果有重复字符，记录此时窗口长度，然后左端窗口向右移动，继续上述过程</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/3.sum/" target="_blank" rel="noopener" style="margin-left:8px;">三数之和</a></summary><div style="padding-top:10px;"><p>一个数组找出有没有三个不同的数之和为 0</p><ol><li>首先对数组进行排序，排序后固定一个数 nums[i]，再使用左右指针指向 nums[i]后面的两端， 数字分别为 nums[L] 和 nums[R]，计算三个数的和 sum 判断是否满足为 0，满足则添加进解集</li><li>如果 nums[i]大于 0，则三数之和必然无法等于 0，结束循环</li><li>如果 nums[i] == nums[i-1]，则说明该数字重复，会导致结果重复，所以应该跳过</li><li>当 sum == 0 时，nums[L] == nums[L+1] 则会导致结果重复，应该跳过，L++</li><li>当 sum == 0 时，nums[R] == nums[R-1] 则会导致结果重复，应该跳过，R–</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener" style="margin-left:8px;">盛最多水的容器</a></summary><div style="padding-top:10px;"><p>一个数组，每个数字想象成围栏，倒水之后形成的最大面积 双指针</p><ol><li>前后指针分别指向数组首尾，然后向中间移动</li><li>每次只移动一个指针，哪个小就移动哪个，然后计算面积</li><li>输出其中最大的面积</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener" style="margin-left:8px;">最长回文子串</a></summary><div style="padding-top:10px;"><p>中心扩展算法 <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/si-lu-fei-chang-jian-ji-zhi-you-san-ju-h-bh86/">题解</a></p><ol><li>考察每个字符，以此为中心向两边遍历，相同则继续，否则无法构成回文结构则结束，记录结果</li><li>但是需要考虑奇数回文串和偶数回文串两种情况，偶数就要以两个相同字符作为中心</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener" style="margin-left:8px;">硬币兑换</a></summary><div style="padding-top:10px;"><p>动态规划 <a href="https://leetcode-cn.com/problems/coin-change/solution/wan-quan-bei-bao-de-zui-zhi-wen-ti-wai-c-flro/">题解</a></p><ol><li>当选择最后一枚硬币恰好凑成所需金额，假设此时硬币数量是最小的，那么说明 count(amount-lastCoin)（子问题）也是最少的</li><li>所以需要定义 dp 数组为 dp[i]表示金额为 i 时的最少硬币数量，dp[i]=min(dp[i], dp[i-someCoin] + 1)</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/next-permutation/" target="_blank" rel="noopener" style="margin-left:8px;">下一个排列</a></summary><div style="padding-top:10px;"><p>策略：下一个排列总是比当前排列大并且二者总是最接近的</p><ol><li>从当前排列 a 的后面开始寻找，如果一直递增就继续寻找，直到遇到第一个递减的数 b</li><li>然后重新从 a 的后面开始寻找，直到找到第一个比 b 大的数字 c，然后交换 b 和 c</li><li>最后将当前 c 之后的数字（递减排列）反转成递增</li><li><img src="https://assets.leetcode-cn.com/solution-static/31/31.gif" width="400"></li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener" style="margin-left:8px;">二叉树最近公共祖先</a></summary><div style="padding-top:10px;"><p><a href="https://leetcode-cn.com/submissions/detail/262989314/" target="_blank" rel="noopener">题解</a></p><ol><li>如果 p 和 q 在一个节点的左右子树内，那这个节点一定是最近公共祖先</li><li>否则最近公共祖先一定是 p(q)，而 q(p)在 p(q)的子树内</li><li>所以我们要在左右子树内寻找 p 或者 q，找到就返回</li><li>都找到说明 p 和 q 在不同的子树内，那么当前的节点就是最近公共祖先</li><li>否则就看哪个子树找到了公共祖先返回即可</li></ol></div></details>',9),o=[a],c={__name:"算法题",setup(n,{expose:e}){return e({frontmatter:{}}),(p,m)=>(l(),t("div",s,o))}};export{c as default};
