import{o as t,c as l,p as a}from"./index-5d00f4c9.js";const i={class:"markdown-body"},r=a('<details><summary><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener" style="margin-left:8px;">不同的二叉搜索树</a></summary><div style="padding-top:10px;"><p>恰由 n 个节点组成且节点值从 1 到 n 互不相同的 <strong>二叉搜索树</strong> 有多少种</p><ul><li>动态规划，其实就是带 cache 的递归</li><li>dp[i]表示 i 个数组成的不同二叉搜索树数目，那么 dp[i]就是 dp[0] _ dp[i - 1] + dp[1] _ dp[i - 2] + … + dp[i - 1] * dp[0]</li><li>起始情况 dp[0] = dp[1] = 1</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/path-sum-ii/" target="_blank" rel="noopener" style="margin-left:8px;">二叉树路径总和</a></summary><div style="padding-top:10px;"><p>给定一个二叉树和一个数字，求所有从根节点到叶子节点加和等于给定数字的路径</p><ul><li>深度优先，回溯</li><li>广度优先</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/path-sum-iii/" target="_blank" rel="noopener" style="margin-left:8px;">二叉树路径总和进阶</a></summary><div style="padding-top:10px;"><p>给定一个二叉树和一个数字，求所有加和等于给定数字的路径数目（不要求路径一定起始于根节点或终结于子节点）</p><ul><li>深度优先，对每个节点都当作根节点去遍历</li><li>前缀和，区间加和问题都可以考虑用前缀和</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener" style="margin-left:8px;">验证二叉搜索树</a></summary><div style="padding-top:10px;"><ul><li>递归，函数构造为 <code>walk(node, min, max)</code></li><li>中序遍历，结果为递增那就是合法的二叉搜索树</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener" style="margin-left:8px;">二叉树右视图</a></summary><div style="padding-top:10px;"><ol><li>BFS，每层最后一个节点放入解集</li><li>DFS，先访问右边节点，同时记录访问深度，如果深度 - 1 等于当前解集长度，表示当前节点是新的深度所在层最先访问的节点，也就是最右节点</li></ol></div></details><details><summary><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener" style="margin-left:8px;">二叉树转为链表</a></summary><div style="padding-top:10px;"><p>按照前序遍历的顺序将每个节点都变成右节点</p><ul><li>递归，函数设计为 <code>trans(node)</code>，返回转换后的树的根节点，<a href="https://leetcode-cn.com/submissions/detail/93910322/" target="_blank" rel="noopener">解答</a></li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/" target="_blank" rel="noopener" style="margin-left:8px;">删除二叉搜索树中的某个节点</a></summary><div style="padding-top:10px;"><p>删除之后仍然需要是个二叉搜索树</p><ul><li>首先根据二叉搜索树的性质找到对应的节点，同时记下它的父节点</li><li>如果该节点是子节点，直接删除；如果没有左子树或右子树，用左或右子节点替代它；</li><li>如果左右子树都有那么可以找到左子树中最右侧的子节点或者右子树中最左侧的子节点来替代它</li></ul></div></details><details><summary><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener" style="margin-left:8px;">二叉树中最大路径和</a></summary><div style="padding-top:10px;"><p>这里的路径指的是任意两个节点的通路，至少包含一个节点</p><ul><li>递归即可，只是要注意的是，当前节点也要作为一份子参与到最大值的比较中</li></ul></div></details>',8),s=[r],c={__name:"二叉树",setup(p,{expose:e}){return e({frontmatter:{}}),(o,n)=>(t(),l("div",i,s))}};export{c as default};
